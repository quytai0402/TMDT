// This is your Prisma schema file for MongoDB
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ============================================
// USER & AUTHENTICATION MODELS
// ============================================

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String?
  phone         String?
  phoneVerified Boolean   @default(false)
  image         String?
  bio           String?
  languages     String[]

  // User type & verification
  role        UserRole   @default(GUEST)
  isVerified  Boolean    @default(false)
  isHost      Boolean    @default(false)
  isSuperHost Boolean    @default(false)
  status      UserStatus @default(ACTIVE)

  // Loyalty Program
  loyaltyPoints          Int                     @default(0)
  loyaltyTier            LoyaltyTier             @default(BRONZE)
  referralCode           String?
  referredBy             String?                 @db.ObjectId
  membershipPlanId       String?                 @db.ObjectId
  membershipStatus       MembershipStatus        @default(INACTIVE)
  membershipStartedAt    DateTime?
  membershipExpiresAt    DateTime?
  membershipFeatures     String[]                @default([])
  membershipBillingCycle MembershipBillingCycle?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  accounts               Account[]
  sessions               Session[]
  listings               Listing[]
  bookingsAsGuest        Booking[]             @relation("GuestBookings")
  bookingsAsHost         Booking[]             @relation("HostBookings")
  reviewsWritten         Review[]              @relation("ReviewsWritten")
  reviewsReceived        Review[]              @relation("ReviewsReceived")
  messages               Message[]
  notifications          Notification[]
  wishlists              Wishlist[]
  savedCollections       Collection[]
  paymentMethods         PaymentMethod[]
  transactions           Transaction[]
  rewardTransactions     RewardTransaction[]
  rewardRedemptions      RewardRedemption[]
  rewardBadges           UserBadge[]
  disputes               Dispute[]
  teamMemberships        TeamMember[]
  hostProfile            HostProfile?
  serviceBookings        ServiceBooking[]
  posts                  Post[]
  comments               Comment[]
  experiences            Experience[]
  experienceBookings     ExperienceBooking[]
  experienceReviews      ExperienceReview[]    @relation("ExperienceReviewsWritten")
  userQuests             UserQuest[]
  conciergePlansHosted   ConciergePlan[]       @relation("HostConciergePlans")
  conciergePlansAsGuest  ConciergePlan[]       @relation("GuestConciergePlans")
  conciergePlansAssigned ConciergePlan[]       @relation("AgentConciergePlans")
  membershipPlan         MembershipPlan?       @relation(fields: [membershipPlanId], references: [id], onDelete: SetNull)
  following              UserFollow[]          @relation("UserFollowing")
  followers              UserFollow[]          @relation("UserFollowers")
  hostPayouts            HostPayout[]
  hostApplications       HostApplication[]
  promotionsCreated      Promotion[]           @relation("HostPromotions")
  promotionRedemptions   PromotionRedemption[]

  @@index([referralCode], map: "users_referralCode_idx")
  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String    @unique
  expires    DateTime
  type       TokenType @default(EMAIL_VERIFICATION)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// GAMIFICATION & QUESTS
// ============================================

model Quest {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  type        QuestType
  category    QuestCategory

  // Requirements
  targetCount   Int     @default(1)
  rewardPoints  Int
  rewardBadge   String?
  rewardBadgeId String? @db.ObjectId

  // Quest properties
  isDaily  Boolean @default(false)
  isWeekly Boolean @default(false)
  isActive Boolean @default(true)
  icon     String?
  color    String?

  // Relations
  completions        UserQuest[]
  badge              RewardBadge?        @relation(fields: [rewardBadgeId], references: [id], onDelete: SetNull)
  rewardTransactions RewardTransaction[] @relation("QuestRewardTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quests")
}

model UserFollow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
  @@map("user_follows")
}

model UserQuest {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  questId String @db.ObjectId

  // Progress
  currentCount Int       @default(0)
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?

  // Daily quest tracking
  lastResetAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, questId])
  @@map("user_quests")
}

// ============================================
// REWARDS & LOYALTY MODELS
// ============================================

model RewardTier {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  tier            LoyaltyTier @unique
  name            String
  description     String?
  minPoints       Int
  maxPoints       Int?
  bonusMultiplier Float       @default(1)
  benefits        String[]
  displayOrder    Int         @default(0)
  badgeId         String?     @db.ObjectId

  badge RewardBadge? @relation(fields: [badgeId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([displayOrder])
  @@map("reward_tiers")
}

model RewardBadge {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  slug           String       @unique
  name           String
  description    String?
  tier           LoyaltyTier?
  pointsRequired Int?
  icon           String?
  color          String?
  isLimited      Boolean      @default(false)
  metadata       Json?

  quests       Quest[]
  tiers        RewardTier[]
  actions      RewardAction[]
  catalogItems RewardCatalogItem[]
  userBadges   UserBadge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reward_badges")
}

model MembershipPlan {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  slug              String   @unique
  name              String
  tagline           String?
  description       String?
  icon              String?
  color             String?
  badge             String?
  monthlyPrice      Int
  annualPrice       Int
  savings           Int?
  isPopular         Boolean  @default(false)
  features          String[]
  exclusiveFeatures String[]
  bookingDiscountRate      Float   @default(0)
  applyDiscountToServices  Boolean @default(false)
  displayOrder      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  members User[]

  @@index([displayOrder])
  @@map("membership_plans")
}

model UserBadge {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  userId   String       @db.ObjectId
  badgeId  String       @db.ObjectId
  source   RewardSource @default(ADMIN)
  metadata Json?
  earnedAt DateTime     @default(now())

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge RewardBadge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model RewardAction {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  slug            String           @unique
  title           String
  description     String?
  type            RewardActionType
  source          RewardSource
  points          Int
  maxTimesPerDay  Int?
  maxTimesPerWeek Int?
  cooldownHours   Int?
  isRecurring     Boolean          @default(true)
  isActive        Boolean          @default(true)
  metadata        Json?
  badgeId         String?          @db.ObjectId

  badge        RewardBadge?        @relation(fields: [badgeId], references: [id], onDelete: SetNull)
  transactions RewardTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reward_actions")
}

model RewardTransaction {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  userId          String                @db.ObjectId
  actionId        String?               @db.ObjectId
  questId         String?               @db.ObjectId
  transactionType RewardTransactionType
  source          RewardSource
  points          Int
  balanceAfter    Int
  description     String?
  referenceId     String?
  metadata        Json?
  occurredAt      DateTime              @default(now())
  expiresAt       DateTime?

  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     RewardAction?     @relation(fields: [actionId], references: [id], onDelete: SetNull)
  quest      Quest?            @relation("QuestRewardTransactions", fields: [questId], references: [id], onDelete: SetNull)
  redemption RewardRedemption? @relation("RedemptionTransaction")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, occurredAt])
  @@index([transactionType])
  @@map("reward_transactions")
}

model RewardCatalogItem {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  slug              String                @unique
  name              String
  description       String?
  category          RewardCatalogCategory
  pointsCost        Int
  cashValue         Float?
  quantityAvailable Int?
  maxPerUser        Int?
  startAt           DateTime?
  endAt             DateTime?
  isActive          Boolean               @default(true)
  image             String?
  terms             String?
  metadata          Json?
  badgeId           String?               @db.ObjectId
  promotionId       String?               @db.ObjectId

  badge       RewardBadge?       @relation(fields: [badgeId], references: [id], onDelete: SetNull)
  promotion   Promotion?         @relation(fields: [promotionId], references: [id], onDelete: SetNull)
  redemptions RewardRedemption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, isActive])
  @@index([promotionId])
  @@map("reward_catalog_items")
}

model RewardRedemption {
  id            String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId        String                 @db.ObjectId
  rewardId      String                 @db.ObjectId
  status        RewardRedemptionStatus @default(PENDING)
  pointsSpent   Int
  metadata      Json?
  notes         String?
  requestedAt   DateTime               @default(now())
  processedAt   DateTime?
  fulfilledAt   DateTime?
  transactionId String?                @unique @db.ObjectId

  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward      RewardCatalogItem  @relation(fields: [rewardId], references: [id], onDelete: Restrict)
  transaction RewardTransaction? @relation("RedemptionTransaction", fields: [transactionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status])
  @@map("reward_redemptions")
}

// ============================================
// HOST PROFILE & TEAM
// ============================================

model HostProfile {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  userId               String    @unique @db.ObjectId
  responseRate         Float     @default(0)
  responseTime         Int       @default(0) // in minutes
  acceptanceRate       Float     @default(0)
  isSuperHost          Boolean   @default(false)
  superHostSince       DateTime?
  totalEarnings        Float     @default(0)
  availableBalance     Float     @default(0)
  pendingPayoutBalance Float     @default(0)
  averageRating        Float     @default(0)
  totalReviews         Int       @default(0)
  instantBookEnabled   Boolean   @default(false)
  governmentIdVerified Boolean   @default(false)
  emailVerified        Boolean   @default(false)
  phoneVerified        Boolean   @default(false)
  primaryLocationSlug  String?
  primaryLocationName  String?

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamMembers TeamMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("host_profiles")
}

model HostApplication {
  id                      String                @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String                @db.ObjectId
  locationSlug            String
  locationName            String
  introduction            String?
  experience              String?
  status                  HostApplicationStatus @default(PENDING)
  adminNotes              String?
  maintenanceAcknowledged Boolean               @default(false)
  createdAt               DateTime              @default(now())
  reviewedAt              DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("host_applications")
}

model TeamMember {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  hostProfileId String       @db.ObjectId
  userId        String       @db.ObjectId
  role          TeamRole
  permissions   Permission[]

  hostProfile HostProfile @relation(fields: [hostProfileId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_members")
}

// ============================================
// LISTING MODELS
// ============================================

model Listing {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  hostId String @db.ObjectId

  // Basic Info
  title        String
  description  String
  propertyType PropertyType
  roomType     RoomType

  // Capacity
  maxGuests Int
  bedrooms  Int
  beds      Int
  bathrooms Float

  // Location
  country      String
  city         String
  state        String?
  address      String
  zipCode      String?
  latitude     Float
  longitude    Float
  neighborhood String?

  // Pricing
  basePrice       Float
  cleaningFee     Float  @default(0)
  serviceFee      Float  @default(0)
  weeklyDiscount  Float  @default(0)
  monthlyDiscount Float  @default(0)
  currency        String @default("VND")

  // Dynamic Pricing
  dynamicPricingEnabled Boolean @default(false)
  weekendMultiplier     Float   @default(1.2)

  // Media
  images            String[]
  virtualTour360Url String?
  videoUrl          String?
  floorPlanUrl      String?

  // Amenities
  amenities String[] @db.ObjectId

  // Rules & Policies
  checkInTime        String             @default("14:00")
  checkOutTime       String             @default("11:00")
  minNights          Int                @default(1)
  maxNights          Int                @default(365)
  instantBookable    Boolean            @default(false)
  cancellationPolicy CancellationPolicy @default(MODERATE)
  houseRules         String?
  allowPets          Boolean            @default(false)
  allowSmoking       Boolean            @default(false)
  allowEvents        Boolean            @default(false)
  allowChildren      Boolean            @default(true)

  // Smart Features
  hasSmartLock  Boolean @default(false)
  smartLockCode String?
  wifiName      String?
  wifiPassword  String?

  // Verification & Status
  isVerified        Boolean       @default(false)
  verifiedAmenities String[]
  status            ListingStatus @default(DRAFT)

  // SEO & Visibility
  slug          String?   @unique
  featured      Boolean   @default(false)
  featuredUntil DateTime?
  views         Int       @default(0)
  isSecret      Boolean   @default(false)

  // Stats
  averageRating Float @default(0)
  totalReviews  Int   @default(0)
  totalBookings Int   @default(0)
  occupancyRate Float @default(0)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  host              User               @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings          Booking[]
  reviews           Review[]
  blockedDates      BlockedDate[]
  pricingRules      PricingRule[]
  neighborhoodGuide NeighborhoodGuide?
  posts             Post[]
  conciergePlans    ConciergePlan[]

  @@map("listings")
}

model BlockedDate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId String   @db.ObjectId
  startDate DateTime
  endDate   DateTime
  reason    String?

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("blocked_dates")
}

model PricingRule {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId  String   @db.ObjectId
  name       String
  startDate  DateTime
  endDate    DateTime
  multiplier Float // 1.5 = 150% of base price
  fixedPrice Float? // Override base price
  isActive   Boolean  @default(true)

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pricing_rules")
}

model Amenity {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String          @unique
  nameVi      String?
  icon        String
  category    AmenityCategory
  isPopular   Boolean         @default(false)
  description String?

  createdAt DateTime @default(now())

  @@map("amenities")
}

model NeighborhoodGuide {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  listingId     String                @unique @db.ObjectId
  overview      String
  gettingAround String?
  restaurants   PlaceRecommendation[]
  cafes         PlaceRecommendation[]
  attractions   PlaceRecommendation[]
  shopping      PlaceRecommendation[]

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("neighborhood_guides")
}

type PlaceRecommendation {
  name        String
  description String
  distance    Float // in kilometers
  placeId     String? // Google Places ID
}

// ============================================
// BOOKING MODELS
// ============================================

model Booking {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  listingId String           @db.ObjectId
  guestId   String?          @db.ObjectId
  hostId    String           @db.ObjectId
  guestType BookingGuestType @default(REGISTERED)

  // Guest contact
  contactName            String?
  contactEmail           String?
  contactPhone           String?
  contactPhoneNormalized String?

  // Dates
  checkIn  DateTime
  checkOut DateTime
  nights   Int

  // Guests
  adults   Int @default(1)
  children Int @default(0)
  infants  Int @default(0)
  pets     Int @default(0)

  // Pricing
  basePrice               Float
  cleaningFee             Float  @default(0)
  serviceFee              Float  @default(0)
  discount                Float  @default(0)
  membershipDiscount      Float  @default(0)
  promotionDiscount       Float  @default(0)
  additionalServices      Json?
  additionalServicesTotal Float  @default(0)
  appliedPromotions       Json?
  totalPrice              Float
  currency                String @default("VND")

  // Status
  status              BookingStatus    @default(PENDING)
  instantBook         Boolean          @default(false)
  hostEarnings        Float            @default(0)
  platformCommission  Float            @default(0)
  hostPayoutStatus    HostPayoutStatus @default(PENDING)
  hostPayoutRequestId String?          @db.ObjectId
  hostPayoutSettledAt DateTime?

  // Special Requests
  specialRequests String?

  // Check-in Info
  checkInInstructions String?
  accessCode          String?

  // Cancellation
  cancelledAt        DateTime?
  cancelledBy        String?   @db.ObjectId
  cancellationReason String?
  refundAmount       Float?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  completedAt DateTime?

  // Relations
  listing              Listing               @relation(fields: [listingId], references: [id], onDelete: Restrict)
  guest                User?                 @relation("GuestBookings", fields: [guestId], references: [id], onDelete: SetNull)
  host                 User                  @relation("HostBookings", fields: [hostId], references: [id], onDelete: Restrict)
  payment              Payment?
  review               Review?
  messages             Message[]
  serviceBookings      ServiceBooking[]
  conciergePlans       ConciergePlan[]
  hostPayout           HostPayout?           @relation("PayoutBookings", fields: [hostPayoutRequestId], references: [id], onDelete: SetNull)
  promotionRedemptions PromotionRedemption[] @relation("BookingPromotionRedemptions")

  @@index([contactPhoneNormalized])
  @@map("bookings")
}

model ConciergePlan {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  bookingId        String?             @db.ObjectId
  listingId        String              @db.ObjectId
  guestId          String?             @db.ObjectId
  hostId           String              @db.ObjectId
  conciergeAgentId String?             @db.ObjectId
  status           ConciergePlanStatus @default(PENDING)
  planDetails      Json
  loyaltyOffer     String?
  partnerInfo      Json?
  hostNotes        String?
  guestNotes       String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  booking        Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  listing        Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  guest          User?    @relation("GuestConciergePlans", fields: [guestId], references: [id], onDelete: SetNull)
  host           User     @relation("HostConciergePlans", fields: [hostId], references: [id], onDelete: Cascade)
  conciergeAgent User?    @relation("AgentConciergePlans", fields: [conciergeAgentId], references: [id], onDelete: SetNull)

  @@index([bookingId])
  @@index([listingId])
  @@index([guestId])
  @@index([hostId])
  @@map("concierge_plans")
}

// ============================================
// PAYMENT MODELS
// ============================================

model Payment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  bookingId String @unique @db.ObjectId

  // Payment Details
  amount         Float
  currency       String            @default("VND")
  paymentMethod  PaymentMethodType
  paymentGateway PaymentGateway

  // Status
  status PaymentStatus @default(PENDING)

  // Gateway Response
  transactionId   String?
  gatewayResponse Json?

  // Split Payment
  isSplitPayment Boolean              @default(false)
  splitPayments  SplitPaymentDetail[]

  // Installment
  isInstallment   Boolean          @default(false)
  installmentPlan InstallmentPlan?

  // Refund
  refundAmount Float?
  refundReason String?
  refundedAt   DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  paidAt    DateTime?

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

type SplitPaymentDetail {
  userId String
  amount Float
  status PaymentStatus
  paidAt DateTime?
}

type InstallmentPlan {
  totalInstallments Int
  paidInstallments  Int
  installments      InstallmentDetail[]
}

type InstallmentDetail {
  installmentNumber Int
  amount            Float
  dueDate           DateTime
  paidDate          DateTime?
  status            PaymentStatus
}

model PaymentMethod {
  id     String            @id @default(auto()) @map("_id") @db.ObjectId
  userId String            @db.ObjectId
  type   PaymentMethodType

  // Card Details (masked)
  last4       String?
  brand       String?
  expiryMonth Int?
  expiryYear  Int?

  // E-wallet
  walletType  String?
  walletPhone String?

  isDefault Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment_methods")
}

model Transaction {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  type        TransactionType
  amount      Float
  currency    String            @default("VND")
  description String?
  status      TransactionStatus
  referenceId String? // Booking ID, Payout ID, etc.

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}

model HostPayout {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  hostId       String       @db.ObjectId
  amount       Float
  status       PayoutStatus @default(PENDING)
  bookingIds   String[]
  payoutMethod String?
  notes        String?
  adminNotes   String?
  requestedAt  DateTime     @default(now())
  processedAt  DateTime?
  host         User         @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings     Booking[]    @relation("PayoutBookings")

  @@index([hostId])
  @@map("host_payouts")
}

// ============================================
// REVIEW MODELS
// ============================================

model Review {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  listingId  String @db.ObjectId
  bookingId  String @unique @db.ObjectId
  reviewerId String @db.ObjectId
  revieweeId String @db.ObjectId

  // Type
  type ReviewType

  // Ratings
  overallRating       Float
  cleanlinessRating   Float?
  accuracyRating      Float?
  checkInRating       Float?
  communicationRating Float?
  locationRating      Float?
  valueRating         Float?

  // Content
  comment String

  // AI Analysis
  aiSentiment String? // positive, negative, neutral
  aiSummary   String?
  aiKeywords  String[]

  // Moderation
  isVerified Boolean @default(false)
  isFlagged  Boolean @default(false)
  flagReason String?

  // Response
  hostResponse    String?
  hostRespondedAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  listing  Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  booking  Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  reviewer User    @relation("ReviewsWritten", fields: [reviewerId], references: [id], onDelete: Restrict)
  reviewee User    @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Restrict)

  @@map("reviews")
}

// ============================================
// MESSAGING MODELS
// ============================================

model Message {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String  @db.ObjectId
  senderId       String  @db.ObjectId
  bookingId      String? @db.ObjectId

  // Content
  content     String
  messageType MessageType @default(TEXT)
  attachments String[]

  // Status
  isRead Boolean   @default(false)
  readAt DateTime?

  // AI Features
  translatedContent Json? // {en: "...", vi: "..."}
  isAutomated       Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  booking      Booking?     @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

// ============================================
// NOTIFICATION MODELS
// ============================================

model Notification {
  id      String           @id @default(auto()) @map("_id") @db.ObjectId
  userId  String           @db.ObjectId
  type    NotificationType
  title   String
  message String
  link    String?
  data    Json?

  isRead Boolean   @default(false)
  readAt DateTime?

  // Channels
  sentEmail Boolean @default(false)
  sentPush  Boolean @default(false)
  sentSMS   Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("notifications")
}

model SystemSetting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json?
  updatedBy String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model PaymentGatewayConfig {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  gateway   String
  config    Json
  isEnabled Boolean  @default(true)
  updatedBy String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gateway])
  @@map("payment_gateway_configs")
}

model CmsBlock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  label     String?
  data      Json
  updatedBy String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cms_blocks")
}

// ============================================
// WISHLIST & COLLECTIONS
// ============================================

model Wishlist {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingIds String[] @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wishlists")
}

model Collection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  name        String
  description String?
  coverImage  String?
  listingIds  String[] @db.ObjectId
  isPublic    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collections")
}

// ============================================
// ADMIN & DISPUTES
// ============================================

model Dispute {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  bookingId    String @db.ObjectId
  reporterId   String @db.ObjectId
  respondentId String @db.ObjectId

  type     DisputeType
  status   DisputeStatus   @default(OPEN)
  priority DisputePriority @default(MEDIUM)

  subject     String
  description String
  evidence    String[]

  resolution String?
  resolvedBy String?   @db.ObjectId
  resolvedAt DateTime?

  refundAmount Float?

  reporter User @relation(fields: [reporterId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("disputes")
}

model Promotion {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  code        String  @unique
  name        String
  description String?

  type          PromotionType
  discountType  DiscountType
  discountValue Float
  maxDiscount   Float?

  minBookingValue Float?
  maxUses         Int?
  usedCount       Int    @default(0)

  maxUsesPerUser         Int?
  pointCost              Int?            @default(0)
  source                 PromotionSource @default(ADMIN)
  hostId                 String?         @db.ObjectId
  stackWithMembership    Boolean         @default(true)
  stackWithPromotions    Boolean         @default(false)
  allowedMembershipTiers LoyaltyTier[]   @default([])
  metadata               Json?

  // Targeting
  userIds       String[]       @db.ObjectId
  listingIds    String[]       @db.ObjectId
  propertyTypes PropertyType[]

  validFrom  DateTime
  validUntil DateTime
  isActive   Boolean  @default(true)

  host        User?                 @relation("HostPromotions", fields: [hostId], references: [id], onDelete: SetNull)
  redemptions PromotionRedemption[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  RewardCatalogItem RewardCatalogItem[]

  @@map("promotions")
}

model PromotionRedemption {
  id               String                    @id @default(auto()) @map("_id") @db.ObjectId
  promotionId      String                    @db.ObjectId
  userId           String                    @db.ObjectId
  status           PromotionRedemptionStatus @default(ACTIVE)
  redeemedAt       DateTime                  @default(now())
  expiresAt        DateTime?
  appliedBookingId String?                   @db.ObjectId
  pointsSpent      Int?                      @default(0)
  metadata         Json?

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking   Booking?  @relation("BookingPromotionRedemptions", fields: [appliedBookingId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status])
  @@index([promotionId, status])
  @@map("promotion_redemptions")
}

model AuditLog {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String? @db.ObjectId
  action     String
  entityType String
  entityId   String?
  changes    Json?
  ipAddress  String?
  userAgent  String?

  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  GUEST
  HOST
  ADMIN
  SUPER_ADMIN
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum MembershipStatus {
  INACTIVE
  ACTIVE
  EXPIRED
  CANCELLED
}

enum MembershipBillingCycle {
  MONTHLY
  ANNUAL
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  PHONE_VERIFICATION
}

enum QuestType {
  PROFILE_COMPLETION
  BOOKING
  REVIEW
  REFERRAL
  DAILY_CHECK_IN
  STREAK
  SOCIAL
  EXPLORATION
}

enum QuestCategory {
  ONBOARDING
  ENGAGEMENT
  LOYALTY
  SOCIAL
  SPECIAL
}

enum RewardActionType {
  BOOKING_COMPLETED
  REVIEW_SUBMITTED
  PROFILE_COMPLETED
  REFERRAL_COMPLETED
  QUEST_COMPLETED
  DAILY_CHECK_IN
  ANNIVERSARY
  PROMOTION
  MANUAL_ADJUSTMENT
}

enum RewardSource {
  BOOKING
  REVIEW
  QUEST
  REFERRAL
  DAILY
  PROMOTION
  ADMIN
  REDEMPTION
  MANUAL
  MEMBERSHIP
}

enum RewardTransactionType {
  CREDIT
  DEBIT
  ADJUSTMENT
  EXPIRATION
}

enum RewardRedemptionStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  FULFILLED
}

enum PromotionRedemptionStatus {
  ACTIVE
  USED
  EXPIRED
  CANCELLED
}

enum RewardCatalogCategory {
  VOUCHER
  DISCOUNT
  EXPERIENCE
  UPGRADE
  MERCHANDISE
  CASHBACK
  DONATION
  OTHER
}

enum TeamRole {
  MANAGER
  CLEANER
  MAINTENANCE
  COORDINATOR
}

enum Permission {
  VIEW_LISTINGS
  EDIT_LISTINGS
  VIEW_BOOKINGS
  MANAGE_BOOKINGS
  VIEW_CALENDAR
  EDIT_CALENDAR
  VIEW_MESSAGES
  SEND_MESSAGES
  VIEW_FINANCIALS
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  CONDO
  TOWNHOUSE
  BUNGALOW
  CABIN
  FARM_STAY
  BOAT
  UNIQUE
}

enum RoomType {
  ENTIRE_PLACE
  PRIVATE_ROOM
  SHARED_ROOM
}

enum CancellationPolicy {
  FLEXIBLE
  MODERATE
  STRICT
  SUPER_STRICT
}

enum ListingStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  INACTIVE
  BLOCKED
  ARCHIVED
}

enum AmenityCategory {
  BASIC
  FACILITIES
  DINING
  GUEST_ACCESS
  LOGISTICS
  ENTERTAINMENT
  FAMILY
  SAFETY
  WORKSPACE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DECLINED
  EXPIRED
}

enum BookingGuestType {
  REGISTERED
  WALK_IN
}

enum ConciergePlanStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  MOMO
  ZALOPAY
  VNPAY
  BANK_TRANSFER
}

enum PaymentGateway {
  VNPAY
  MOMO
  ZALOPAY
  STRIPE
  PAYPAL
}

enum TransactionType {
  BOOKING_PAYMENT
  REFUND
  PAYOUT
  FEE
  REWARD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum HostPayoutStatus {
  PENDING
  REQUESTED
  PAID
}

enum PayoutStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum HostApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum ReviewType {
  GUEST_TO_HOST
  HOST_TO_GUEST
  GUEST_TO_LISTING
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUTOMATED
  SYSTEM
}

enum NotificationType {
  BOOKING_REQUEST
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  REVIEW_RECEIVED
  MESSAGE_RECEIVED
  PRICE_DROP
  AVAILABILITY_ALERT
  PROMOTION
  SYSTEM
}

enum DisputeType {
  REFUND_REQUEST
  PROPERTY_ISSUE
  HOST_BEHAVIOR
  GUEST_BEHAVIOR
  DAMAGE_CLAIM
  PAYMENT_ISSUE
  OTHER
}

enum DisputeStatus {
  OPEN
  IN_REVIEW
  AWAITING_RESPONSE
  RESOLVED
  CLOSED
}

enum DisputePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PromotionType {
  FIRST_BOOKING
  REFERRAL
  SEASONAL
  FLASH_SALE
  LOYALTY_REWARD
  GENERAL
}

enum PromotionSource {
  ADMIN
  HOST
  LOYALTY_EXCHANGE
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ServiceCategory {
  PET_VET
  PET_PARK
  PET_STORE
  PET_GROOMING
  PET_HOTEL
  COWORKING_SPACE
  WORKSPACE
  GYM
  RESTAURANT
  CAFE
  TRANSPORT
  TOUR
  ENTERTAINMENT
  OTHER
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  TEMPORARILY_CLOSED
}

// ============================================
// ADDITIONAL SERVICES MODELS
// ============================================

model Service {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  category    ServiceCategory
  subcategory String?

  // Location
  address   String
  city      String
  state     String?
  country   String  @default("Vietnam")
  latitude  Float
  longitude Float

  // Contact
  phone   String?
  email   String?
  website String?

  // Operating hours
  openHours     String // e.g., "8:00 - 20:00 (T2-CN)"
  isOpen24Hours Boolean @default(false)

  // Media
  images String[]
  logo   String?

  // Pricing
  basePrice Int? // Price per service (optional, some are free like parks)
  currency  String @default("VND")

  // Ratings
  averageRating Float @default(0)
  totalReviews  Int   @default(0)

  // Features
  features  String[] // ["Khám tổng quát", "Tiêm phòng", etc]
  amenities String[] // ["WiFi", "Parking", etc]

  // Bookable
  isBookable      Boolean @default(false)
  requiresDeposit Boolean @default(false)
  depositAmount   Int?

  // Status
  status     ServiceStatus @default(ACTIVE)
  verifiedAt DateTime?

  // Relations (services near listings)
  nearbyListings String[] @db.ObjectId

  // Bookings
  serviceBookings ServiceBooking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model ServiceBooking {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  serviceId String @db.ObjectId
  bookingId String @db.ObjectId // Link to main booking
  guestId   String @db.ObjectId

  // Booking details
  bookingDate     DateTime
  timeSlot        String? // "10:00 - 11:00"
  numberOfPets    Int? // For pet services
  petDetails      String? // JSON string with pet info
  specialRequests String?

  // Pricing
  price    Int
  currency String  @default("VND")
  paid     Boolean @default(false)

  // Status
  status             BookingStatus @default(PENDING)
  confirmedAt        DateTime?
  completedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?

  // Relations
  service Service @relation(fields: [serviceId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])
  guest   User    @relation(fields: [guestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("service_bookings")
}

// ============================================
// COMMUNITY/SOCIAL MODELS
// ============================================

model Post {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  authorId String @db.ObjectId
  content  String

  // Media attachments
  media PostMedia[]

  // Optional listing reference
  listingId String?  @db.ObjectId
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull)

  // Location
  location  String? // City/location text
  latitude  Float?
  longitude Float?

  // Engagement
  likes         String[] @db.ObjectId // User IDs who liked
  likesCount    Int      @default(0)
  commentsCount Int      @default(0)
  sharesCount   Int      @default(0)

  // Status
  status   PostStatus @default(ACTIVE)
  isPublic Boolean    @default(true)
  isPinned Boolean    @default(false)

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([listingId])
  @@index([createdAt])
  @@map("posts")
}

type PostMedia {
  type    String // "image" | "video"
  url     String
  caption String?
}

model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  postId   String @db.ObjectId
  authorId String @db.ObjectId
  content  String

  // Nested replies
  parentId String? @db.ObjectId

  // Engagement
  likes      String[] @db.ObjectId
  likesCount Int      @default(0)

  // Relations
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
  @@map("comments")
}

enum PostStatus {
  ACTIVE
  HIDDEN
  DELETED
  FLAGGED
}

// ============================================
// EXPERIENCE MODELS  
// ============================================

model Experience {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  hostId String @db.ObjectId

  // Basic Info
  title       String
  description String
  category    ExperienceCategory

  // Location
  city      String
  state     String?
  location  String // Detailed location
  latitude  Float?
  longitude Float?

  // Media
  image    String
  images   String[]
  videoUrl String?

  // Pricing & Duration
  price     Float
  currency  String @default("VND")
  duration  String // "3 giờ", "Cả ngày"
  groupSize String // "Tối đa 8 người"
  minGuests Int    @default(1)
  maxGuests Int    @default(10)

  // Details
  includedItems String[] // What's included
  notIncluded   String[] // What's not included
  requirements  String[] // Age limit, fitness level, etc.
  languages     String[] // Languages spoken by host

  // Tags
  tags String[]

  // Status & Verification
  status        ExperienceStatus @default(DRAFT)
  isVerified    Boolean          @default(false)
  featured      Boolean          @default(false)
  isMembersOnly Boolean          @default(false)

  // Stats
  averageRating Float @default(0)
  totalReviews  Int   @default(0)
  totalBookings Int   @default(0)

  // Relations
  host     User                @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings ExperienceBooking[]
  reviews  ExperienceReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hostId])
  @@index([category])
  @@index([city])
  @@map("experiences")
}

model ExperienceBooking {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  experienceId String @db.ObjectId
  guestId      String @db.ObjectId

  // Booking details
  date           DateTime
  timeSlot       String? // "10:00 - 13:00"
  numberOfGuests Int

  // Pricing
  pricePerPerson Float
  totalPrice     Float
  currency       String @default("VND")

  // Status
  status BookingStatus @default(PENDING)
  paid   Boolean       @default(false)

  // Relations
  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  guest      User       @relation(fields: [guestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([experienceId])
  @@index([guestId])
  @@map("experience_bookings")
}

model ExperienceReview {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  experienceId String @db.ObjectId
  bookingId    String @db.ObjectId
  authorId     String @db.ObjectId

  rating  Float
  content String
  images  String[]

  // Relations
  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  author     User       @relation("ExperienceReviewsWritten", fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([experienceId])
  @@index([authorId])
  @@map("experience_reviews")
}

// ============================================
// MESSAGING MODELS
// ============================================

model Conversation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  participants String[] @db.ObjectId // User IDs
  listingId    String?  @db.ObjectId // Optional linked listing

  // Metadata
  lastMessage   String?
  lastMessageAt DateTime?
  unreadCount   Json? // { userId: count } for each participant

  // Relations
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([participants])
  @@map("conversations")
}

enum ExperienceCategory {
  FOOD_DRINK // Ẩm thực
  ADVENTURE // Mạo hiểm
  CULTURE // Văn hóa
  WELLNESS // Sức khỏe & Yoga
  WATER_SPORTS // Hoạt động nước
  WORKSHOP // Workshop & Học tập
  SIGHTSEEING // Tham quan
  ENTERTAINMENT // Giải trí
  SHOPPING // Mua sắm
  NIGHTLIFE // Nightlife
}

enum ExperienceStatus {
  DRAFT
  ACTIVE
  PAUSED
  INACTIVE
}

enum LiveChatStatus {
  WAITING
  CONNECTED
  ENDED
}

model LiveChatSession {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?
  userName      String?
  userEmail     String?
  status        LiveChatStatus    @default(WAITING)
  queuePosition Int?              @default(1)
  metadata      Json?
  createdAt     DateTime          @default(now())
  connectedAt   DateTime?
  endedAt       DateTime?
  messages      LiveChatMessage[]

  @@index([status, createdAt])
  @@map("live_chat_sessions")
}

model LiveChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String   @db.ObjectId
  sender    String
  content   String
  metadata  Json?
  createdAt DateTime @default(now())

  session LiveChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@map("live_chat_messages")
}
