import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import { getPropertyImages, calculateMarketPrice } from '../lib/unsplash-images'

const prisma = new PrismaClient()

// Vietnam locations data
const locations = [
  { city: 'Nha Trang', state: 'Kh√°nh H√≤a', lat: 12.2388, lng: 109.1967 },
  { city: 'ƒê√† L·∫°t', state: 'L√¢m ƒê·ªìng', lat: 11.9404, lng: 108.4583 },
  { city: 'Ph√∫ Qu·ªëc', state: 'Ki√™n Giang', lat: 10.2222, lng: 103.9676 },
  { city: 'Qu·∫≠n 1', state: 'TP. H·ªì Ch√≠ Minh', lat: 10.7756, lng: 106.7019 },
  { city: 'H·ªôi An', state: 'Qu·∫£ng Nam', lat: 15.8801, lng: 108.338 },
  { city: 'T√¢y H·ªì', state: 'H√† N·ªôi', lat: 21.0552, lng: 105.8164 },
  { city: 'M≈©i N√©', state: 'B√¨nh Thu·∫≠n', lat: 10.9333, lng: 108.2833 },
  { city: 'C·∫ßn Th∆°', state: 'C·∫ßn Th∆°', lat: 10.0452, lng: 105.7469 },
  { city: 'V≈©ng T√†u', state: 'B√† R·ªãa - V≈©ng T√†u', lat: 10.3459, lng: 107.0842 },
  { city: 'Sapa', state: 'L√†o Cai', lat: 22.3364, lng: 103.8438 },
  { city: 'H·∫° Long', state: 'Qu·∫£ng Ninh', lat: 20.9503, lng: 107.0833 },
  { city: 'ƒê√† N·∫µng', state: 'ƒê√† N·∫µng', lat: 16.0544, lng: 108.2022 },
  { city: 'Hu·∫ø', state: 'Th·ª´a Thi√™n Hu·∫ø', lat: 16.4637, lng: 107.5909 },
  { city: 'Quy Nh∆°n', state: 'B√¨nh ƒê·ªãnh', lat: 13.7829, lng: 109.2196 },
  { city: 'C√°t B√†', state: 'H·∫£i Ph√≤ng', lat: 20.7279, lng: 107.0447 },
]

const propertyTypes = ['APARTMENT', 'HOUSE', 'VILLA', 'CONDO', 'BUNGALOW', 'CABIN', 'FARM_STAY'] as const
const roomTypes = ['ENTIRE_PLACE', 'PRIVATE_ROOM', 'SHARED_ROOM'] as const

const amenities = [
  'Wifi', 'B·∫øp', 'M√°y gi·∫∑t', 'ƒêi·ªÅu h√≤a', 'TV', 'B√†n l√†m vi·ªác',
  'H·ªì b∆°i', 'B√£i ƒë·∫≠u xe mi·ªÖn ph√≠', 'Gym', 'Ban c√¥ng/S√¢n th∆∞·ª£ng',
  'BBQ', 'V∆∞·ªùn', 'View bi·ªÉn', 'View n√∫i', 'G·∫ßn b√£i bi·ªÉn',
  'Thang m√°y', 'D·ª•ng c·ª• n·∫•u ƒÉn', 'M√°y s·∫•y t√≥c', 'K√©t s·∫Øt',
  'Camera an ninh', 'B·∫£o v·ªá 24/7', 'Nh√† h√†ng', 'Spa', 'Ph√≤ng x√¥ng h∆°i'
]

const listingTitles = [
  'Villa sang tr·ªçng view bi·ªÉn',
  'CƒÉn h·ªô hi·ªán ƒë·∫°i trung t√¢m',
  'Homestay ·∫•m c√∫ng',
  'Bi·ªát th·ª± v∆∞·ªùn y√™n tƒ©nh',
  'Penthouse cao c·∫•p',
  'Studio ti·ªán nghi',
  'Nh√† g·ªó truy·ªÅn th·ªëng',
  'Bungalow b√£i bi·ªÉn',
  'Condo view s√¥ng',
  'Farmstay sinh th√°i',
]

function randomElement<T>(array: readonly T[]): T {
  return array[Math.floor(Math.random() * array.length)]
}

function randomNumber(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min
}

function randomPrice(): number {
  const prices = [500000, 800000, 1000000, 1200000, 1500000, 1800000, 2000000, 2500000, 3000000, 3500000, 4000000, 5000000, 8000000, 10000000]
  return randomElement(prices)
}

async function main() {
  console.log('üå± Starting extended database seeding...')

  // Create additional users (20 hosts, 30 guests)
  console.log('üë• Creating users...')
  
  const hashedPassword = await bcrypt.hash('password123', 10)
  const hosts: any[] = []
  const guests: any[] = []

  // Create 20 hosts
  for (let i = 1; i <= 20; i++) {
    const host = await prisma.user.upsert({
      where: { email: `host${i}@luxestay.com` },
      update: {},
      create: {
        email: `host${i}@luxestay.com`,
        name: `Host ${i}`,
        password: hashedPassword,
        role: 'HOST',
        isHost: true,
        isSuperHost: i <= 5, // First 5 are super hosts
        emailVerified: new Date(),
        phone: `090${String(i).padStart(7, '0')}`,
        image: `https://api.dicebear.com/7.x/avataaars/svg?seed=host${i}`,
        bio: `Ch·ªß nh√† v·ªõi ${randomNumber(1, 10)} nƒÉm kinh nghi·ªám`,
        referralCode: `HOST${i}`,
        loyaltyPoints: randomNumber(0, 5000),
      }
    })
    hosts.push(host)
  }

  // Create 30 guests
  for (let i = 1; i <= 30; i++) {
    const guest = await prisma.user.upsert({
      where: { email: `guest${i}@luxestay.com` },
      update: {},
      create: {
        email: `guest${i}@luxestay.com`,
        name: `Guest ${i}`,
        password: hashedPassword,
        role: 'GUEST',
        emailVerified: new Date(),
        phone: `091${String(i).padStart(7, '0')}`,
        image: `https://api.dicebear.com/7.x/avataaars/svg?seed=guest${i}`,
        referralCode: `GUEST${i}`,
        loyaltyPoints: randomNumber(0, 3000),
      }
    })
    guests.push(guest)
  }

  console.log(`‚úÖ Created ${hosts.length} hosts and ${guests.length} guests`)

  // Create 60 listings
  console.log('üè† Creating listings...')
  const listings: any[] = []

  for (let i = 1; i <= 60; i++) {
    const location = randomElement(locations)
    const propertyType = randomElement(propertyTypes)
    const roomType = randomElement(roomTypes)
    const title = `${randomElement(listingTitles)} ${location.city}`
    const slug = `${title.toLowerCase().replace(/\s+/g, '-')}-${i}`
    const host = randomElement(hosts)
    
    const bedrooms = randomNumber(1, 6)
    const beds = bedrooms + randomNumber(0, 2)
    const bathrooms = randomNumber(1, Math.ceil(bedrooms / 2))
    const maxGuests = bedrooms * 2 + randomNumber(0, 2)
    const rating = (Math.random() * (5 - 4) + 4).toFixed(1)
    const reviewsCount = randomNumber(5, 200)
    const bookingsCount = randomNumber(10, 300)

    // Use ML-based pricing
    const basePrice = calculateMarketPrice(
      propertyType,
      bedrooms,
      location.city,
      parseFloat(rating),
      i <= 10
    )

    // Get real images based on property type and location
    const images = getPropertyImages(propertyType, location.city, 5)

    const listing = await prisma.listing.create({
      data: {
        title,
        slug,
        description: `${title} v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi hi·ªán ƒë·∫°i. Kh√¥ng gian r·ªông r√£i, tho√°ng m√°t, view ƒë·∫πp. Ph√π h·ª£p cho gia ƒë√¨nh, nh√≥m b·∫°n. G·∫ßn c√°c ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng.`,
        hostId: host.id,
        propertyType,
        roomType,
        maxGuests,
        bedrooms,
        beds,
        bathrooms,
        country: 'Vietnam',
        city: location.city,
        state: location.state,
        address: `${randomNumber(1, 500)} ƒê∆∞·ªùng ${randomNumber(1, 100)}, ${location.city}`,
        latitude: location.lat + (Math.random() - 0.5) * 0.1,
        longitude: location.lng + (Math.random() - 0.5) * 0.1,
        basePrice,
        cleaningFee: Math.round(basePrice * 0.15),
        currency: 'VND',
        images,
        amenities: [], // Will be populated later with Amenity records
        status: 'ACTIVE',
        cancellationPolicy: randomElement(['FLEXIBLE', 'MODERATE', 'STRICT']),
        averageRating: parseFloat(rating),
        totalReviews: reviewsCount,
        totalBookings: bookingsCount,
        featured: i <= 10, // First 10 are featured
      }
    })
    listings.push(listing)
  }

  console.log(`‚úÖ Created ${listings.length} listings`)

  // Create 150 bookings
  console.log('üìÖ Creating bookings...')
  const bookings: any[] = []

  for (let i = 1; i <= 150; i++) {
    const listing = randomElement(listings)
    const guest = randomElement(guests)
    
    const now = new Date()
    const daysAgo = randomNumber(1, 365)
    const checkIn = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000)
    const nights = randomNumber(2, 14)
    const checkOut = new Date(checkIn.getTime() + nights * 24 * 60 * 60 * 1000)
    
    const adults = randomNumber(1, listing.maxGuests)
    const children = randomNumber(0, Math.min(2, listing.maxGuests - adults))
    
    const basePrice = listing.basePrice * nights
    const cleaningFee = listing.cleaningFee
    const serviceFee = Math.round(basePrice * 0.12)
    const totalPrice = basePrice + cleaningFee + serviceFee

    const statuses: Array<'COMPLETED' | 'PENDING' | 'CONFIRMED'> = ['COMPLETED', 'COMPLETED', 'COMPLETED', 'PENDING', 'CONFIRMED']
    const status = randomElement(statuses)

    const booking = await prisma.booking.create({
      data: {
        listingId: listing.id,
        guestId: guest.id,
        hostId: listing.hostId,
        checkIn,
        checkOut,
        adults,
        children,
        infants: 0,
        pets: 0,
        nights,
        basePrice,
        cleaningFee,
        serviceFee,
        totalPrice,
        status,
      }
    })
    bookings.push(booking)
  }

  console.log(`‚úÖ Created ${bookings.length} bookings`)

  // Create 200+ reviews
  console.log('‚≠ê Creating reviews...')
  const reviews: any[] = []

  const reviewComments = [
    'N∆°i ·ªü tuy·ªát v·ªùi, s·∫°ch s·∫Ω v√† tho·∫£i m√°i!',
    'Ch·ªß nh√† r·∫•t th√¢n thi·ªán v√† nhi·ªát t√¨nh.',
    'V·ªã tr√≠ thu·∫≠n ti·ªán, g·∫ßn nhi·ªÅu ƒë·ªãa ƒëi·ªÉm du l·ªãch.',
    'Kh√¥ng gian ƒë·∫πp, view tuy·ªát v·ªùi!',
    'ƒê√∫ng nh∆∞ m√¥ t·∫£, r·∫•t h√†i l√≤ng.',
    'S·∫Ω quay l·∫°i l·∫ßn sau!',
    'Gi√° c·∫£ h·ª£p l√Ω, ƒë√°ng ƒë·ªìng ti·ªÅn.',
    'Ti·ªán nghi ƒë·∫ßy ƒë·ªß, hi·ªán ƒë·∫°i.',
    'Tr·∫£i nghi·ªám tuy·ªát v·ªùi c√πng gia ƒë√¨nh.',
    'Highly recommended!',
  ]

  const completedBookings = bookings.filter(b => b.status === 'COMPLETED')
  
  for (const booking of completedBookings) {
    const overallRating = randomNumber(8, 10) / 2 // 4.0 - 5.0
    
    const review = await prisma.review.create({
      data: {
        bookingId: booking.id,
        listingId: booking.listingId,
        reviewerId: booking.guestId,
        revieweeId: booking.hostId,
        type: 'GUEST_TO_HOST',
        overallRating,
        cleanlinessRating: randomNumber(8, 10) / 2,
        accuracyRating: randomNumber(8, 10) / 2,
        checkInRating: randomNumber(8, 10) / 2,
        communicationRating: randomNumber(8, 10) / 2,
        locationRating: randomNumber(8, 10) / 2,
        valueRating: randomNumber(8, 10) / 2,
        comment: randomElement(reviewComments),
      }
    })
    reviews.push(review)
  }

  console.log(`‚úÖ Created ${reviews.length} reviews`)

  console.log('üéâ Extended database seeding completed!')
  console.log('')
  console.log('üìä Summary:')
  console.log(`- Users: ${hosts.length + guests.length} (${hosts.length} hosts + ${guests.length} guests)`)
  console.log(`- Listings: ${listings.length}`)
  console.log(`- Bookings: ${bookings.length}`)
  console.log(`- Reviews: ${reviews.length}`)
  console.log('')
  console.log('‚ú® Featured Listings (Top 10):')
  const featuredListings = listings.filter(l => l.isFeatured).slice(0, 5)
  featuredListings.forEach(l => {
    console.log(`  ‚Ä¢ ${l.title} (${l.averageRating}‚≠ê)`)
  })
  console.log('')
  console.log('‚úÖ All done! Use login: host1@luxestay.com / guest1@luxestay.com with password: password123')
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
