import { PrismaClient, PropertyType, ListingStatus, UserRole, BookingStatus, RoomType, AmenityCategory } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

// Expand to 20 real Vietnam locations
const VIETNAM_LOCATIONS = {
  'ƒê√† L·∫°t': { city: 'ƒê√† L·∫°t', state: 'L√¢m ƒê·ªìng', country: 'Vietnam', latitude: 11.9404, longitude: 108.4583, attractions: ['H·ªì Xu√¢n H∆∞∆°ng', 'Ch·ª£ ƒê√† L·∫°t', 'Th√°c Datanla', 'Valley of Love', 'Crazy House'] },
  'Nha Trang': { city: 'Nha Trang', state: 'Kh√°nh H√≤a', country: 'Vietnam', latitude: 12.2388, longitude: 109.1967, attractions: ['Vinpearl', 'Th√°p B√† Ponagar', 'ƒê·∫£o H√≤n Mun', 'B√£i D√†i', 'Su·ªëi Kho√°ng N√≥ng'] },
  'H·ªôi An': { city: 'H·ªôi An', state: 'Qu·∫£ng Nam', country: 'Vietnam', latitude: 15.8801, longitude: 108.3380, attractions: ['Ph·ªë C·ªï', 'Ch√πa C·∫ßu', 'ƒê·∫£o C√π Lao Ch√†m', 'R·ª´ng D·ª´a B·∫£y M·∫´u', 'L√†ng G·ªëm Thanh H√†'] },
  'Ph√∫ Qu·ªëc': { city: 'Ph√∫ Qu·ªëc', state: 'Ki√™n Giang', country: 'Vietnam', latitude: 10.2899, longitude: 103.9840, attractions: ['B√£i Sao', 'Vinpearl Safari', 'Ch·ª£ ƒê√™m Ph√∫ Qu·ªëc', 'Dinh C·∫≠u', 'Sunset Sanato'] },
  'Sapa': { city: 'Sapa', state: 'L√†o Cai', country: 'Vietnam', latitude: 22.3364, longitude: 103.8438, attractions: ['Fansipan', 'B·∫£n C√°t C√°t', 'Th√°c B·∫°c', 'C·ªïng Tr·ªùi', 'Ru·ªông B·∫≠c Thang'] },
  'V≈©ng T√†u': { city: 'V≈©ng T√†u', state: 'B√† R·ªãa', country: 'Vietnam', latitude: 10.3460, longitude: 107.0843, attractions: ['B√£i Sau', 'T∆∞·ª£ng Ch√∫a Kit√¥', 'H·∫£i ƒêƒÉng', 'B√£i D·ª©a', 'B√£i Tr∆∞·ªõc'] },
  'ƒê√† N·∫µng': { city: 'ƒê√† N·∫µng', state: 'ƒê√† N·∫µng', country: 'Vietnam', latitude: 16.0544, longitude: 108.2022, attractions: ['C·∫ßu R·ªìng', 'B√† N√† Hills', 'Ng≈© H√†nh S∆°n', 'B√£i M·ªπ Kh√™', 'C·∫ßu V√†ng'] },
  'H√† N·ªôi': { city: 'H√† N·ªôi', state: 'H√† N·ªôi', country: 'Vietnam', latitude: 21.0285, longitude: 105.8542, attractions: ['H·ªì Ho√†n Ki·∫øm', 'Ph·ªë C·ªï', 'VƒÉn Mi·∫øu', 'LƒÉng B√°c', 'Ch√πa M·ªôt C·ªôt'] },
  'TP.HCM': { city: 'TP.HCM', state: 'H·ªì Ch√≠ Minh', country: 'Vietnam', latitude: 10.8231, longitude: 106.6297, attractions: ['Nh√† Th·ªù ƒê·ª©c B√†', 'Dinh ƒê·ªôc L·∫≠p', 'Ch·ª£ B·∫øn Th√†nh', 'Ph·ªë ƒêi B·ªô', 'Bitexco Tower'] },
  'Hu·∫ø': { city: 'Hu·∫ø', state: 'Th·ª´a Thi√™n Hu·∫ø', country: 'Vietnam', latitude: 16.4637, longitude: 107.5909, attractions: ['ƒê·∫°i N·ªôi', 'LƒÉng Kh·∫£i ƒê·ªãnh', 'Ch√πa Thi√™n M·ª•', 'S√¥ng H∆∞∆°ng', 'LƒÉng T·ª± ƒê·ª©c'] },
  'Quy Nh∆°n': { city: 'Quy Nh∆°n', state: 'B√¨nh ƒê·ªãnh', country: 'Vietnam', latitude: 13.7830, longitude: 109.2196, attractions: ['B√£i X√©p', 'Eo Gi√≥', 'K·ª≥ Co', 'H√≤n Kh√¥', 'Gh·ªÅnh R√°ng'] },
  'M≈©i N√©': { city: 'M≈©i N√©', state: 'B√¨nh Thu·∫≠n', country: 'Vietnam', latitude: 10.9333, longitude: 108.2667, attractions: ['ƒê·ªìi C√°t Bay', 'Su·ªëi Ti√™n', 'H√≤n R∆°m', 'B√£i Bi·ªÉn M≈©i N√©', 'L√†ng Ch√†i'] },
  'C·∫ßn Th∆°': { city: 'C·∫ßn Th∆°', state: 'C·∫ßn Th∆°', country: 'Vietnam', latitude: 10.0452, longitude: 105.7469, attractions: ['Ch·ª£ N·ªïi C√°i RƒÉng', 'Ch√πa Khmer', 'C·∫ßu C·∫ßn Th∆°', 'V∆∞·ªùn C√≤', 'B·∫øn Ninh Ki·ªÅu'] },
  'H·∫° Long': { city: 'H·∫° Long', state: 'Qu·∫£ng Ninh', country: 'Vietnam', latitude: 20.9599, longitude: 107.0426, attractions: ['V·ªãnh H·∫° Long', 'ƒê·∫£o Titop', 'Hang S·ª≠ng S·ªët', 'ƒê·∫£o C√°t B√†', 'Hang ƒê·∫ßu G·ªó'] },
  'Ninh B√¨nh': { city: 'Ninh B√¨nh', state: 'Ninh B√¨nh', country: 'Vietnam', latitude: 20.2506, longitude: 105.9745, attractions: ['Tr√†ng An', 'Tam C·ªëc', 'B√°i ƒê√≠nh', 'Hang M√∫a', 'C√∫c Ph∆∞∆°ng'] },
  'ƒê·ªìng H·ªõi': { city: 'ƒê·ªìng H·ªõi', state: 'Qu·∫£ng B√¨nh', country: 'Vietnam', latitude: 17.4833, longitude: 106.6000, attractions: ['Phong Nha-K·∫ª B√†ng', 'S√¥ng Ch√†y', 'Hang S∆°n ƒêo√≤ng', 'Su·ªëi N∆∞·ªõc Mo·ªçc', 'B√£i ƒê√° Nh·∫£y'] },
  'C√¥n ƒê·∫£o': { city: 'C√¥n ƒê·∫£o', state: 'B√† R·ªãa', country: 'Vietnam', latitude: 8.6833, longitude: 106.6000, attractions: ['B√£i √îng ƒê·ª•ng', 'Nh√† T√π C√¥n ƒê·∫£o', 'ƒê·∫£o B·∫£y C·∫°nh', 'ƒê·∫ßm Tr·∫ßu', 'C·∫ßu T√†u 914'] },
  'Phan Thi·∫øt': { city: 'Phan Thi·∫øt', state: 'B√¨nh Thu·∫≠n', country: 'Vietnam', latitude: 10.9333, longitude: 108.1000, attractions: ['Th√°p Ch√†m Poshanu', 'ƒê·ªìi C√°t V√†ng', 'B√£i R·∫°ng', 'H√≤n R·ªõm', 'Su·ªëi H·ªìng'] },
  'Tam ƒê·∫£o': { city: 'Tam ƒê·∫£o', state: 'Vƒ©nh Ph√∫c', country: 'Vietnam', latitude: 21.4500, longitude: 105.6333, attractions: ['N√∫i Tam ƒê·∫£o', 'Th√°c B·∫°c', 'Ch√πa T√¢y Thi√™n', 'V∆∞·ªùn Qu·ªëc Gia', 'Stone Church'] },
  'M·ªôc Ch√¢u': { city: 'M·ªôc Ch√¢u', state: 'S∆°n La', country: 'Vietnam', latitude: 20.8667, longitude: 104.6833, attractions: ['ƒê·ªìi Ch√®', 'Th√°c D·∫£i Y·∫øm', 'ƒê·ªìng C·ª´u', 'L√†ng D√¢n T·ªôc', 'Hang D∆°i'] }
}

console.log('üåü Starting ENHANCED data seeding with 100+ diverse listings...\n')

async function main() {
  // Use existing amenities and users, just add more listings
  console.log('üìä Counting existing data...')
  
  const existingCounts = await prisma.$transaction([
    prisma.amenity.count(),
    prisma.user.count({ where: { role: UserRole.HOST }}),
    prisma.listing.count()
  ])

  console.log(`   - Amenities: ${existingCounts[0]}`)
  console.log(`   - Hosts: ${existingCounts[1]}`)
  console.log(`   - Existing Listings: ${existingCounts[2]}`)

  if (existingCounts[1] === 0) {
    console.log('‚ùå No hosts found. Please run seed-real-diverse.ts first!')
    return
  }

  // Get all hosts and amenities
  const hosts = await prisma.user.findMany({ where: { role: UserRole.HOST }})
  const allAmenities = await prisma.amenity.findMany()
  const amenityIds = allAmenities.map(a => a.id)

  console.log(`\nüè† Creating additional diverse listings...`)
  
  let created = 0
  const propertyTypes: PropertyType[] = [PropertyType.VILLA, PropertyType.APARTMENT, PropertyType.HOUSE, PropertyType.BUNGALOW, PropertyType.CABIN]
  
  // Create 5 listings per location (20 locations √ó 5 = 100 new listings)
  for (const [locationName, locationData] of Object.entries(VIETNAM_LOCATIONS)) {
    for (let i = 0; i < 5; i++) {
      const propertyType = propertyTypes[Math.floor(Math.random() * propertyTypes.length)]
      
      // Generate varied data
      const bedrooms = Math.floor(Math.random() * 5) + 1 // 1-6
      const maxGuests = bedrooms * 2 + Math.floor(Math.random() * 3) // More varied
      const bathrooms = Math.max(1, Math.ceil(bedrooms * 0.7))
      
      // Price based on location and property type
      let basePrice = 1000000 // Base 1M
      if (propertyType === PropertyType.VILLA) basePrice = Math.floor(Math.random() * 10000000) + 5000000 // 5-15M
      else if (propertyType === PropertyType.APARTMENT) basePrice = Math.floor(Math.random() * 2000000) + 800000 // 0.8-2.8M
      else if (propertyType === PropertyType.HOUSE) basePrice = Math.floor(Math.random() * 3000000) + 1500000 // 1.5-4.5M
      else if (propertyType === PropertyType.BUNGALOW) basePrice = Math.floor(Math.random() * 2000000) + 1000000 // 1-3M
      else if (propertyType === PropertyType.CABIN) basePrice = Math.floor(Math.random() * 1500000) + 700000 // 0.7-2.2M
      
      // Location multiplier (expensive cities)
      if (['H√† N·ªôi', 'TP.HCM', 'ƒê√† N·∫µng'].includes(locationName)) basePrice *= 1.3
      if (['Ph√∫ Qu·ªëc', 'C√¥n ƒê·∫£o', 'H·∫° Long'].includes(locationName)) basePrice *= 1.2
      
      basePrice = Math.floor(basePrice)
      
      // Varied titles
      const titlePrefixes = ['Cozy', 'Luxury', 'Modern', 'Traditional', 'Charming', 'Spacious', 'Elegant', 'Peaceful', 'Stunning', 'Beautiful']
      const titleSuffixes = ['Retreat', 'Haven', 'Escape', 'Oasis', 'Paradise', 'Hideaway', 'Sanctuary', 'Corner', 'Suite', 'Residence']
      const title = `${titlePrefixes[Math.floor(Math.random() * titlePrefixes.length)]} ${propertyType} ${titleSuffixes[Math.floor(Math.random() * titleSuffixes.length)]} - ${locationName}`
      
      // Unique descriptions
      const descriptions = [
        `Experience the best of ${locationName} in this ${propertyType.toLowerCase()}. Perfect for those seeking comfort and authentic local vibes.`,
        `Discover ${locationName} from this beautifully designed ${propertyType.toLowerCase()}. Ideal location with all modern amenities.`,
        `Your perfect ${locationName} getaway awaits! This ${propertyType.toLowerCase()} offers stunning views and exceptional hospitality.`,
        `Immerse yourself in ${locationName}'s culture from this stylish ${propertyType.toLowerCase()}. Walking distance to major attractions.`,
        `Premium ${propertyType.toLowerCase()} in the heart of ${locationName}. Enjoy local cuisine, scenic beauty, and unforgettable memories.`
      ]
      
      const description = descriptions[Math.floor(Math.random() * descriptions.length)] + 
        `\n\nüåü Nearby: ${locationData.attractions.slice(0, 3).join(', ')}\n‚ú® Perfect for: ${maxGuests <= 2 ? 'Couples, Solo travelers' : maxGuests <= 4 ? 'Small families, Friends' : 'Large groups, Family reunions'}`
      
      // Varied images from Unsplash (different keywords)
      const imageKeywords = ['villa', 'apartment', 'house', 'hotel', 'resort', 'interior', 'bedroom', 'living-room', 'kitchen', 'bathroom', 'view', 'pool']
      const images: string[] = []
      for (let j = 0; j < 6; j++) {
        const keyword = imageKeywords[Math.floor(Math.random() * imageKeywords.length)]
        images.push(`https://images.unsplash.com/photo-${1550000000000 + Math.floor(Math.random() * 100000000)}?w=800&q=80&auto=format&fit=crop`)
      }
      
      // Random amenities (8-15 amenities per listing)
      const numAmenities = Math.floor(Math.random() * 8) + 8
      const shuffled = [...amenityIds].sort(() => 0.5 - Math.random())
      const selectedAmenities = shuffled.slice(0, numAmenities)
      
      // Create unique slug
      const slugBase = title.toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/ƒë/g, 'd')
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
      const slug = `${slugBase}-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`
      
      await prisma.listing.create({
        data: {
          title,
          slug,
          description,
          propertyType,
          roomType: bedrooms >= 2 ? RoomType.ENTIRE_PLACE : (Math.random() > 0.3 ? RoomType.ENTIRE_PLACE : RoomType.PRIVATE_ROOM),
          basePrice,
          cleaningFee: Math.floor(basePrice * 0.1),
          city: locationData.city,
          state: locationData.state,
          country: locationData.country,
          address: `${Math.floor(Math.random() * 500) + 1} ${locationData.attractions[0]}, ${locationData.city}`,
          latitude: locationData.latitude + (Math.random() - 0.5) * 0.1,
          longitude: locationData.longitude + (Math.random() - 0.5) * 0.1,
          maxGuests,
          bedrooms,
          beds: bedrooms + Math.floor(Math.random() * 2),
          bathrooms,
          images,
          amenities: selectedAmenities,
          status: ListingStatus.ACTIVE,
          hostId: hosts[Math.floor(Math.random() * hosts.length)].id,
          instantBookable: Math.random() > 0.5,
          minNights: Math.floor(Math.random() * 2) + 1,
          maxNights: Math.floor(Math.random() * 20) + 10,
          featured: Math.random() > 0.8, // 20% featured
          averageRating: Math.random() * 1.5 + 3.5, // 3.5-5.0
        }
      })
      
      created++
      if (created % 20 === 0) {
        console.log(`   ‚úÖ Created ${created} listings...`)
      }
    }
  }

  console.log(`\n‚ú® Successfully added ${created} diverse listings!`)
  console.log(`üìä Total listings now: ${existingCounts[2] + created}`)
  console.log(`üéâ Database is production-ready with ${existingCounts[2] + created} unique properties!\n`)
}

main()
  .catch((e) => {
    console.error('‚ùå Error:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
