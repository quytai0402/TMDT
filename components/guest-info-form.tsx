"use client"

import { Card } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { User, Phone, Mail, MessageSquare, Gift, AlertCircle, Star } from "lucide-react"
import { useState, useEffect } from "react"
import { useSession } from "next-auth/react"

export interface GuestInfo {
  fullName: string
  phone: string
  email: string
  specialRequests?: string
}

interface GuestInfoFormProps {
  onInfoChange?: (info: GuestInfo) => void
  onLoginClick?: () => void
  titlePrefix?: string
}

export function GuestInfoForm({ onInfoChange, onLoginClick, titlePrefix }: GuestInfoFormProps) {
  const { data: session } = useSession()
  const [guestInfo, setGuestInfo] = useState<GuestInfo>({
    fullName: "",
    phone: "",
    email: "",
    specialRequests: ""
  })
  const [phoneHistory, setPhoneHistory] = useState<{
    totalBookings: number
    totalSpent: number
    memberTier?: string
    discount?: number
  } | null>(null)

  // Auto-fill if user is logged in
  useEffect(() => {
    if (session?.user) {
      setGuestInfo(prev => ({
        ...prev,
        fullName: session.user.name || "",
        email: session.user.email || "",
      }))
    }
  }, [session])

  // Check phone number history when phone changes
  const checkPhoneHistory = async (phone: string) => {
    if (phone.length === 10) {
      try {
        const response = await fetch(`/api/guests/history?phone=${phone}`)
        
        if (!response.ok) {
          setPhoneHistory(null)
          return
        }

        const data = await response.json()
        setPhoneHistory(data)
      } catch (error) {
        console.error('Error checking phone history:', error)
        setPhoneHistory(null)
      }
    } else {
      setPhoneHistory(null)
    }
  }

  const handleChange = (field: keyof GuestInfo, value: string) => {
    const updated = { ...guestInfo, [field]: value }
    setGuestInfo(updated)

    // Check phone history when phone number changes
    if (field === "phone") {
      checkPhoneHistory(value)
    }
  }

  useEffect(() => {
    onInfoChange?.(guestInfo)
  }, [guestInfo, onInfoChange])

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN').format(Math.round(price))
  }

  const headingPrefix = titlePrefix ? titlePrefix.trim() : ""

  return (
    <Card className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="font-semibold text-lg">
          {headingPrefix ? `${headingPrefix} ` : ""}
          Th√¥ng tin kh√°ch h√†ng
        </h3>
        {session?.user ? (
          <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
            <User className="w-3 h-3 mr-1" />
            ƒê√£ ƒëƒÉng nh·∫≠p
          </Badge>
        ) : (
          <Badge variant="outline" className="bg-gray-50 text-gray-700 border-gray-200">
            Kh√°ch v√£ng lai
          </Badge>
        )}
      </div>

      {!session?.user && (
        <Alert className="mb-6 bg-blue-50 dark:bg-blue-900/20 border-blue-200">
          <AlertCircle className="w-4 h-4 text-blue-600" />
          <AlertDescription className="text-sm text-blue-700 dark:text-blue-300">
            B·∫°n ƒëang ƒë·∫∑t ph√≤ng v·ªõi t∆∞ c√°ch kh√°ch v√£ng lai. 
            <Button
              type="button"
              variant="link"
              className="h-auto p-0 ml-1 text-blue-700"
              onClick={onLoginClick}
            >
              ƒêƒÉng nh·∫≠p
            </Button> ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i t·ªët h∆°n.
          </AlertDescription>
        </Alert>
      )}

      <div className="space-y-4">
        {/* Full Name */}
        <div>
          <Label htmlFor="fullName" className="flex items-center space-x-2">
            <User className="w-4 h-4" />
            <span>H·ªç v√† t√™n <span className="text-red-500">*</span></span>
          </Label>
          <Input
            id="fullName"
            value={guestInfo.fullName}
            onChange={(e) => handleChange("fullName", e.target.value)}
            placeholder="Nguy·ªÖn VƒÉn A"
            className="mt-2"
            required
          />
        </div>

        {/* Phone Number */}
        <div>
          <Label htmlFor="phone" className="flex items-center space-x-2">
            <Phone className="w-4 h-4" />
            <span>S·ªë ƒëi·ªán tho·∫°i <span className="text-red-500">*</span></span>
          </Label>
          <Input
            id="phone"
            value={guestInfo.phone}
            onChange={(e) => handleChange("phone", e.target.value)}
            placeholder="0912345678"
            className="mt-2"
            required
          />
          <p className="text-xs text-muted-foreground mt-1">
            S·ªë ƒëi·ªán tho·∫°i s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ tra c·ª©u l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng v√† nh·∫≠n ∆∞u ƒë√£i
          </p>
        </div>

        {/* Phone History Alert */}
        {phoneHistory && (
          <Alert className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border-purple-200">
            <Star className="w-4 h-4 text-purple-600" />
            <AlertDescription className="space-y-2">
              <p className="font-semibold text-purple-900 dark:text-purple-100">
                Ch√†o m·ª´ng kh√°ch h√†ng {phoneHistory.memberTier}! üéâ
              </p>
              <div className="text-sm text-purple-700 dark:text-purple-300 space-y-1">
                <div className="flex items-center justify-between">
                  <span>S·ªë l·∫ßn ƒë·∫∑t ph√≤ng:</span>
                  <span className="font-medium">{phoneHistory.totalBookings} l·∫ßn</span>
                </div>
                <div className="flex items-center justify-between">
                  <span>T·ªïng chi ti√™u:</span>
                  <span className="font-medium">{formatPrice(phoneHistory.totalSpent)}‚Ç´</span>
                </div>
                {phoneHistory.discount && (
                  <div className="flex items-center justify-between">
                    <span>∆Øu ƒë√£i c·ªßa b·∫°n:</span>
                    <Badge className="bg-green-600">
                      <Gift className="w-3 h-3 mr-1" />
                      Gi·∫£m {phoneHistory.discount}%
                    </Badge>
                  </div>
                )}
              </div>
            </AlertDescription>
          </Alert>
        )}

        {/* Email */}
        <div>
          <Label htmlFor="email" className="flex items-center space-x-2">
            <Mail className="w-4 h-4" />
            <span>Email <span className="text-red-500">*</span></span>
          </Label>
          <Input
            id="email"
            type="email"
            value={guestInfo.email}
            onChange={(e) => handleChange("email", e.target.value)}
            placeholder="example@email.com"
            className="mt-2"
            required
          />
          <p className="text-xs text-muted-foreground mt-1">
            Email ƒë·ªÉ nh·∫≠n x√°c nh·∫≠n ƒë·∫∑t ph√≤ng
          </p>
        </div>

        <Separator />

        {/* Special Requests */}
        <div>
          <Label htmlFor="specialRequests" className="flex items-center space-x-2">
            <MessageSquare className="w-4 h-4" />
            <span>Y√™u c·∫ßu ƒë·∫∑c bi·ªát (t√πy ch·ªçn)</span>
          </Label>
          <Textarea
            id="specialRequests"
            value={guestInfo.specialRequests}
            onChange={(e) => handleChange("specialRequests", e.target.value)}
            placeholder="V√≠ d·ª•: C·∫ßn gi∆∞·ªùng ph·ª•, ƒë·∫øn tr·ªÖ, allergies..."
            className="mt-2 min-h-[100px]"
          />
          <p className="text-xs text-muted-foreground mt-1">
            Ch√∫ng t√¥i s·∫Ω c·ªë g·∫Øng ƒë√°p ·ª©ng y√™u c·∫ßu c·ªßa b·∫°n (kh√¥ng ƒë·∫£m b·∫£o)
          </p>
        </div>
      </div>

      {/* Privacy Notice */}
      <Alert className="mt-6">
        <AlertCircle className="w-4 h-4" />
        <AlertDescription className="text-xs">
          Th√¥ng tin c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t v√† ch·ªâ d√πng cho m·ª•c ƒë√≠ch ƒë·∫∑t ph√≤ng. 
          S·ªë ƒëi·ªán tho·∫°i s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ tra c·ª©u l·ªãch s·ª≠ v√† t√≠nh ∆∞u ƒë√£i cho c√°c l·∫ßn ƒë·∫∑t sau.
        </AlertDescription>
      </Alert>
    </Card>
  )
}
