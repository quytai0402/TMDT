// @ts-nocheck - Seed file with generated Prisma types
import {
  PrismaClient,
  QuestType,
  QuestCategory,
  PromotionType,
  PromotionSource,
  DiscountType,
  LoyaltyTier,
  PropertyType,
} from '@prisma/client'
import type { Prisma } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()
const prismaAny = prisma as any

const ensureJsonObject = (value: Prisma.JsonValue | null | undefined): Prisma.JsonObject => {
  if (value && typeof value === 'object' && !Array.isArray(value)) {
    return value as Prisma.JsonObject
  }

  return {}
}

async function main() {
  console.log('üå± Starting database seeding...')

  // Clean existing data (optional - uncomment if you want to reset)
  // await prisma.$transaction([
  //   prisma.booking.deleteMany(),
  //   prisma.review.deleteMany(),
  //   prisma.listing.deleteMany(),
  //   prisma.user.deleteMany(),
  // ])

  // Create Users
  console.log('üë• Creating users...')
  
  const hashedPassword = await bcrypt.hash('password123', 10)

  const admin = await prisma.user.upsert({
    where: { email: 'admin@luxestay.com' },
    update: {},
    create: {
      email: 'admin@luxestay.com',
      name: 'Admin LuxeStay',
      password: hashedPassword,
      role: 'ADMIN',
      isHost: true,
      emailVerified: new Date(),
      phone: '0901234567',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=admin',
      bio: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng LuxeStay',
      referralCode: 'ADMIN2024',
    }
  })

  const host1 = await prisma.user.upsert({
    where: { email: 'nguyen.minh.anh@gmail.com' },
    update: {},
    create: {
      email: 'nguyen.minh.anh@gmail.com',
      name: 'Nguy·ªÖn Minh Anh',
      password: hashedPassword,
      role: 'HOST',
      isHost: true,
      isSuperHost: true,
      emailVerified: new Date(),
      phone: '0912345678',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=host1',
      bio: 'Super Host v·ªõi h∆°n 5 nƒÉm kinh nghi·ªám cho thu√™ homestay t·∫°i ƒê√† L·∫°t v√† Nha Trang',
      languages: ['Ti·∫øng Vi·ªát', 'English', 'ÌïúÍµ≠Ïñ¥'],
      referralCode: 'HOST1ANH',
    }
  })

  const host2 = await prisma.user.upsert({
    where: { email: 'tran.van.binh@gmail.com' },
    update: {},
    create: {
      email: 'tran.van.binh@gmail.com',
      name: 'Tr·∫ßn VƒÉn B√¨nh',
      password: hashedPassword,
      role: 'HOST',
      isHost: true,
      emailVerified: new Date(),
      phone: '0923456789',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=host2',
      bio: 'Ch·ªß s·ªü h·ªØu c√°c villa cao c·∫•p t·∫°i Ph√∫ Qu·ªëc',
      languages: ['Ti·∫øng Vi·ªát', 'English'],
      referralCode: 'HOST2BINH',
    }
  })

  const guest1 = await prisma.user.upsert({
    where: { email: 'khach1@gmail.com' },
    update: {},
    create: {
      email: 'khach1@gmail.com',
      name: 'L√™ Th·ªã Thu',
      password: hashedPassword,
      role: 'GUEST',
      emailVerified: new Date(),
      phone: '0934567890',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=guest1',
      referralCode: 'GUESTTHU',
    }
  })

  const guest2 = await prisma.user.upsert({
    where: { email: 'khach2@gmail.com' },
    update: {},
    create: {
      email: 'khach2@gmail.com',
      name: 'Ph·∫°m ƒê·ª©c H·∫£i',
      password: hashedPassword,
      role: 'GUEST',
      emailVerified: new Date(),
      phone: '0945678901',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=guest2',
      referralCode: 'GUESTHAI',
    }
  })

  console.log('‚úÖ Users created')

  console.log('üéÅ Configuring rewards program...')

  const badgeConfigs: Array<{
    slug: string
    name: string
    description?: string
    tier?: string
    icon?: string
    color?: string
    pointsRequired?: number
    isLimited?: boolean
  }> = [
    {
      slug: 'bronze-explorer',
      name: 'Bronze Explorer',
      description: 'Kh·ªüi ƒë·ªông h√†nh tr√¨nh c√πng LuxeStay v·ªõi nh·ªØng ∆∞u ƒë√£i ƒë·∫ßu ti√™n.',
      tier: 'BRONZE',
      icon: 'üß≠',
      color: '#CD7F32',
    },
    {
      slug: 'silver-jetsetter',
      name: 'Silver Jetsetter',
      description: 'ƒê·∫°t m·ªëc ƒëi·ªÉm th∆∞·ªüng ƒë·ªÉ unlock ∆∞u ƒë√£i linh ho·∫°t h∆°n.',
      tier: 'SILVER',
      icon: '‚úàÔ∏è',
      color: '#C0C0C0',
    },
    {
      slug: 'gold-ambassador',
      name: 'Gold Ambassador',
      description: 'Th√†nh vi√™n trung th√†nh v·ªõi quy·ªÅn l·ª£i n√¢ng c·∫•p v√† d·ªãch v·ª• ∆∞u ti√™n.',
      tier: 'GOLD',
      icon: 'üëë',
      color: '#D4AF37',
    },
    {
      slug: 'loyalty-trailblazer',
      name: 'Loyalty Trailblazer',
      description: 'Ho√†n th√†nh c√°c nhi·ªám v·ª• trung th√†nh ƒë·∫∑c bi·ªát.',
      icon: 'üî•',
      pointsRequired: 3000,
      color: '#FF6B35',
      isLimited: true,
    },
  ] as const

  const badgeRecords = await Promise.all(
    badgeConfigs.map((badge) =>
      prismaAny.rewardBadge.upsert({
        where: { slug: badge.slug },
        update: {
          name: badge.name,
          description: badge.description,
          tier: badge.tier ?? null,
          pointsRequired: badge.pointsRequired ?? null,
          icon: badge.icon ?? null,
          color: badge.color ?? null,
          isLimited: badge.isLimited ?? false,
        },
        create: {
          slug: badge.slug,
          name: badge.name,
          description: badge.description,
          tier: badge.tier ?? null,
          pointsRequired: badge.pointsRequired ?? null,
          icon: badge.icon ?? null,
          color: badge.color ?? null,
          isLimited: badge.isLimited ?? false,
        },
      })
    )
  )

  const badgeMap = new Map<string, (typeof badgeRecords)[number]>()
  badgeRecords.forEach((badge: any) => {
    badgeMap.set(badge.slug, badge)
  })

  const tierConfigs: Array<{
    tier: string
    name: string
    description?: string
    minPoints: number
    maxPoints: number | null
    bonusMultiplier: number
    benefits: string[]
    displayOrder: number
    badgeSlug?: string
  }> = [
    {
      tier: 'BRONZE',
      name: 'Bronze Explorer',
      minPoints: 0,
      maxPoints: 999,
      bonusMultiplier: 1,
      benefits: [
        'Gi·∫£m gi√° 5% cho booking ƒë·∫ßu ti√™n',
        '∆Øu ti√™n h·ªó tr·ª£ qua chat',
      ],
      displayOrder: 1,
      badgeSlug: 'bronze-explorer',
    },
    {
      tier: 'SILVER',
      name: 'Silver Voyager',
      minPoints: 1000,
      maxPoints: 2999,
      bonusMultiplier: 1.05,
      benefits: [
        'T√≠ch lu·ªπ ƒëi·ªÉm nhanh h∆°n 5%',
        '∆Øu ƒë√£i check-in s·ªõm tu·ª≥ ch·ªçn',
        'T·∫∑ng qu√† sinh nh·∫≠t ƒë·∫∑c bi·ªát',
      ],
      displayOrder: 2,
      badgeSlug: 'silver-jetsetter',
    },
    {
      tier: 'GOLD',
      name: 'Gold Ambassador',
      minPoints: 3000,
      maxPoints: 6999,
      bonusMultiplier: 1.1,
      benefits: [
        'T√≠ch lu·ªπ ƒëi·ªÉm nhanh h∆°n 10%',
        '∆Øu ti√™n n√¢ng h·∫°ng ph√≤ng khi c√≤n ch·ªó',
        'ƒê∆∞·ªùng d√¢y h·ªó tr·ª£ ri√™ng',
      ],
      displayOrder: 3,
      badgeSlug: 'gold-ambassador',
    },
    {
      tier: 'PLATINUM',
      name: 'Platinum Elite',
      minPoints: 7000,
      maxPoints: 11999,
      bonusMultiplier: 1.2,
      benefits: [
        'T√≠ch lu·ªπ ƒëi·ªÉm nhanh h∆°n 20%',
        '∆Øu ƒë√£i check-out tr·ªÖ mi·ªÖn ph√≠',
        'T·∫∑ng ƒë√™m ngh·ªâ mi·ªÖn ph√≠ m·ªói nƒÉm',
      ],
      displayOrder: 4,
    },
    {
      tier: 'DIAMOND',
      name: 'Diamond Signature',
      minPoints: 12000,
      maxPoints: null,
      bonusMultiplier: 1.3,
      benefits: [
        'ChƒÉm s√≥c kh√°ch h√†ng 24/7 chuy√™n bi·ªát',
        'N√¢ng c·∫•p h·∫°ng ph√≤ng ƒë·∫£m b·∫£o',
        'Tr·∫£i nghi·ªám concierge c√° nh√¢n ho√°',
      ],
      displayOrder: 5,
    },
  ] as const

  await Promise.all(
    tierConfigs.map((tier) =>
  prismaAny.rewardTier.upsert({
        where: { tier: tier.tier },
        update: {
          name: tier.name,
          description: tier.description ?? null,
          minPoints: tier.minPoints,
          maxPoints: tier.maxPoints,
          bonusMultiplier: tier.bonusMultiplier,
          benefits: tier.benefits,
          displayOrder: tier.displayOrder,
          badgeId: tier.badgeSlug ? badgeMap.get(tier.badgeSlug)?.id ?? null : null,
        },
        create: {
          tier: tier.tier,
          name: tier.name,
          description: tier.description ?? null,
          minPoints: tier.minPoints,
          maxPoints: tier.maxPoints,
          bonusMultiplier: tier.bonusMultiplier,
          benefits: tier.benefits,
          displayOrder: tier.displayOrder,
          badgeId: tier.badgeSlug ? badgeMap.get(tier.badgeSlug)?.id ?? null : null,
        },
      })
    )
  )


  const membershipPlanConfigs = [
    {
      slug: 'luxe-silver',
      name: 'Luxe Silver',
      tagline: '∆Øu ƒë√£i linh ho·∫°t cho kh√°ch th√¢n thi·∫øt',
      description: 'Gi·∫£m gi√° c∆° b·∫£n v√† quy·ªÅn l·ª£i ∆∞u ti√™n khi ƒë·∫∑t homestay tr√™n LuxeStay.',
      icon: 'ü•à',
      color: '#B0BEC5',
      monthlyPrice: 299000,
      annualPrice: 2990000,
      savings: 10,
      isPopular: false,
      features: [
        'Gi·∫£m 5% cho m·ªçi booking',
        '∆Øu ti√™n h·ªó tr·ª£ qua chat',
        'Mi·ªÖn ph√≠ n√¢ng h·∫°ng cu·ªëi tu·∫ßn (tu·ª≥ t√¨nh tr·∫°ng ph√≤ng)',
      ],
      exclusiveFeatures: [
        'Mi·ªÖn ph√≠ check-in s·ªõm (tu·ª≥ t√¨nh tr·∫°ng ph√≤ng)',
      ],
      bookingDiscountRate: 5,
      applyDiscountToServices: false,
      displayOrder: 1,
    },
    {
      slug: 'luxe-gold',
      name: 'Luxe Gold',
      tagline: 'Tr·∫£i nghi·ªám n√¢ng h·∫°ng v√† d·ªãch v·ª• concierge',
      description: 'ƒê∆∞·ª£c thi·∫øt k·∫ø cho kh√°ch h√†ng trung th√†nh v·ªõi nhu c·∫ßu n√¢ng h·∫°ng ph√≤ng v√† d·ªãch v·ª• cao c·∫•p.',
      icon: 'ü•á',
      color: '#F1C40F',
      monthlyPrice: 499000,
      annualPrice: 4990000,
      savings: 15,
      isPopular: true,
      features: [
        'Gi·∫£m 10% cho m·ªçi booking',
        'Priority concierge 24/7',
        'Mi·ªÖn ph√≠ n√¢ng h·∫°ng ph√≤ng khi c√≤n tr·ªëng',
      ],
      exclusiveFeatures: [
        'T·∫∑ng 1 voucher spa m·ªói qu√Ω',
        'Gi·∫£m 10% cho d·ªãch v·ª• b·ªï sung',
      ],
      bookingDiscountRate: 10,
      applyDiscountToServices: true,
      displayOrder: 2,
    },
    {
      slug: 'luxe-platinum',
      name: 'Luxe Platinum',
      tagline: 'Quy·ªÅn l·ª£i ƒë·ªôc quy·ªÅn & concierge c√° nh√¢n ho√°',
      description: 'T·ªëi ∆∞u cho kh√°ch doanh nh√¢n v√† gia ƒë√¨nh cao c·∫•p c·∫ßn d·ªãch v·ª• ri√™ng bi·ªát.',
      icon: 'üíé',
      color: '#8E24AA',
      monthlyPrice: 899000,
      annualPrice: 8990000,
      savings: 20,
      isPopular: false,
      features: [
        'Gi·∫£m 12% cho m·ªçi booking',
        'Concierge c√° nh√¢n ho√°',
        '∆Øu ti√™n check-in/out linh ho·∫°t',
      ],
      exclusiveFeatures: [
        'T·∫∑ng 1 ƒë√™m mi·ªÖn ph√≠ m·ªói nƒÉm',
        'Gi·∫£m 15% cho d·ªãch v·ª• b·ªï sung',
        'Tr·∫£i nghi·ªám partner cao c·∫•p',
      ],
      bookingDiscountRate: 12,
      applyDiscountToServices: true,
      displayOrder: 3,
    },
  ]

  const membershipPlanRecords = await Promise.all(
    membershipPlanConfigs.map((plan) =>
      prisma.membershipPlan.upsert({
        where: { slug: plan.slug },
        update: {
          name: plan.name,
          tagline: plan.tagline ?? null,
          description: plan.description ?? null,
          icon: plan.icon ?? null,
          color: plan.color ?? null,
          monthlyPrice: plan.monthlyPrice,
          annualPrice: plan.annualPrice,
          savings: plan.savings ?? null,
          isPopular: plan.isPopular ?? false,
          features: plan.features,
          exclusiveFeatures: plan.exclusiveFeatures,
          bookingDiscountRate: plan.bookingDiscountRate,
          applyDiscountToServices: plan.applyDiscountToServices,
          displayOrder: plan.displayOrder,
        },
        create: {
          slug: plan.slug,
          name: plan.name,
          tagline: plan.tagline ?? null,
          description: plan.description ?? null,
          icon: plan.icon ?? null,
          color: plan.color ?? null,
          monthlyPrice: plan.monthlyPrice,
          annualPrice: plan.annualPrice,
          savings: plan.savings ?? null,
          isPopular: plan.isPopular ?? false,
          features: plan.features,
          exclusiveFeatures: plan.exclusiveFeatures,
          bookingDiscountRate: plan.bookingDiscountRate,
          applyDiscountToServices: plan.applyDiscountToServices,
          displayOrder: plan.displayOrder,
        },
      })
    )
  )

  const membershipPlanMap = new Map<string, (typeof membershipPlanRecords)[number]>()
  membershipPlanRecords.forEach((plan: (typeof membershipPlanRecords)[number]) => membershipPlanMap.set(plan.slug, plan))

  const goldPlan = membershipPlanMap.get('luxe-gold')
  if (goldPlan) {
    const nowTimestamp = new Date()
    const nextYear = new Date(nowTimestamp)
    nextYear.setFullYear(nextYear.getFullYear() + 1)

    await prisma.user.update({
      where: { id: guest1.id },
      data: {
        membershipPlanId: goldPlan.id,
        membershipStatus: 'ACTIVE',
        membershipStartedAt: nowTimestamp,
        membershipExpiresAt: nextYear,
        membershipBillingCycle: 'ANNUAL',
        membershipFeatures: [...goldPlan.features, ...goldPlan.exclusiveFeatures],
        loyaltyPoints: 4800,
        loyaltyTier: 'GOLD',
      },
    })
  }

  const actionConfigs: Array<{
    slug: string
    title: string
    description?: string
    type: string
    source: string
    points: number
    maxTimesPerDay?: number
    maxTimesPerWeek?: number
    cooldownHours?: number
    isRecurring?: boolean
    badgeSlug?: string
  }> = [
    {
      slug: 'booking-completed',
      title: 'Ho√†n t·∫•t ƒë·∫∑t ph√≤ng',
      description: 'Nh·∫≠n ƒëi·ªÉm th∆∞·ªüng khi ho√†n t·∫•t m·ªói ƒë∆°n ƒë·∫∑t ph√≤ng.',
      type: 'BOOKING_COMPLETED',
      source: 'BOOKING',
      points: 400,
      maxTimesPerDay: 5,
    },
    {
      slug: 'review-submitted',
      title: 'ƒê√°nh gi√° sau chuy·∫øn ƒëi',
      description: 'Chia s·∫ª tr·∫£i nghi·ªám ƒë·ªÉ nh·∫≠n ƒëi·ªÉm th∆∞·ªüng.',
      type: 'REVIEW_SUBMITTED',
      source: 'REVIEW',
      points: 150,
      maxTimesPerDay: 3,
    },
    {
      slug: 'daily-check-in',
      title: 'ƒêi·ªÉm danh m·ªói ng√†y',
      description: 'ƒêƒÉng nh·∫≠p ·ª©ng d·ª•ng m·ªói ng√†y ƒë·ªÉ nh·∫≠n ƒëi·ªÉm.',
      type: 'DAILY_CHECK_IN',
      source: 'DAILY',
      points: 25,
      maxTimesPerDay: 1,
      cooldownHours: 24,
      isRecurring: true,
    },
    {
      slug: 'quest-completion',
      title: 'Ho√†n th√†nh nhi·ªám v·ª•',
      description: 'Khi ho√†n th√†nh m·ªôt quest trong trung t√¢m nhi·ªám v·ª•.',
      type: 'QUEST_COMPLETED',
      source: 'QUEST',
      points: 300,
      badgeSlug: 'loyalty-trailblazer',
    },
  ] as const

  const actionRecords = await Promise.all(
    actionConfigs.map((action) =>
      prismaAny.rewardAction.upsert({
        where: { slug: action.slug },
        update: {
          title: action.title,
          description: action.description,
          type: action.type,
          source: action.source,
          points: action.points,
          maxTimesPerDay: action.maxTimesPerDay ?? null,
          maxTimesPerWeek: action.maxTimesPerWeek ?? null,
          cooldownHours: action.cooldownHours ?? null,
          isRecurring: action.isRecurring ?? true,
          isActive: true,
          badgeId: action.badgeSlug ? badgeMap.get(action.badgeSlug)?.id ?? null : null,
        },
        create: {
          slug: action.slug,
          title: action.title,
          description: action.description,
          type: action.type,
          source: action.source,
          points: action.points,
          maxTimesPerDay: action.maxTimesPerDay ?? null,
          maxTimesPerWeek: action.maxTimesPerWeek ?? null,
          cooldownHours: action.cooldownHours ?? null,
          isRecurring: action.isRecurring ?? true,
          isActive: true,
          badgeId: action.badgeSlug ? badgeMap.get(action.badgeSlug)?.id ?? null : null,
        },
      })
    )
  )

  const actionMap = new Map<string, (typeof actionRecords)[number]>()
  actionRecords.forEach((action: any) => {
    actionMap.set(action.slug, action)
  })

  const questConfigs: Array<{
    title: string
    description: string
    type: QuestType
    category: QuestCategory
    targetCount: number
    rewardPoints: number
    rewardBadgeSlug?: string
    isDaily?: boolean
    isWeekly?: boolean
    icon?: string
    color?: string
  }> = [
    {
      title: 'ƒê·∫∑t ph√≤ng ƒë·∫ßu ti√™n',
      description: 'Ho√†n t·∫•t ƒë∆°n ƒë·∫∑t ph√≤ng ƒë·∫ßu ti√™n c√πng LuxeStay.',
      type: QuestType.BOOKING,
      category: QuestCategory.ONBOARDING,
      targetCount: 1,
      rewardPoints: 400,
      rewardBadgeSlug: 'bronze-explorer',
      icon: 'üß≥',
      color: '#0EA5E9',
    },
    {
      title: 'Vi·∫øt 3 ƒë√°nh gi√° ch√¢n th√†nh',
      description: 'Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n sau m·ªói chuy·∫øn ƒëi.',
      type: QuestType.REVIEW,
      category: QuestCategory.ENGAGEMENT,
      targetCount: 3,
      rewardPoints: 450,
      rewardBadgeSlug: 'silver-jetsetter',
      icon: 'üìù',
      color: '#F97316',
    },
    {
      title: 'ƒêi·ªÉm danh 5 ng√†y li√™n ti·∫øp',
      description: 'ƒêƒÉng nh·∫≠p LuxeStay li√™n t·ª•c 5 ng√†y ƒë·ªÉ duy tr√¨ streak.',
      type: QuestType.DAILY_CHECK_IN,
      category: QuestCategory.LOYALTY,
      targetCount: 5,
      rewardPoints: 300,
      rewardBadgeSlug: 'silver-jetsetter',
      isDaily: true,
      icon: 'üìÖ',
      color: '#6366F1',
    },
    {
      title: 'Kh√°m ph√° 10 homestay ti·ªÅm nƒÉng',
      description: 'L∆∞u ho·∫∑c xem chi ti·∫øt 10 homestay th√¢n thi·ªán.',
      type: QuestType.EXPLORATION,
      category: QuestCategory.SOCIAL,
      targetCount: 10,
      rewardPoints: 350,
      icon: 'üó∫Ô∏è',
      color: '#22C55E',
    },
    {
      title: 'Chia s·∫ª 3 homestay v·ªõi b·∫°n b√®',
      description: 'Gi·ªõi thi·ªáu homestay y√™u th√≠ch c·ªßa b·∫°n t·ªõi c·ªông ƒë·ªìng.',
      type: QuestType.SOCIAL,
      category: QuestCategory.SOCIAL,
      targetCount: 3,
      rewardPoints: 280,
      icon: 'ü§ù',
      color: '#EC4899',
    },
  ]

  for (const quest of questConfigs) {
    const existingQuest = await prisma.quest.findFirst({
      where: { title: quest.title },
    })

    const questData = {
      title: quest.title,
      description: quest.description,
      type: quest.type,
      category: quest.category,
      targetCount: quest.targetCount,
      rewardPoints: quest.rewardPoints,
      rewardBadge: quest.rewardBadgeSlug ? badgeMap.get(quest.rewardBadgeSlug)?.name ?? null : null,
      rewardBadgeId: quest.rewardBadgeSlug ? badgeMap.get(quest.rewardBadgeSlug)?.id ?? null : null,
      isDaily: quest.isDaily ?? false,
      isWeekly: quest.isWeekly ?? false,
      isActive: true,
      icon: quest.icon ?? null,
      color: quest.color ?? null,
    }

    if (existingQuest) {
      await prisma.quest.update({
        where: { id: existingQuest.id },
        data: questData,
      })
    } else {
      await prisma.quest.create({
        data: questData,
      })
    }
  }

  const catalogConfigs: Array<{
    slug: string
    name: string
    description?: string
    category: string
    pointsCost: number
    cashValue?: number
    quantityAvailable?: number | null
    maxPerUser?: number | null
    image?: string
    terms?: string
    badgeSlug?: string
    promotionCode?: string
    validityDays?: number
    requiredTier?: string
    startAt?: Date | null
    endAt?: Date | null
    metadata?: any
  }> = [
    // UPGRADE category
    {
      slug: 'weekend-upgrade',
      name: 'N√¢ng h·∫°ng cu·ªëi tu·∫ßn',
      description: 'ƒê·ªïi 2.000 ƒëi·ªÉm ƒë·ªÉ ƒë∆∞·ª£c n√¢ng h·∫°ng ph√≤ng kh·∫£ d·ª•ng cu·ªëi tu·∫ßn. √Åp d·ª•ng cho booking t·ª´ 2 ƒë√™m tr·ªü l√™n.',
      category: 'UPGRADE',
      pointsCost: 2000,
      cashValue: 500000,
      quantityAvailable: null, // Unlimited
      maxPerUser: 3,
      image: 'https://images.unsplash.com/photo-1505691723518-36a5ac3be353?w=1200',
      terms: '√Åp d·ª•ng cho booking t·ªëi thi·ªÉu 2 ƒë√™m, tu·ª≥ t√¨nh tr·∫°ng ph√≤ng. Kh√¥ng √°p d·ª•ng k√®m voucher kh√°c.',
      validityDays: 90,
      requiredTier: 'SILVER',
      metadata: {
        highlight: 'Ph·ªï bi·∫øn',
        icon: '‚¨ÜÔ∏è',
      },
    },
    {
      slug: 'early-checkin',
      name: 'Check-in s·ªõm',
      description: 'Check-in s·ªõm t·ª´ 12:00 (ti·∫øt ki·ªám 2 gi·ªù ch·ªù ƒë·ª£i)',
      category: 'UPGRADE',
      pointsCost: 1500,
      cashValue: 300000,
      quantityAvailable: null,
      maxPerUser: 5,
      image: 'https://images.unsplash.com/photo-1522771739844-6a9f6d5f14af?w=1200',
      terms: '√Åp d·ª•ng khi ph√≤ng s·∫µn s√†ng. Kh√¥ng ho√†n l·∫°i ƒëi·ªÉm n·∫øu kh√¥ng th·ªÉ check-in s·ªõm.',
      validityDays: 60,
    },
    {
      slug: 'late-checkout',
      name: 'Check-out mu·ªôn',
      description: 'Check-out mu·ªôn ƒë·∫øn 15:00 (th√™m 4 gi·ªù t·∫≠n h∆∞·ªüng)',
      category: 'UPGRADE',
      pointsCost: 1800,
      cashValue: 400000,
      quantityAvailable: null,
      maxPerUser: 5,
      image: 'https://images.unsplash.com/photo-1578683010236-d716f9a3f461?w=1200',
      terms: '√Åp d·ª•ng khi kh√¥ng c√≥ booking ti·∫øp theo. X√°c nh·∫≠n v·ªõi host tr∆∞·ªõc khi check-out.',
      validityDays: 60,
    },
    // EXPERIENCE category
    {
      slug: 'airport-pickup',
      name: 'ƒê∆∞a ƒë√≥n s√¢n bay mi·ªÖn ph√≠',
      description: 'D·ªãch v·ª• ƒë∆∞a ƒë√≥n s√¢n bay m·ªôt chi·ªÅu v·ªõi xe 4-7 ch·ªó. T·∫≠n h∆∞·ªüng chuy·∫øn ƒëi tho·∫£i m√°i.',
      category: 'EXPERIENCE',
      pointsCost: 3500,
      cashValue: 800000,
      quantityAvailable: null,
      maxPerUser: 2,
      image: 'https://images.unsplash.com/photo-1502877338535-766e1452684a?w=1200',
      terms: 'C·∫ßn ƒë·∫∑t t·ªëi thi·ªÉu tr∆∞·ªõc 48 gi·ªù so v·ªõi l·ªãch bay. √Åp d·ª•ng cho c√°c s√¢n bay ch√≠nh.',
      validityDays: 180,
      metadata: {
        highlight: 'Ph·ªï bi·∫øn',
        icon: 'üöó',
      },
    },
    {
      slug: 'guided-tour',
      name: 'Tour h∆∞·ªõng d·∫´n ƒë·ªãa ph∆∞∆°ng',
      description: 'Tour h∆∞·ªõng d·∫´n 4 gi·ªù kh√°m ph√° ƒëi·ªÉm n·ªïi b·∫≠t ƒë·ªãa ph∆∞∆°ng v·ªõi h∆∞·ªõng d·∫´n vi√™n chuy√™n nghi·ªáp.',
      category: 'EXPERIENCE',
      pointsCost: 4500,
      cashValue: 1000000,
      quantityAvailable: 50,
      maxPerUser: 1,
      image: 'https://images.unsplash.com/photo-1488646953014-85cb44e25828?w=1200',
      terms: 'ƒê·∫∑t tour tr∆∞·ªõc 7 ng√†y. Nh√≥m t·ªëi ƒëa 8 ng∆∞·ªùi. Bao g·ªìm v√© tham quan.',
      validityDays: 365,
      requiredTier: 'GOLD',
    },
    {
      slug: 'cooking-class',
      name: 'L·ªõp n·∫•u ƒÉn ƒë·ªãa ph∆∞∆°ng',
      description: 'Tham gia l·ªõp n·∫•u ƒÉn 3 gi·ªù h·ªçc c√°c m√≥n ƒÉn truy·ªÅn th·ªëng v·ªõi ƒë·∫ßu b·∫øp ƒë·ªãa ph∆∞∆°ng.',
      category: 'EXPERIENCE',
      pointsCost: 4000,
      cashValue: 900000,
      quantityAvailable: 30,
      maxPerUser: 2,
      image: 'https://images.unsplash.com/photo-1556910103-1c02745aae4d?w=1200',
      terms: 'ƒê·∫∑t tr∆∞·ªõc 5 ng√†y. Bao g·ªìm nguy√™n li·ªáu v√† b·ªØa ƒÉn.',
      validityDays: 365,
    },
    // VOUCHER category
    {
      slug: 'spa-credit',
      name: 'Phi·∫øu spa 60 ph√∫t',
      description: 'Voucher spa 60 ph√∫t t·∫°i ƒë·ªëi t√°c cao c·∫•p c·ªßa LuxeStay. Massage v√† facial tr·ªã li·ªáu.',
      category: 'VOUCHER',
      pointsCost: 2500,
      cashValue: 600000,
      quantityAvailable: 100,
      maxPerUser: 3,
      image: 'https://images.unsplash.com/photo-1519823551278-64ac92734fb1?w=1200',
      terms: 'C√≥ hi·ªáu l·ª±c trong 60 ng√†y k·ªÉ t·ª´ khi ƒë·ªïi. C·∫ßn ƒë·∫∑t l·ªãch tr∆∞·ªõc.',
      validityDays: 60,
      metadata: {
        highlight: 'Y√™u th√≠ch',
        icon: 'üíÜ',
      },
    },
    {
      slug: 'restaurant-voucher',
      name: 'Voucher nh√† h√†ng 500K',
      description: 'Voucher ƒÉn u·ªëng 500.000‚Ç´ t·∫°i nh√† h√†ng ƒë·ªëi t√°c. √Åp d·ª•ng cho b·ªØa t·ªëi cao c·∫•p.',
      category: 'VOUCHER',
      pointsCost: 2200,
      cashValue: 500000,
      quantityAvailable: null,
      maxPerUser: 5,
      image: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=1200',
      terms: 'C√≥ hi·ªáu l·ª±c trong 90 ng√†y. Kh√¥ng √°p d·ª•ng v·ªõi c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i kh√°c.',
      validityDays: 90,
    },
    {
      slug: 'coffee-voucher',
      name: 'Voucher cafe 200K',
      description: 'Voucher cafe 200.000‚Ç´ t·∫°i c√°c qu√°n c√† ph√™ ƒë·ªëi t√°c. Th∆∞·ªüng th·ª©c cafe v√† b√°nh ng·ªçt.',
      category: 'VOUCHER',
      pointsCost: 800,
      cashValue: 200000,
      quantityAvailable: null,
      maxPerUser: 10,
      image: 'https://images.unsplash.com/photo-1509042239860-f550ce710b93?w=1200',
      terms: 'C√≥ hi·ªáu l·ª±c trong 90 ng√†y. √Åp d·ª•ng t·∫°i t·∫•t c·∫£ ƒë·ªëi t√°c.',
      validityDays: 90,
      metadata: {
        highlight: 'M·ªõi',
        icon: '‚òï',
      },
    },
    // DISCOUNT category
    {
      slug: 'booking-discount-10',
      name: 'Gi·∫£m gi√° 10% booking',
      description: 'Voucher gi·∫£m gi√° 10% cho ƒë∆°n booking ti·∫øp theo. T·ªëi ƒëa 2.000.000‚Ç´.',
      category: 'DISCOUNT',
      pointsCost: 3000,
      cashValue: null,
      quantityAvailable: null,
      maxPerUser: 2,
      image: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=1200',
      terms: 'C√≥ hi·ªáu l·ª±c trong 60 ng√†y. √Åp d·ª•ng cho booking t·ªëi thi·ªÉu 2 ƒë√™m. Kh√¥ng c·ªông d·ªìn v·ªõi voucher kh√°c.',
      validityDays: 60,
      requiredTier: 'GOLD',
      metadata: {
        highlight: 'ƒê·ªôc quy·ªÅn',
        icon: 'üéÅ',
      },
    },
    {
      slug: 'booking-discount-5',
      name: 'Gi·∫£m gi√° 5% booking',
      description: 'Voucher gi·∫£m gi√° 5% cho ƒë∆°n booking ti·∫øp theo. T·ªëi ƒëa 1.000.000‚Ç´.',
      category: 'DISCOUNT',
      pointsCost: 1500,
      cashValue: null,
      quantityAvailable: null,
      maxPerUser: 3,
      image: 'https://images.unsplash.com/photo-1556742502-ec7c0e9f34b1?w=1200',
      terms: 'C√≥ hi·ªáu l·ª±c trong 90 ng√†y. √Åp d·ª•ng cho booking t·ªëi thi·ªÉu 1 ƒë√™m.',
      validityDays: 90,
    },
    // CASHBACK category
    {
      slug: 'cashback-100k',
      name: 'Ho√†n ti·ªÅn 100K',
      description: 'Nh·∫≠n 100.000‚Ç´ ho√†n ti·ªÅn v√†o t√†i kho·∫£n ƒë·ªÉ s·ª≠ d·ª•ng cho booking ti·∫øp theo.',
      category: 'CASHBACK',
      pointsCost: 4000,
      cashValue: 100000,
      quantityAvailable: null,
      maxPerUser: 5,
      image: 'https://images.unsplash.com/photo-1579621970563-ebec7560ff3e?w=1200',
      terms: 'S·ªë ti·ªÅn ho√†n s·∫Ω ƒë∆∞·ª£c c·ªông v√†o t√†i kho·∫£n trong v√≤ng 3 ng√†y. C√≥ hi·ªáu l·ª±c 6 th√°ng.',
      validityDays: 180,
      requiredTier: 'PLATINUM',
      metadata: {
        highlight: 'VIP',
        icon: 'üí∞',
      },
    },
    // MERCHANDISE category
    {
      slug: 'luxestay-tote',
      name: 'T√∫i v·∫£i LuxeStay',
      description: 'T√∫i v·∫£i eco-friendly c√≥ logo LuxeStay. Thi·∫øt k·∫ø ƒë·∫πp, b·ªÅn, th√¢n thi·ªán m√¥i tr∆∞·ªùng.',
      category: 'MERCHANDISE',
      pointsCost: 500,
      cashValue: 150000,
      quantityAvailable: 200,
      maxPerUser: 2,
      image: 'https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=1200',
      terms: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn. Giao h√†ng trong 7-10 ng√†y l√†m vi·ªác.',
      metadata: {
        icon: 'üõçÔ∏è',
      },
    },
    {
      slug: 'luxestay-mug',
      name: 'C·ªëc gi·ªØ nhi·ªát LuxeStay',
      description: 'C·ªëc gi·ªØ nhi·ªát cao c·∫•p in logo LuxeStay. Gi·ªØ nhi·ªát 12 gi·ªù, dung t√≠ch 500ml.',
      category: 'MERCHANDISE',
      pointsCost: 600,
      cashValue: 180000,
      quantityAvailable: 150,
      maxPerUser: 2,
      image: 'https://images.unsplash.com/photo-1514228742587-6b1558fcca3d?w=1200',
      terms: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn. Giao h√†ng trong 7-10 ng√†y l√†m vi·ªác.',
      metadata: {
        icon: '‚òï',
      },
    },
    // OTHER category
    {
      slug: 'pet-sitting',
      name: 'D·ªãch v·ª• tr√¥ng th√∫ c∆∞ng',
      description: 'D·ªãch v·ª• tr√¥ng th√∫ c∆∞ng 1 ng√†y t·∫°i ƒë·ªëi t√°c uy t√≠n khi b·∫°n ƒëi du l·ªãch.',
      category: 'OTHER',
      pointsCost: 2800,
      cashValue: 700000,
      quantityAvailable: null,
      maxPerUser: 2,
      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?w=1200',
      terms: 'ƒê·∫∑t tr∆∞·ªõc 7 ng√†y. Bao g·ªìm ch·ªó ·ªü, th·ª©c ƒÉn v√† chƒÉm s√≥c c∆° b·∫£n.',
      validityDays: 90,
    },
    {
      slug: 'laundry-service',
      name: 'D·ªãch v·ª• gi·∫∑t l√†',
      description: 'D·ªãch v·ª• gi·∫∑t l√† cho 5kg qu·∫ßn √°o t·∫°i homestay ho·∫∑c ƒë·ªëi t√°c g·∫ßn nh·∫•t.',
      category: 'OTHER',
      pointsCost: 1200,
      cashValue: 300000,
      quantityAvailable: null,
      maxPerUser: 5,
      image: 'https://images.unsplash.com/photo-1582735689369-4fe89db7114c?w=1200',
      terms: 'ƒê·∫∑t tr∆∞·ªõc 24 gi·ªù. Bao g·ªìm gi·∫∑t, s·∫•y v√† g·∫•p.',
      validityDays: 60,
    },
  ]

  // Get badges and promotions for linking
  const bronzeBadge = badgeMap.get('bronze-explorer')
  const goldBadge = badgeMap.get('gold-ambassador')
  
  const catalogItems = await Promise.all(
    catalogConfigs.map(async (reward) => {
      let badgeId = null
      if (reward.badgeSlug) {
        const badge = badgeMap.get(reward.badgeSlug)
        badgeId = badge?.id ?? null
      }

      let promotionId = null
      if (reward.promotionCode) {
        const promotion = await prisma.promotion.findUnique({
          where: { code: reward.promotionCode },
        })
        promotionId = promotion?.id ?? null
      }

      const metadata: any = {
        validityDays: reward.validityDays,
        requiredTier: reward.requiredTier,
        ...reward.metadata,
      }

      return prismaAny.rewardCatalogItem.upsert({
        where: { slug: reward.slug },
        update: {
          name: reward.name,
          description: reward.description,
          category: reward.category,
          pointsCost: reward.pointsCost,
          cashValue: reward.cashValue ?? null,
          quantityAvailable: reward.quantityAvailable ?? null,
          maxPerUser: reward.maxPerUser ?? null,
          image: reward.image ?? null,
          terms: reward.terms ?? null,
          badgeId: badgeId,
          promotionId: promotionId,
          startAt: reward.startAt ?? null,
          endAt: reward.endAt ?? null,
          isActive: true,
          metadata: metadata as Prisma.JsonObject,
        },
        create: {
          slug: reward.slug,
          name: reward.name,
          description: reward.description,
          category: reward.category,
          pointsCost: reward.pointsCost,
          cashValue: reward.cashValue ?? null,
          quantityAvailable: reward.quantityAvailable ?? null,
          maxPerUser: reward.maxPerUser ?? null,
          image: reward.image ?? null,
          terms: reward.terms ?? null,
          badgeId: badgeId,
          promotionId: promotionId,
          startAt: reward.startAt ?? null,
          endAt: reward.endAt ?? null,
          isActive: true,
          metadata: metadata as Prisma.JsonObject,
        },
      })
      })
  )

  console.log(`‚úÖ Catalog items created (${catalogItems.length} items)`)

  console.log('ü™ô Creating sample reward histories...')

  const bookingAction = actionMap.get('booking-completed')
  const reviewAction = actionMap.get('review-submitted')

  if (bookingAction && reviewAction) {
  await prismaAny.rewardTransaction.deleteMany({
      where: {
        userId: { in: [guest1.id, guest2.id] },
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest1.id,
        actionId: bookingAction.id,
        transactionType: 'CREDIT',
        source: 'BOOKING',
        points: 1200,
        balanceAfter: 1200,
        description: 'ƒêi·ªÉm th∆∞·ªüng cho booking ƒë·∫ßu ti√™n.',
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest1.id,
        actionId: reviewAction.id,
        transactionType: 'CREDIT',
        source: 'REVIEW',
        points: 300,
        balanceAfter: 1500,
        description: 'ƒêi·ªÉm th∆∞·ªüng khi g·ª≠i ƒë√°nh gi√°.',
      },
    })

    await prisma.user.update({
      where: { id: guest1.id },
      data: {
        loyaltyPoints: 1500,
        loyaltyTier: 'SILVER',
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest2.id,
        actionId: bookingAction.id,
        transactionType: 'CREDIT',
        source: 'BOOKING',
        points: 1600,
        balanceAfter: 1600,
        description: 'ƒêi·ªÉm th∆∞·ªüng cho k·ª≥ ngh·ªâ d√†i ng√†y.',
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest2.id,
        actionId: bookingAction.id,
        transactionType: 'CREDIT',
        source: 'BOOKING',
        points: 1800,
        balanceAfter: 3400,
        description: 'ƒêi·ªÉm th∆∞·ªüng cho booking villa cao c·∫•p.',
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest2.id,
        actionId: reviewAction.id,
        transactionType: 'CREDIT',
        source: 'REVIEW',
        points: 400,
        balanceAfter: 3800,
        description: 'ƒêi·ªÉm th∆∞·ªüng cho b√†i review chi ti·∫øt.',
      },
    })

    await prisma.user.update({
      where: { id: guest2.id },
      data: {
        loyaltyPoints: 3800,
        loyaltyTier: 'GOLD',
      },
    })

    const silverBadge = badgeMap.get('silver-jetsetter')
    const goldBadge = badgeMap.get('gold-ambassador')

    if (silverBadge) {
  await prismaAny.userBadge.upsert({
        where: {
          userId_badgeId: {
            userId: guest1.id,
            badgeId: silverBadge.id,
          },
        },
        update: {},
        create: {
          userId: guest1.id,
          badgeId: silverBadge.id,
          source: 'QUEST',
        },
      })
    }

    if (goldBadge) {
  await prismaAny.userBadge.upsert({
        where: {
          userId_badgeId: {
            userId: guest2.id,
            badgeId: goldBadge.id,
          },
        },
        update: {},
        create: {
          userId: guest2.id,
          badgeId: goldBadge.id,
          source: 'BOOKING',
        },
      })
    }
  }

  console.log('‚úÖ Rewards program configured')

  // Create Listings
  console.log('üè† Creating listings...')

  const listing1 = await prisma.listing.upsert({
    where: { slug: 'villa-sang-trong-view-bien-nha-trang' },
    update: {
      hostId: host1.id,
      title: 'Villa Sang Tr·ªçng View Bi·ªÉn Nha Trang',
      description:
        'Villa 4 ph√≤ng ng·ªß tuy·ªát ƒë·∫πp v·ªõi view bi·ªÉn to√†n c·∫£nh Nha Trang. Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, ƒë·∫ßy ƒë·ªß ti·ªán nghi cao c·∫•p. H·ªì b∆°i ri√™ng, BBQ ngo√†i tr·ªùi. C√°ch b√£i bi·ªÉn ch·ªâ 2 ph√∫t ƒëi b·ªô.',
      propertyType: 'VILLA',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 10,
      bedrooms: 4,
      beds: 5,
      bathrooms: 3.5,
      country: 'Vi·ªát Nam',
      city: 'Nha Trang',
      state: 'Kh√°nh H√≤a',
      address: '123 Tr·∫ßn Ph√∫, L·ªôc Th·ªç',
      zipCode: '650000',
      latitude: 12.2388,
      longitude: 109.1967,
      neighborhood: 'B√£i bi·ªÉn Tr·∫ßn Ph√∫',
      basePrice: 3500000,
      cleaningFee: 500000,
      serviceFee: 350000,
      weeklyDiscount: 10,
      monthlyDiscount: 20,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1582268611958-ebfd161ef9cf?w=1200',
        'https://images.unsplash.com/photo-1613490493576-7fde63acd811?w=1200',
        'https://images.unsplash.com/photo-1615873968403-89e068629265?w=1200',
        'https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?w=1200',
        'https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 2,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: true,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'VillaNhaTrang_5G',
      wifiPassword: 'welcome2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.9,
      totalReviews: 127,
      totalBookings: 89,
      occupancyRate: 85,
    },
    create: {
      hostId: host1.id,
      title: 'Villa Sang Tr·ªçng View Bi·ªÉn Nha Trang',
      slug: 'villa-sang-trong-view-bien-nha-trang',
      description:
        'Villa 4 ph√≤ng ng·ªß tuy·ªát ƒë·∫πp v·ªõi view bi·ªÉn to√†n c·∫£nh Nha Trang. Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, ƒë·∫ßy ƒë·ªß ti·ªán nghi cao c·∫•p. H·ªì b∆°i ri√™ng, BBQ ngo√†i tr·ªùi. C√°ch b√£i bi·ªÉn ch·ªâ 2 ph√∫t ƒëi b·ªô.',
      propertyType: 'VILLA',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 10,
      bedrooms: 4,
      beds: 5,
      bathrooms: 3.5,
      country: 'Vi·ªát Nam',
      city: 'Nha Trang',
      state: 'Kh√°nh H√≤a',
      address: '123 Tr·∫ßn Ph√∫, L·ªôc Th·ªç',
      zipCode: '650000',
      latitude: 12.2388,
      longitude: 109.1967,
      neighborhood: 'B√£i bi·ªÉn Tr·∫ßn Ph√∫',
      basePrice: 3500000,
      cleaningFee: 500000,
      serviceFee: 350000,
      weeklyDiscount: 10,
      monthlyDiscount: 20,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1582268611958-ebfd161ef9cf?w=1200',
        'https://images.unsplash.com/photo-1613490493576-7fde63acd811?w=1200',
        'https://images.unsplash.com/photo-1615873968403-89e068629265?w=1200',
        'https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?w=1200',
        'https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 2,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: true,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'VillaNhaTrang_5G',
      wifiPassword: 'welcome2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.9,
      totalReviews: 127,
      totalBookings: 89,
      occupancyRate: 85,
      publishedAt: new Date(),
    },
  })

  const listing2 = await prisma.listing.upsert({
    where: { slug: 'biet-thu-da-lat-view-doi-thong' },
    update: {
      hostId: host1.id,
      title: 'Bi·ªát Th·ª± ƒê√† L·∫°t View ƒê·ªìi Th√¥ng',
      description:
        'Bi·ªát th·ª± phong c√°ch ch√¢u √Çu gi·ªØa l√≤ng ƒê√† L·∫°t. 3 ph√≤ng ng·ªß r·ªông r√£i, l√≤ s∆∞·ªüi, b·∫øp ƒë·∫ßy ƒë·ªß. Khu v∆∞·ªùn hoa ƒë·∫πp, view ƒë·ªìi th√¥ng th∆° m·ªông. G·∫ßn ch·ª£ ƒê√† L·∫°t 5 ph√∫t l√°i xe.',
      propertyType: 'VILLA',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 8,
      bedrooms: 3,
      beds: 4,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'ƒê√† L·∫°t',
      state: 'L√¢m ƒê·ªìng',
      address: '45 ƒê∆∞·ªùng Tr·∫ßn H∆∞ng ƒê·∫°o',
      zipCode: '670000',
      latitude: 11.9404,
      longitude: 108.4583,
      neighborhood: 'Trung t√¢m ƒê√† L·∫°t',
      basePrice: 2800000,
      cleaningFee: 400000,
      serviceFee: 280000,
      weeklyDiscount: 15,
      monthlyDiscount: 25,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1600585154340-be6161a56a0c?w=1200',
        'https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?w=1200',
        'https://images.unsplash.com/photo-1600566753086-00f18fb6b3ea?w=1200',
        'https://images.unsplash.com/photo-1600573472550-8090b5e0745e?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 14,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: true,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'DaLatVilla',
      wifiPassword: 'dalat123',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.8,
      totalReviews: 95,
      totalBookings: 76,
      occupancyRate: 78,
    },
    create: {
      hostId: host1.id,
      title: 'Bi·ªát Th·ª± ƒê√† L·∫°t View ƒê·ªìi Th√¥ng',
      slug: 'biet-thu-da-lat-view-doi-thong',
      description:
        'Bi·ªát th·ª± phong c√°ch ch√¢u √Çu gi·ªØa l√≤ng ƒê√† L·∫°t. 3 ph√≤ng ng·ªß r·ªông r√£i, l√≤ s∆∞·ªüi, b·∫øp ƒë·∫ßy ƒë·ªß. Khu v∆∞·ªùn hoa ƒë·∫πp, view ƒë·ªìi th√¥ng th∆° m·ªông. G·∫ßn ch·ª£ ƒê√† L·∫°t 5 ph√∫t l√°i xe.',
      propertyType: 'VILLA',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 8,
      bedrooms: 3,
      beds: 4,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'ƒê√† L·∫°t',
      state: 'L√¢m ƒê·ªìng',
      address: '45 ƒê∆∞·ªùng Tr·∫ßn H∆∞ng ƒê·∫°o',
      zipCode: '670000',
      latitude: 11.9404,
      longitude: 108.4583,
      neighborhood: 'Trung t√¢m ƒê√† L·∫°t',
      basePrice: 2800000,
      cleaningFee: 400000,
      serviceFee: 280000,
      weeklyDiscount: 15,
      monthlyDiscount: 25,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1600585154340-be6161a56a0c?w=1200',
        'https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?w=1200',
        'https://images.unsplash.com/photo-1600566753086-00f18fb6b3ea?w=1200',
        'https://images.unsplash.com/photo-1600573472550-8090b5e0745e?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 14,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: true,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'DaLatVilla',
      wifiPassword: 'dalat123',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.8,
      totalReviews: 95,
      totalBookings: 76,
      occupancyRate: 78,
      publishedAt: new Date(),
    },
  })

  const listing3 = await prisma.listing.upsert({
    where: { slug: 'resort-phu-quoc-bai-sao-villa-bien' },
    update: {
      hostId: host2.id,
      title: 'Resort Ph√∫ Qu·ªëc B√£i Sao - Villa Bi·ªÉn',
      description:
        'Villa 5 sao ngay b√£i Sao Ph√∫ Qu·ªëc. 5 ph√≤ng ng·ªß sang tr·ªçng, h·ªì b∆°i v√¥ c·ª±c, b·∫øp hi·ªán ƒë·∫°i. D·ªãch v·ª• butler 24/7. T·∫ßm nh√¨n bi·ªÉn tuy·ªát ƒë·∫πp, ri√™ng t∆∞ tuy·ªát ƒë·ªëi.',
      propertyType: 'VILLA',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 12,
      bedrooms: 5,
      beds: 6,
      bathrooms: 4,
      country: 'Vi·ªát Nam',
      city: 'Ph√∫ Qu·ªëc',
      state: 'Ki√™n Giang',
      address: 'B√£i Sao, An Th·ªõi',
      zipCode: '920000',
      latitude: 10.1699,
      longitude: 103.9676,
      neighborhood: 'B√£i Sao',
      basePrice: 8500000,
      cleaningFee: 1000000,
      serviceFee: 850000,
      weeklyDiscount: 10,
      monthlyDiscount: 20,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1571003123894-1f0594d2b5d9?w=1200',
        'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=1200',
        'https://images.unsplash.com/photo-1571896349842-33c89424de2d?w=1200',
        'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=1200',
        'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=1200',
      ],
      amenities: [],
      checkInTime: '15:00',
      checkOutTime: '12:00',
      minNights: 3,
      maxNights: 30,
      instantBookable: false,
      cancellationPolicy: 'STRICT',
      allowPets: false,
      allowSmoking: false,
      allowEvents: true,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'PhuQuocResort_VIP',
      wifiPassword: 'resort2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 5.0,
      totalReviews: 68,
      totalBookings: 45,
      occupancyRate: 92,
    },
    create: {
      hostId: host2.id,
      title: 'Resort Ph√∫ Qu·ªëc B√£i Sao - Villa Bi·ªÉn',
      slug: 'resort-phu-quoc-bai-sao-villa-bien',
      description:
        'Villa 5 sao ngay b√£i Sao Ph√∫ Qu·ªëc. 5 ph√≤ng ng·ªß sang tr·ªçng, h·ªì b∆°i v√¥ c·ª±c, b·∫øp hi·ªán ƒë·∫°i. D·ªãch v·ª• butler 24/7. T·∫ßm nh√¨n bi·ªÉn tuy·ªát ƒë·∫πp, ri√™ng t∆∞ tuy·ªát ƒë·ªëi.',
      propertyType: 'VILLA',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 12,
      bedrooms: 5,
      beds: 6,
      bathrooms: 4,
      country: 'Vi·ªát Nam',
      city: 'Ph√∫ Qu·ªëc',
      state: 'Ki√™n Giang',
      address: 'B√£i Sao, An Th·ªõi',
      zipCode: '920000',
      latitude: 10.1699,
      longitude: 103.9676,
      neighborhood: 'B√£i Sao',
      basePrice: 8500000,
      cleaningFee: 1000000,
      serviceFee: 850000,
      weeklyDiscount: 10,
      monthlyDiscount: 20,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1571003123894-1f0594d2b5d9?w=1200',
        'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=1200',
        'https://images.unsplash.com/photo-1571896349842-33c89424de2d?w=1200',
        'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=1200',
        'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=1200',
      ],
      amenities: [],
      checkInTime: '15:00',
      checkOutTime: '12:00',
      minNights: 3,
      maxNights: 30,
      instantBookable: false,
      cancellationPolicy: 'STRICT',
      allowPets: false,
      allowSmoking: false,
      allowEvents: true,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'PhuQuocResort_VIP',
      wifiPassword: 'resort2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 5.0,
      totalReviews: 68,
      totalBookings: 45,
      occupancyRate: 92,
      publishedAt: new Date(),
    },
  })

  const listing4 = await prisma.listing.upsert({
    where: { slug: 'penthouse-saigon-landmark-81' },
    update: {
      hostId: host2.id,
      title: 'Penthouse Saigon Landmark 81',
      description:
        'Penthouse cao c·∫•p t·∫ßng 68 Landmark 81. 3 ph√≤ng ng·ªß, thi·∫øt k·∫ø sang tr·ªçng. View to√†n c·∫£nh S√†i G√≤n 360 ƒë·ªô. H·ªì b∆°i ri√™ng, ph√≤ng gym, r·∫°p phim mini.',
      propertyType: 'APARTMENT',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 6,
      bedrooms: 3,
      beds: 3,
      bathrooms: 3,
      country: 'Vi·ªát Nam',
      city: 'H·ªì Ch√≠ Minh',
      state: 'H·ªì Ch√≠ Minh',
      address: 'Landmark 81, 720A ƒêi·ªán Bi√™n Ph·ªß, B√¨nh Th·∫°nh',
      zipCode: '700000',
      latitude: 10.7946,
      longitude: 106.7218,
      neighborhood: 'Vinhomes Central Park',
      basePrice: 5500000,
      cleaningFee: 600000,
      serviceFee: 550000,
      weeklyDiscount: 10,
      monthlyDiscount: 15,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=1200',
        'https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=1200',
        'https://images.unsplash.com/photo-1493809842364-78817add7ffb?w=1200',
        'https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 1,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'Landmark81_Premium',
      wifiPassword: 'saigon2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.7,
      totalReviews: 82,
      totalBookings: 134,
      occupancyRate: 88,
    },
    create: {
      hostId: host2.id,
      title: 'Penthouse Saigon Landmark 81',
      slug: 'penthouse-saigon-landmark-81',
      description:
        'Penthouse cao c·∫•p t·∫ßng 68 Landmark 81. 3 ph√≤ng ng·ªß, thi·∫øt k·∫ø sang tr·ªçng. View to√†n c·∫£nh S√†i G√≤n 360 ƒë·ªô. H·ªì b∆°i ri√™ng, ph√≤ng gym, r·∫°p phim mini.',
      propertyType: 'APARTMENT',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 6,
      bedrooms: 3,
      beds: 3,
      bathrooms: 3,
      country: 'Vi·ªát Nam',
      city: 'H·ªì Ch√≠ Minh',
      state: 'H·ªì Ch√≠ Minh',
      address: 'Landmark 81, 720A ƒêi·ªán Bi√™n Ph·ªß, B√¨nh Th·∫°nh',
      zipCode: '700000',
      latitude: 10.7946,
      longitude: 106.7218,
      neighborhood: 'Vinhomes Central Park',
      basePrice: 5500000,
      cleaningFee: 600000,
      serviceFee: 550000,
      weeklyDiscount: 10,
      monthlyDiscount: 15,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=1200',
        'https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=1200',
        'https://images.unsplash.com/photo-1493809842364-78817add7ffb?w=1200',
        'https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 1,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'Landmark81_Premium',
      wifiPassword: 'saigon2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.7,
      totalReviews: 82,
      totalBookings: 134,
      occupancyRate: 88,
      publishedAt: new Date(),
    },
  })

  const listing5 = await prisma.listing.upsert({
    where: { slug: 'homestay-hoi-an-pho-co-nha-co-truyen' },
    update: {
      hostId: host1.id,
      title: 'Homestay H·ªôi An Ph·ªë C·ªï - Nh√† C·ªï Truy·ªÅn',
      description:
        'Nh√† c·ªï truy·ªÅn th·ªëng H·ªôi An ƒë∆∞·ª£c tr√πng tu. 2 ph√≤ng ng·ªß, s√¢n v∆∞·ªùn nh·ªè, gi·∫øng tr·ªùi. C√°ch ph·ªë c·ªï 3 ph√∫t ƒëi b·ªô. Tr·∫£i nghi·ªám vƒÉn h√≥a Vi·ªát Nam ƒë√≠ch th·ª±c.',
      propertyType: 'HOUSE',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 4,
      bedrooms: 2,
      beds: 2,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'H·ªôi An',
      state: 'Qu·∫£ng Nam',
      address: '89 Tr·∫ßn Ph√∫, Minh An',
      zipCode: '560000',
      latitude: 15.8801,
      longitude: 108.3380,
      neighborhood: 'Ph·ªë c·ªï H·ªôi An',
      basePrice: 1200000,
      cleaningFee: 200000,
      serviceFee: 120000,
      weeklyDiscount: 15,
      monthlyDiscount: 25,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=1200',
        'https://images.unsplash.com/photo-1600585154526-990dced4db0d?w=1200',
        'https://images.unsplash.com/photo-1600566753190-17f0baa2a6c3?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 14,
      instantBookable: true,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'HoiAn_Homestay',
      wifiPassword: 'hoian123',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.9,
      totalReviews: 156,
      totalBookings: 201,
      occupancyRate: 90,
    },
    create: {
      hostId: host1.id,
      title: 'Homestay H·ªôi An Ph·ªë C·ªï - Nh√† C·ªï Truy·ªÅn',
      slug: 'homestay-hoi-an-pho-co-nha-co-truyen',
      description:
        'Nh√† c·ªï truy·ªÅn th·ªëng H·ªôi An ƒë∆∞·ª£c tr√πng tu. 2 ph√≤ng ng·ªß, s√¢n v∆∞·ªùn nh·ªè, gi·∫øng tr·ªùi. C√°ch ph·ªë c·ªï 3 ph√∫t ƒëi b·ªô. Tr·∫£i nghi·ªám vƒÉn h√≥a Vi·ªát Nam ƒë√≠ch th·ª±c.',
      propertyType: 'HOUSE',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 4,
      bedrooms: 2,
      beds: 2,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'H·ªôi An',
      state: 'Qu·∫£ng Nam',
      address: '89 Tr·∫ßn Ph√∫, Minh An',
      zipCode: '560000',
      latitude: 15.8801,
      longitude: 108.3380,
      neighborhood: 'Ph·ªë c·ªï H·ªôi An',
      basePrice: 1200000,
      cleaningFee: 200000,
      serviceFee: 120000,
      weeklyDiscount: 15,
      monthlyDiscount: 25,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=1200',
        'https://images.unsplash.com/photo-1600585154526-990dced4db0d?w=1200',
        'https://images.unsplash.com/photo-1600566753190-17f0baa2a6c3?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 14,
      instantBookable: true,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'HoiAn_Homestay',
      wifiPassword: 'hoian123',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.9,
      totalReviews: 156,
      totalBookings: 201,
      occupancyRate: 90,
      publishedAt: new Date(),
    },
  })

  const listing6 = await prisma.listing.upsert({
    where: { slug: 'can-ho-studio-view-ho-tay-ha-noi' },
    update: {
      hostId: host1.id,
      title: 'CƒÉn H·ªô Studio View H·ªì T√¢y H√† N·ªôi',
      description:
        'Studio hi·ªán ƒë·∫°i view H·ªì T√¢y tuy·ªát ƒë·∫πp. ƒê·∫ßy ƒë·ªß ti·ªán nghi, g·∫ßn Ph·ªë C·ªï. Th√≠ch h·ª£p cho c·∫∑p ƒë√¥i ho·∫∑c 1-2 ng∆∞·ªùi. Ban c√¥ng ri√™ng ng·∫Øm ho√†ng h√¥n.',
      propertyType: 'APARTMENT',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 2,
      bedrooms: 1,
      beds: 1,
      bathrooms: 1,
      country: 'Vi·ªát Nam',
      city: 'H√† N·ªôi',
      state: 'H√† N·ªôi',
      address: '98 Y√™n Ph·ª•, T√¢y H·ªì',
      zipCode: '100000',
      latitude: 21.0545,
      longitude: 105.8212,
      neighborhood: 'H·ªì T√¢y',
      basePrice: 800000,
      cleaningFee: 150000,
      serviceFee: 80000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1522708323590-d24dbb6b0267?w=1200',
        'https://images.unsplash.com/photo-1536376072261-38c75010e6c9?w=1200',
        'https://images.unsplash.com/photo-1484101403633-562f891dc89a?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 1,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'HanoiStudio_5G',
      wifiPassword: 'hanoi2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.6,
      totalReviews: 42,
      totalBookings: 67,
      occupancyRate: 75,
    },
    create: {
      hostId: host1.id,
      title: 'CƒÉn H·ªô Studio View H·ªì T√¢y H√† N·ªôi',
      slug: 'can-ho-studio-view-ho-tay-ha-noi',
      description:
        'Studio hi·ªán ƒë·∫°i view H·ªì T√¢y tuy·ªát ƒë·∫πp. ƒê·∫ßy ƒë·ªß ti·ªán nghi, g·∫ßn Ph·ªë C·ªï. Th√≠ch h·ª£p cho c·∫∑p ƒë√¥i ho·∫∑c 1-2 ng∆∞·ªùi. Ban c√¥ng ri√™ng ng·∫Øm ho√†ng h√¥n.',
      propertyType: 'APARTMENT',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 2,
      bedrooms: 1,
      beds: 1,
      bathrooms: 1,
      country: 'Vi·ªát Nam',
      city: 'H√† N·ªôi',
      state: 'H√† N·ªôi',
      address: '98 Y√™n Ph·ª•, T√¢y H·ªì',
      zipCode: '100000',
      latitude: 21.0545,
      longitude: 105.8212,
      neighborhood: 'H·ªì T√¢y',
      basePrice: 800000,
      cleaningFee: 150000,
      serviceFee: 80000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1522708323590-d24dbb6b0267?w=1200',
        'https://images.unsplash.com/photo-1536376072261-38c75010e6c9?w=1200',
        'https://images.unsplash.com/photo-1484101403633-562f891dc89a?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 1,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'HanoiStudio_5G',
      wifiPassword: 'hanoi2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.6,
      totalReviews: 42,
      totalBookings: 67,
      occupancyRate: 75,
      publishedAt: new Date(),
    },
  })

  const listing7 = await prisma.listing.upsert({
    where: { slug: 'bungalow-mui-ne-view-bien-truc-dien' },
    update: {
      hostId: host2.id,
      title: 'Bungalow M≈©i N√© View Bi·ªÉn Tr·ª±c Di·ªán',
      description:
        'Bungalow g·ªó tr√™n b√£i bi·ªÉn M≈©i N√©. B∆∞·ªõc ch√¢n ra l√† bi·ªÉn, view b√¨nh minh tuy·ªát ƒë·∫πp. BBQ ri√™ng, kayak mi·ªÖn ph√≠. Tr·∫£i nghi·ªám resort gi√° h·ª£p l√Ω.',
      propertyType: 'BUNGALOW',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 4,
      bedrooms: 2,
      beds: 2,
      bathrooms: 1,
      country: 'Vi·ªát Nam',
      city: 'Phan Thi·∫øt',
      state: 'B√¨nh Thu·∫≠n',
      address: 'Nguy·ªÖn ƒê√¨nh Chi·ªÉu, M≈©i N√©',
      zipCode: '800000',
      latitude: 10.9333,
      longitude: 108.2833,
      neighborhood: 'B√£i bi·ªÉn M≈©i N√©',
      basePrice: 1500000,
      cleaningFee: 250000,
      serviceFee: 150000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1571896349842-33c89424de2d?w=1200',
        'https://images.unsplash.com/photo-1571003123894-1f0594d2b5d9?w=1200',
        'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 2,
      maxNights: 14,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'MuiNe_Beach',
      wifiPassword: 'muine123',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.7,
      totalReviews: 58,
      totalBookings: 89,
      occupancyRate: 82,
    },
    create: {
      hostId: host2.id,
      title: 'Bungalow M≈©i N√© View Bi·ªÉn Tr·ª±c Di·ªán',
      slug: 'bungalow-mui-ne-view-bien-truc-dien',
      description:
        'Bungalow g·ªó tr√™n b√£i bi·ªÉn M≈©i N√©. B∆∞·ªõc ch√¢n ra l√† bi·ªÉn, view b√¨nh minh tuy·ªát ƒë·∫πp. BBQ ri√™ng, kayak mi·ªÖn ph√≠. Tr·∫£i nghi·ªám resort gi√° h·ª£p l√Ω.',
      propertyType: 'BUNGALOW',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 4,
      bedrooms: 2,
      beds: 2,
      bathrooms: 1,
      country: 'Vi·ªát Nam',
      city: 'Phan Thi·∫øt',
      state: 'B√¨nh Thu·∫≠n',
      address: 'Nguy·ªÖn ƒê√¨nh Chi·ªÉu, M≈©i N√©',
      zipCode: '800000',
      latitude: 10.9333,
      longitude: 108.2833,
      neighborhood: 'B√£i bi·ªÉn M≈©i N√©',
      basePrice: 1500000,
      cleaningFee: 250000,
      serviceFee: 150000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1571896349842-33c89424de2d?w=1200',
        'https://images.unsplash.com/photo-1571003123894-1f0594d2b5d9?w=1200',
        'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 2,
      maxNights: 14,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'MuiNe_Beach',
      wifiPassword: 'muine123',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.7,
      totalReviews: 58,
      totalBookings: 89,
      occupancyRate: 82,
      publishedAt: new Date(),
    },
  })

  const listing8 = await prisma.listing.upsert({
    where: { slug: 'nha-vuon-can-tho-trai-nghiem-mien-tay' },
    update: {
      hostId: host1.id,
      title: 'Nh√† V∆∞·ªùn C·∫ßn Th∆° - Tr·∫£i Nghi·ªám Mi·ªÅn T√¢y',
      description:
        'Nh√† v∆∞·ªùn r·ªông 500m2 ven s√¥ng H·∫≠u. V∆∞·ªùn tr√°i c√¢y, ao c√°, b·∫øp ngo√†i tr·ªùi. Tr·∫£i nghi·ªám vƒÉn h√≥a mi·ªÅn T√¢y ƒë√≠ch th·ª±c. Ch·ªß nh√† nhi·ªát t√¨nh h∆∞·ªõng d·∫´n n·∫•u ƒÉn.',
      propertyType: 'FARM_STAY',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 6,
      bedrooms: 3,
      beds: 3,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'C·∫ßn Th∆°',
      state: 'C·∫ßn Th∆°',
      address: 'ƒê∆∞·ªùng Tr·∫ßn VƒÉn Kh√©o, C√°i RƒÉng',
      zipCode: '900000',
      latitude: 10.0341,
      longitude: 105.7722,
      neighborhood: 'Ven s√¥ng H·∫≠u',
      basePrice: 1800000,
      cleaningFee: 300000,
      serviceFee: 180000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1568605114967-8130f3a36994?w=1200',
        'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=1200',
        'https://images.unsplash.com/photo-1600585154340-be6161a56a0c?w=1200',
      ],
      amenities: [],
      checkInTime: '13:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 7,
      instantBookable: false,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: true,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'CanTho_Garden',
      wifiPassword: 'cantho2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.9,
      totalReviews: 73,
      totalBookings: 95,
      occupancyRate: 88,
    },
    create: {
      hostId: host1.id,
      title: 'Nh√† V∆∞·ªùn C·∫ßn Th∆° - Tr·∫£i Nghi·ªám Mi·ªÅn T√¢y',
      slug: 'nha-vuon-can-tho-trai-nghiem-mien-tay',
      description:
        'Nh√† v∆∞·ªùn r·ªông 500m2 ven s√¥ng H·∫≠u. V∆∞·ªùn tr√°i c√¢y, ao c√°, b·∫øp ngo√†i tr·ªùi. Tr·∫£i nghi·ªám vƒÉn h√≥a mi·ªÅn T√¢y ƒë√≠ch th·ª±c. Ch·ªß nh√† nhi·ªát t√¨nh h∆∞·ªõng d·∫´n n·∫•u ƒÉn.',
      propertyType: 'FARM_STAY',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 6,
      bedrooms: 3,
      beds: 3,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'C·∫ßn Th∆°',
      state: 'C·∫ßn Th∆°',
      address: 'ƒê∆∞·ªùng Tr·∫ßn VƒÉn Kh√©o, C√°i RƒÉng',
      zipCode: '900000',
      latitude: 10.0341,
      longitude: 105.7722,
      neighborhood: 'Ven s√¥ng H·∫≠u',
      basePrice: 1800000,
      cleaningFee: 300000,
      serviceFee: 180000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1568605114967-8130f3a36994?w=1200',
        'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=1200',
        'https://images.unsplash.com/photo-1600585154340-be6161a56a0c?w=1200',
      ],
      amenities: [],
      checkInTime: '13:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 7,
      instantBookable: false,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: true,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'CanTho_Garden',
      wifiPassword: 'cantho2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.9,
      totalReviews: 73,
      totalBookings: 95,
      occupancyRate: 88,
      publishedAt: new Date(),
    },
  })

  const listing9 = await prisma.listing.upsert({
    where: { slug: 'condo-vung-tau-front-beach-tang-cao' },
    update: {
      hostId: host2.id,
      title: 'Condo V≈©ng T√†u Front Beach - T·∫ßng Cao',
      description:
        'Condo 2 ph√≤ng ng·ªß t·∫ßng 25 view bi·ªÉn panorama. H·ªì b∆°i rooftop, gym, sauna. G·∫ßn b√£i sau 2 ph√∫t ƒëi b·ªô. ƒê·∫ßy ƒë·ªß ti·ªán nghi nh∆∞ kh√°ch s·∫°n 5 sao.',
      propertyType: 'CONDO',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 5,
      bedrooms: 2,
      beds: 3,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'V≈©ng T√†u',
      state: 'B√† R·ªãa - V≈©ng T√†u',
      address: 'Thi S√°ch, Th·∫Øng Tam',
      zipCode: '790000',
      latitude: 10.3458,
      longitude: 107.0843,
      neighborhood: 'B√£i sau',
      basePrice: 2200000,
      cleaningFee: 350000,
      serviceFee: 220000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?w=1200',
        'https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=1200',
        'https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'VungTau_Condo',
      wifiPassword: 'vungtau24',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.8,
      totalReviews: 91,
      totalBookings: 145,
      occupancyRate: 87,
    },
    create: {
      hostId: host2.id,
      title: 'Condo V≈©ng T√†u Front Beach - T·∫ßng Cao',
      slug: 'condo-vung-tau-front-beach-tang-cao',
      description:
        'Condo 2 ph√≤ng ng·ªß t·∫ßng 25 view bi·ªÉn panorama. H·ªì b∆°i rooftop, gym, sauna. G·∫ßn b√£i sau 2 ph√∫t ƒëi b·ªô. ƒê·∫ßy ƒë·ªß ti·ªán nghi nh∆∞ kh√°ch s·∫°n 5 sao.',
      propertyType: 'CONDO',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 5,
      bedrooms: 2,
      beds: 3,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'V≈©ng T√†u',
      state: 'B√† R·ªãa - V≈©ng T√†u',
      address: 'Thi S√°ch, Th·∫Øng Tam',
      zipCode: '790000',
      latitude: 10.3458,
      longitude: 107.0843,
      neighborhood: 'B√£i sau',
      basePrice: 2200000,
      cleaningFee: 350000,
      serviceFee: 220000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?w=1200',
        'https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=1200',
        'https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'VungTau_Condo',
      wifiPassword: 'vungtau24',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.8,
      totalReviews: 91,
      totalBookings: 145,
      occupancyRate: 87,
      publishedAt: new Date(),
    },
  })

  const listing10 = await prisma.listing.upsert({
    where: { slug: 'cabin-sapa-view-ruong-bac-thang' },
    update: {
      hostId: host1.id,
      title: 'Cabin Sapa View Ru·ªông B·∫≠c Thang',
      description:
        'Cabin g·ªó ·∫•m √°p gi·ªØa n√∫i r·ª´ng Sapa. View ru·ªông b·∫≠c thang tuy·ªát ƒë·∫πp. L√≤ s∆∞·ªüi, b·∫øp ƒë·∫ßy ƒë·ªß. Tr·∫£i nghi·ªám s·ªëng ch·∫≠m gi·ªØa thi√™n nhi√™n. Trekking, visit b·∫£n l√†ng.',
      propertyType: 'CABIN',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 4,
      bedrooms: 2,
      beds: 2,
      bathrooms: 1,
      country: 'Vi·ªát Nam',
      city: 'Sa Pa',
      state: 'L√†o Cai',
      address: 'Th√¥n T·∫£ Van, X√£ H·∫ßu Th√†o',
      zipCode: '330000',
      latitude: 22.3364,
      longitude: 103.8438,
      neighborhood: 'V√πng cao Sapa',
      basePrice: 1000000,
      cleaningFee: 200000,
      serviceFee: 100000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1587061949409-02df41d5e562?w=1200',
        'https://images.unsplash.com/photo-1542718610-a1d656d1884c?w=1200',
        'https://images.unsplash.com/photo-1499696010180-025ef6e1a8f9?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 2,
      maxNights: 7,
      instantBookable: false,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'Sapa_Cabin',
      wifiPassword: 'sapa1234',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.9,
      totalReviews: 112,
      totalBookings: 156,
      occupancyRate: 91,
    },
    create: {
      hostId: host1.id,
      title: 'Cabin Sapa View Ru·ªông B·∫≠c Thang',
      slug: 'cabin-sapa-view-ruong-bac-thang',
      description:
        'Cabin g·ªó ·∫•m √°p gi·ªØa n√∫i r·ª´ng Sapa. View ru·ªông b·∫≠c thang tuy·ªát ƒë·∫πp. L√≤ s∆∞·ªüi, b·∫øp ƒë·∫ßy ƒë·ªß. Tr·∫£i nghi·ªám s·ªëng ch·∫≠m gi·ªØa thi√™n nhi√™n. Trekking, visit b·∫£n l√†ng.',
      propertyType: 'CABIN',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 4,
      bedrooms: 2,
      beds: 2,
      bathrooms: 1,
      country: 'Vi·ªát Nam',
      city: 'Sa Pa',
      state: 'L√†o Cai',
      address: 'Th√¥n T·∫£ Van, X√£ H·∫ßu Th√†o',
      zipCode: '330000',
      latitude: 22.3364,
      longitude: 103.8438,
      neighborhood: 'V√πng cao Sapa',
      basePrice: 1000000,
      cleaningFee: 200000,
      serviceFee: 100000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1587061949409-02df41d5e562?w=1200',
        'https://images.unsplash.com/photo-1542718610-a1d656d1884c?w=1200',
        'https://images.unsplash.com/photo-1499696010180-025ef6e1a8f9?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 2,
      maxNights: 7,
      instantBookable: false,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'Sapa_Cabin',
      wifiPassword: 'sapa1234',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.9,
      totalReviews: 112,
      totalBookings: 156,
      occupancyRate: 91,
      publishedAt: new Date(),
    },
  })

  // Add more listings for better region coverage
  console.log('üè† Adding more listings for region coverage...')
  
  const additionalListings = [
    {
      slug: 'apartment-da-nang-beach-front',
      hostId: host1.id,
      title: 'CƒÉn H·ªô ƒê√† N·∫µng View Bi·ªÉn',
      city: 'ƒê√† N·∫µng',
      state: 'ƒê√† N·∫µng',
      country: 'Vi·ªát Nam',
      address: '123 V√µ Nguy√™n Gi√°p, Ng≈© H√†nh S∆°n',
      latitude: 16.0544,
      longitude: 108.2269,
      basePrice: 1800000,
      propertyType: 'APARTMENT' as PropertyType,
      bedrooms: 2,
      beds: 2,
      bathrooms: 2,
      maxGuests: 4,
    },
    {
      slug: 'villa-hue-ancient-city',
      hostId: host2.id,
      title: 'Villa Hu·∫ø G·∫ßn Ho√†ng Th√†nh',
      city: 'Hu·∫ø',
      state: 'Th·ª´a Thi√™n Hu·∫ø',
      country: 'Vi·ªát Nam',
      address: '45 L√™ L·ª£i, Ph√∫ H·ªôi',
      latitude: 16.4637,
      longitude: 107.5908,
      basePrice: 2200000,
      propertyType: 'VILLA' as PropertyType,
      bedrooms: 3,
      beds: 4,
      bathrooms: 2,
      maxGuests: 8,
    },
    {
      slug: 'homestay-quy-nhon-seaside',
      hostId: host1.id,
      title: 'Homestay Quy Nh∆°n G·∫ßn Bi·ªÉn',
      city: 'Quy Nh∆°n',
      state: 'B√¨nh ƒê·ªãnh',
      country: 'Vi·ªát Nam',
      address: '78 Tr·∫ßn H∆∞ng ƒê·∫°o, Nguy·ªÖn VƒÉn C·ª´',
      latitude: 13.7629,
      longitude: 109.2197,
      basePrice: 1200000,
      propertyType: 'HOUSE' as PropertyType,
      bedrooms: 2,
      beds: 3,
      bathrooms: 2,
      maxGuests: 6,
    },
  ]

  await Promise.all(
    additionalListings.map((listingData) =>
      prisma.listing.upsert({
        where: { slug: listingData.slug },
        update: {
          status: 'ACTIVE',
          publishedAt: new Date(),
        },
        create: {
          hostId: listingData.hostId,
          title: listingData.title,
          slug: listingData.slug,
          description: `${listingData.title} - Ch·ªó ·ªü l√Ω t∆∞·ªüng cho k·ª≥ ngh·ªâ c·ªßa b·∫°n.`,
          propertyType: listingData.propertyType,
          roomType: 'ENTIRE_PLACE',
          maxGuests: listingData.maxGuests,
          bedrooms: listingData.bedrooms,
          beds: listingData.beds,
          bathrooms: listingData.bathrooms,
          country: listingData.country,
          city: listingData.city,
          state: listingData.state,
          address: listingData.address,
          zipCode: '000000',
          latitude: listingData.latitude,
          longitude: listingData.longitude,
          neighborhood: listingData.city,
          basePrice: listingData.basePrice,
          cleaningFee: listingData.basePrice * 0.15,
          serviceFee: listingData.basePrice * 0.1,
          currency: 'VND',
          images: [
            'https://images.unsplash.com/photo-1522708323590-d24dbb6b0267?w=1200',
            'https://images.unsplash.com/photo-1484154218962-a197022b5858?w=1200',
          ],
          amenities: [],
          checkInTime: '14:00',
          checkOutTime: '11:00',
          minNights: 1,
          maxNights: 30,
          instantBookable: true,
          cancellationPolicy: 'FLEXIBLE',
          allowPets: false,
          allowSmoking: false,
          allowEvents: false,
          allowChildren: true,
          hasSmartLock: true,
          wifiName: `WiFi_${listingData.city.replace(/\s/g, '')}`,
          wifiPassword: 'welcome2024',
          isVerified: true,
          status: 'ACTIVE',
          featured: false,
          averageRating: 4.6,
          totalReviews: 15,
          totalBookings: 25,
          occupancyRate: 70,
          publishedAt: new Date(),
        },
      })
    )
  )

  console.log(`‚úÖ Additional ${additionalListings.length} listings created for regions`)

  console.log('‚úÖ Listings created')

  // Create Amenities
  console.log('‚ú® Creating amenities...')
  const amenityConfigs = [
    { name: 'WiFi', nameVi: 'WiFi', icon: 'wifi', category: 'BASIC', isPopular: true, description: 'K·∫øt n·ªëi internet mi·ªÖn ph√≠' },
    { name: 'Air Conditioning', nameVi: 'ƒêi·ªÅu h√≤a', icon: 'snowflake', category: 'FACILITIES', isPopular: true, description: 'ƒêi·ªÅu h√≤a nhi·ªát ƒë·ªô' },
    { name: 'Swimming Pool', nameVi: 'H·ªì b∆°i', icon: 'pool', category: 'FACILITIES', isPopular: true, description: 'H·ªì b∆°i ri√™ng ho·∫∑c chung' },
    { name: 'Kitchen', nameVi: 'B·∫øp', icon: 'utensils', category: 'DINING', isPopular: true, description: 'B·∫øp ƒë·∫ßy ƒë·ªß ti·ªán nghi' },
    { name: 'Parking', nameVi: 'B√£i ƒë·ªó xe', icon: 'car', category: 'LOGISTICS', isPopular: true, description: 'Ch·ªó ƒë·∫≠u xe mi·ªÖn ph√≠' },
    { name: 'Washing Machine', nameVi: 'M√°y gi·∫∑t', icon: 'tshirt', category: 'FACILITIES', isPopular: true, description: 'M√°y gi·∫∑t v√† s·∫•y' },
    { name: 'TV', nameVi: 'TV', icon: 'tv', category: 'ENTERTAINMENT', isPopular: true, description: 'Smart TV v·ªõi streaming' },
    { name: 'Hot Tub', nameVi: 'B·ªìn t·∫Øm n∆∞·ªõc n√≥ng', icon: 'hot-tub', category: 'FACILITIES', isPopular: false, description: 'B·ªìn t·∫Øm n∆∞·ªõc n√≥ng' },
    { name: 'Gym', nameVi: 'Ph√≤ng gym', icon: 'dumbbell', category: 'FACILITIES', isPopular: false, description: 'Ph√≤ng t·∫≠p th·ªÉ d·ª•c' },
    { name: 'BBQ Grill', nameVi: 'L√≤ n∆∞·ªõng BBQ', icon: 'fire', category: 'DINING', isPopular: false, description: 'L√≤ n∆∞·ªõng ngo√†i tr·ªùi' },
  ]

  const amenities = await Promise.all(
    amenityConfigs.map((amenity) =>
      prismaAny.amenity.upsert({
        where: { name: amenity.name },
        update: amenity,
        create: amenity,
      })
    )
  )
  
  // Update listings with amenities
  const amenityIds = amenities.map((a: any) => a.id)
  await prisma.listing.updateMany({
    where: { slug: { in: ['villa-sang-trong-view-bien-nha-trang', 'biet-thu-da-lat-view-doi-thong', 'resort-phu-quoc-bai-sao-villa-bien'] } },
    data: { amenities: amenityIds.slice(0, 7) },
  })
  
  console.log('‚úÖ Amenities created')

  // Create Host Profiles
  console.log('üë§ Creating host profiles...')
  const hostProfile1 = await prismaAny.hostProfile.upsert({
    where: { userId: host1.id },
    update: {},
    create: {
      userId: host1.id,
      responseRate: 98,
      responseTime: 30,
      acceptanceRate: 95,
      isSuperHost: true,
      superHostSince: new Date('2023-01-01'),
      totalEarnings: 500000000,
      availableBalance: 15000000,
      pendingPayoutBalance: 5000000,
      averageRating: 4.9,
      totalReviews: 250,
      instantBookEnabled: true,
      governmentIdVerified: true,
      emailVerified: true,
      phoneVerified: true,
      primaryLocationSlug: 'nha-trang',
      primaryLocationName: 'Nha Trang',
    },
  })

  const hostProfile2 = await prismaAny.hostProfile.upsert({
    where: { userId: host2.id },
    update: {},
    create: {
      userId: host2.id,
      responseRate: 96,
      responseTime: 45,
      acceptanceRate: 92,
      isSuperHost: false,
      totalEarnings: 800000000,
      availableBalance: 25000000,
      pendingPayoutBalance: 8000000,
      averageRating: 4.8,
      totalReviews: 180,
      instantBookEnabled: false,
      governmentIdVerified: true,
      emailVerified: true,
      phoneVerified: true,
      primaryLocationSlug: 'phu-quoc',
      primaryLocationName: 'Ph√∫ Qu·ªëc',
    },
  })

  console.log('‚úÖ Host profiles created')

  // Create Host Applications
  console.log('üìù Creating host applications...')
  await prismaAny.hostApplication.createMany({
    data: [
      {
        userId: guest2.id,
        locationSlug: 'ho-chi-minh',
        locationName: 'H·ªì Ch√≠ Minh',
        introduction: 'T√¥i mu·ªën tr·ªü th√†nh host ƒë·ªÉ chia s·∫ª cƒÉn h·ªô c·ªßa m√¨nh t·∫°i H·ªì Ch√≠ Minh.',
        experience: 'ƒê√£ c√≥ kinh nghi·ªám ti·∫øp ƒë√≥n kh√°ch du l·ªãch qu·ªëc t·∫ø.',
        status: 'APPROVED',
        maintenanceAcknowledged: true,
        createdAt: new Date('2024-12-01'),
        reviewedAt: new Date('2024-12-05'),
      },
      {
        userId: guest1.id,
        locationSlug: 'da-nang',
        locationName: 'ƒê√† N·∫µng',
        introduction: 'C√≥ bi·ªát th·ª± ven bi·ªÉn mu·ªën cho thu√™.',
        experience: 'M·ªõi b·∫Øt ƒë·∫ßu trong lƒ©nh v·ª±c homestay.',
        status: 'PENDING',
        maintenanceAcknowledged: false,
        createdAt: new Date(),
      },
    ],
  })

  console.log('‚úÖ Host applications created')

  // Create Team Members
  console.log('üë• Creating team members...')
  await prismaAny.teamMember.createMany({
    data: [
      {
        hostProfileId: hostProfile1.id,
        userId: guest1.id,
        role: 'CLEANER',
        permissions: ['VIEW_LISTINGS', 'VIEW_BOOKINGS', 'VIEW_CALENDAR'],
      },
      {
        hostProfileId: hostProfile1.id,
        userId: guest2.id,
        role: 'COORDINATOR',
        permissions: ['VIEW_LISTINGS', 'EDIT_LISTINGS', 'VIEW_BOOKINGS', 'MANAGE_BOOKINGS', 'VIEW_MESSAGES', 'SEND_MESSAGES'],
      },
    ],
  })

  console.log('‚úÖ Team members created')

  // Create Blocked Dates and Pricing Rules
  console.log('üìÖ Creating blocked dates & pricing rules...')
  const futureDate = new Date()
  futureDate.setMonth(futureDate.getMonth() + 2)
  const futureDate2 = new Date(futureDate)
  futureDate2.setDate(futureDate2.getDate() + 3)

  await prismaAny.blockedDate.createMany({
    data: [
      {
        listingId: listing1.id,
        startDate: futureDate,
        endDate: futureDate2,
        reason: 'B·∫£o tr√¨',
      },
      {
        listingId: listing3.id,
        startDate: new Date('2025-12-24'),
        endDate: new Date('2025-12-26'),
        reason: 'K·ª≥ ngh·ªâ l·ªÖ',
      },
    ],
  })

  await prismaAny.pricingRule.createMany({
    data: [
      {
        listingId: listing1.id,
        name: 'Gi√° cao ƒëi·ªÉm m√πa h√®',
        startDate: new Date('2025-06-01'),
        endDate: new Date('2025-08-31'),
        multiplier: 1.5,
        isActive: true,
      },
      {
        listingId: listing2.id,
        name: 'T·∫øt Nguy√™n ƒê√°n',
        startDate: new Date('2026-01-28'),
        endDate: new Date('2026-02-03'),
        multiplier: 2.0,
        isActive: true,
      },
    ],
  })

  console.log('‚úÖ Blocked dates & pricing rules created')

  // Create Bookings
  console.log('üìÖ Creating bookings...')

  const booking1 = await prisma.booking.create({
    data: {
      guestId: guest1.id,
      hostId: host1.id,
      listingId: listing1.id,
      checkIn: new Date('2025-01-15'),
      checkOut: new Date('2025-01-18'),
      nights: 3,
      adults: 4,
      basePrice: 3500000,
      cleaningFee: 500000,
      serviceFee: 350000,
      totalPrice: 10500000,
      status: 'COMPLETED',
      completedAt: new Date('2025-01-18'),
    },
  })

  const booking2 = await prisma.booking.create({
    data: {
      guestId: guest2.id,
      hostId: host1.id,
      listingId: listing1.id,
      checkIn: new Date('2025-02-20'),
      checkOut: new Date('2025-02-23'),
      nights: 3,
      adults: 4,
      children: 2,
      basePrice: 3500000,
      cleaningFee: 500000,
      serviceFee: 350000,
      totalPrice: 10500000,
      status: 'COMPLETED',
      completedAt: new Date('2025-02-23'),
    },
  })

  const booking3 = await prisma.booking.create({
    data: {
      guestId: guest1.id,
      hostId: host1.id,
      listingId: listing2.id,
      checkIn: new Date('2025-03-10'),
      checkOut: new Date('2025-03-13'),
      nights: 3,
      adults: 4,
      basePrice: 2800000,
      cleaningFee: 400000,
      serviceFee: 280000,
      totalPrice: 8400000,
      status: 'COMPLETED',
      completedAt: new Date('2025-03-13'),
    },
  })

  const booking4 = await prisma.booking.create({
    data: {
      guestId: guest2.id,
      hostId: host2.id,
      listingId: listing3.id,
      checkIn: new Date('2025-04-05'),
      checkOut: new Date('2025-04-10'),
      nights: 5,
      adults: 6,
      children: 2,
      basePrice: 8500000,
      cleaningFee: 1000000,
      serviceFee: 850000,
      totalPrice: 42500000,
      status: 'COMPLETED',
      completedAt: new Date('2025-04-10'),
    },
  })

  const booking5 = await prisma.booking.create({
    data: {
      guestId: guest1.id,
      hostId: host1.id,
      listingId: listing5.id,
      checkIn: new Date('2025-05-01'),
      checkOut: new Date('2025-05-04'),
      nights: 3,
      adults: 2,
      basePrice: 1200000,
      cleaningFee: 200000,
      serviceFee: 120000,
      totalPrice: 3600000,
      status: 'COMPLETED',
      completedAt: new Date('2025-05-04'),
    },
  })

  console.log('‚úÖ Bookings created')

  // Create Payments and Payment Methods
  console.log('üí≥ Creating payments & payment methods...')
  const paymentMethod1 = await prismaAny.paymentMethod.create({
    data: {
      userId: guest1.id,
      type: 'VNPAY',
      walletType: 'VNPAY',
      isDefault: true,
    },
  })

  const paymentMethod2 = await prismaAny.paymentMethod.create({
    data: {
      userId: guest2.id,
      type: 'MOMO',
      walletType: 'MOMO',
      walletPhone: '0934567890',
      isDefault: true,
    },
  })

  const payments = await Promise.all([
    prismaAny.payment.create({
      data: {
        bookingId: booking1.id,
        amount: booking1.totalPrice,
        currency: 'VND',
        paymentMethod: 'VNPAY',
        paymentGateway: 'VNPAY',
        status: 'COMPLETED',
        transactionId: 'VNPAY_' + Date.now(),
        paidAt: booking1.createdAt,
      },
    }),
    prismaAny.payment.create({
      data: {
        bookingId: booking2.id,
        amount: booking2.totalPrice,
        currency: 'VND',
        paymentMethod: 'MOMO',
        paymentGateway: 'MOMO',
        status: 'COMPLETED',
        transactionId: 'MOMO_' + Date.now(),
        paidAt: booking2.createdAt,
      },
    }),
    prismaAny.payment.create({
      data: {
        bookingId: booking3.id,
        amount: booking3.totalPrice,
        currency: 'VND',
        paymentMethod: 'BANK_TRANSFER',
        paymentGateway: 'VNPAY',
        status: 'COMPLETED',
        transactionId: 'BANK_' + Date.now(),
        paidAt: booking3.createdAt,
      },
    }),
  ])

  // Create Transactions
  await Promise.all([
    prismaAny.transaction.create({
      data: {
        userId: guest1.id,
        type: 'BOOKING_PAYMENT',
        amount: -booking1.totalPrice,
        currency: 'VND',
        description: 'Thanh to√°n booking villa Nha Trang',
        status: 'COMPLETED',
        referenceId: booking1.id,
      },
    }),
    prismaAny.transaction.create({
      data: {
        userId: host1.id,
        type: 'PAYOUT',
        amount: booking1.hostEarnings || booking1.totalPrice * 0.85,
        currency: 'VND',
        description: 'Thu nh·∫≠p t·ª´ booking',
        status: 'COMPLETED',
        referenceId: booking1.id,
      },
    }),
  ])

  console.log('‚úÖ Payments & payment methods created')

  // Create Host Payouts
  console.log('üí∞ Creating host payouts...')
  const hostPayout1 = await prismaAny.hostPayout.create({
    data: {
      hostId: host1.id,
      amount: 50000000,
      status: 'PAID',
      bookingIds: [booking1.id, booking3.id],
      payoutMethod: 'BANK_TRANSFER',
      requestedAt: new Date('2025-01-20'),
      processedAt: new Date('2025-01-21'),
    },
  })

  const hostPayout2 = await prismaAny.hostPayout.create({
    data: {
      hostId: host2.id,
      amount: 35000000,
      status: 'PENDING',
      bookingIds: [booking4.id],
      payoutMethod: 'BANK_TRANSFER',
      requestedAt: new Date(),
    },
  })

  console.log('‚úÖ Host payouts created')

  // Create Conversations and Messages
  console.log('üí¨ Creating conversations & messages...')
  const conversation1 = await prismaAny.conversation.create({
    data: {
      participants: [guest1.id, host1.id],
      listingId: listing1.id,
      lastMessage: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥n ti·∫øp!',
      lastMessageAt: new Date(),
      unreadCount: { [guest1.id]: 0, [host1.id]: 1 },
    },
  })

  await prismaAny.message.createMany({
    data: [
      {
        conversationId: conversation1.id,
        senderId: guest1.id,
        bookingId: booking1.id,
        content: 'Xin ch√†o! T√¥i mu·ªën h·ªèi v·ªÅ check-in time.',
        messageType: 'TEXT',
        isRead: true,
        readAt: new Date(),
      },
      {
        conversationId: conversation1.id,
        senderId: host1.id,
        bookingId: booking1.id,
        content: 'Ch√†o b·∫°n! Check-in t·ª´ 14:00, b·∫°n c√≥ th·ªÉ ƒë·∫øn s·ªõm h∆°n n·∫øu ph√≤ng s·∫µn s√†ng.',
        messageType: 'TEXT',
        isRead: true,
        readAt: new Date(),
      },
      {
        conversationId: conversation1.id,
        senderId: guest1.id,
        bookingId: booking1.id,
        content: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥n ti·∫øp!',
        messageType: 'TEXT',
        isRead: false,
      },
    ],
  })

  console.log('‚úÖ Conversations & messages created')

  // Create Notifications
  console.log('üîî Creating notifications...')
  await prismaAny.notification.createMany({
    data: [
      {
        userId: guest1.id,
        type: 'BOOKING_CONFIRMED',
        title: 'ƒê·∫∑t ph√≤ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n',
        message: 'Booking t·∫°i Villa Nha Trang ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng!',
        link: `/booking/${booking1.id}`,
        isRead: true,
        readAt: new Date(),
        sentEmail: true,
        sentPush: true,
      },
      {
        userId: host1.id,
        type: 'BOOKING_REQUEST',
        title: 'Y√™u c·∫ßu ƒë·∫∑t ph√≤ng m·ªõi',
        message: 'B·∫°n c√≥ m·ªôt y√™u c·∫ßu ƒë·∫∑t ph√≤ng m·ªõi t·ª´ L√™ Th·ªã Thu',
        link: `/host/bookings/${booking1.id}`,
        isRead: false,
        sentEmail: false,
        sentPush: true,
      },
      {
        userId: guest2.id,
        type: 'REVIEW_RECEIVED',
        title: 'B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë√°nh gi√° m·ªõi',
        message: 'Host ƒë√£ ƒë·ªÉ l·∫°i ƒë√°nh gi√° cho chuy·∫øn ƒëi c·ªßa b·∫°n!',
        link: `/reviews`,
        isRead: false,
        sentEmail: false,
        sentPush: false,
      },
    ],
  })

  console.log('‚úÖ Notifications created')

  // Create Wishlists and Collections
  console.log('‚ù§Ô∏è Creating wishlists & collections...')
  const wishlist1 = await prismaAny.wishlist.findFirst({ where: { userId: guest1.id } })
  if (wishlist1) {
    await prismaAny.wishlist.update({
      where: { id: wishlist1.id },
      data: { listingIds: [listing1.id, listing2.id, listing5.id] },
    })
  } else {
    await prismaAny.wishlist.create({
      data: {
        userId: guest1.id,
        listingIds: [listing1.id, listing2.id, listing5.id],
      },
    })
  }

  const wishlist2 = await prismaAny.wishlist.findFirst({ where: { userId: guest2.id } })
  if (wishlist2) {
    await prismaAny.wishlist.update({
      where: { id: wishlist2.id },
      data: { listingIds: [listing1.id, listing3.id] },
    })
  } else {
    await prismaAny.wishlist.create({
      data: {
        userId: guest2.id,
        listingIds: [listing1.id, listing3.id],
      },
    })
  }

  await prismaAny.collection.createMany({
    data: [
      {
        userId: guest1.id,
        name: 'Nh·ªØng n∆°i t√¥i mu·ªën ƒë·∫øn',
        description: 'Danh s√°ch c√°c homestay y√™u th√≠ch',
        coverImage: listing1.images[0],
        listingIds: [listing1.id, listing3.id, listing10.id],
        isPublic: true,
      },
      {
        userId: guest2.id,
        name: 'Beach Resorts',
        description: 'C√°c resort bi·ªÉn tuy·ªát v·ªùi',
        coverImage: listing3.images[0],
        listingIds: [listing3.id, listing9.id],
        isPublic: true,
      },
    ],
  })

  console.log('‚úÖ Wishlists & collections created')

  // Create User Follows
  console.log('üë• Creating user follows...')
  const userFollowPairs = [
    { followerId: guest1.id, followingId: host1.id },
    { followerId: guest2.id, followingId: host1.id },
    { followerId: guest1.id, followingId: host2.id },
  ]

  for (const pair of userFollowPairs) {
    const existingFollow = await prismaAny.userFollow.findUnique({
      where: {
        followerId_followingId: {
          followerId: pair.followerId,
          followingId: pair.followingId,
        },
      },
    })

    if (!existingFollow) {
      await prismaAny.userFollow.create({ data: pair })
    }
  }

  console.log('‚úÖ User follows created')

  // Create Services
  console.log('üõçÔ∏è Creating services...')
  const services = await Promise.all([
    prismaAny.service.create({
      data: {
        name: 'Pet Care Center Nha Trang',
        description: 'D·ªãch v·ª• chƒÉm s√≥c th√∫ c∆∞ng chuy√™n nghi·ªáp',
        category: 'PET_VET',
        subcategory: 'Veterinary',
        address: '123 Nguy·ªÖn Th·ªã Minh Khai, Nha Trang',
        city: 'Nha Trang',
        country: 'Vietnam',
        latitude: 12.2388,
        longitude: 109.1967,
        phone: '02583881234',
        openHours: '8:00 - 20:00 (T2-CN)',
        images: ['https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=800'],
        basePrice: 500000,
        features: ['Kh√°m t·ªïng qu√°t', 'Ti√™m ph√≤ng', 'Ph·∫´u thu·∫≠t'],
        amenities: ['Parking', 'WiFi'],
        isBookable: true,
        nearbyListings: [listing1.id],
      },
    }),
    prismaAny.service.create({
      data: {
        name: 'Spa & Wellness ƒê√† L·∫°t',
        description: 'Trung t√¢m spa v√† chƒÉm s√≥c s·ª©c kh·ªèe',
        category: 'OTHER',
        subcategory: 'Spa',
        address: '45 Tr·∫ßn H∆∞ng ƒê·∫°o, ƒê√† L·∫°t',
        city: 'ƒê√† L·∫°t',
        country: 'Vietnam',
        latitude: 11.9404,
        longitude: 108.4583,
        phone: '02633888888',
        openHours: '9:00 - 21:00 (H√†ng ng√†y)',
        images: ['https://images.unsplash.com/photo-1540555700478-4be289fbecef?w=800'],
        basePrice: 800000,
        features: ['Massage', 'Facial', 'Body Treatment'],
        isBookable: true,
        nearbyListings: [listing2.id],
      },
    }),
  ])

  console.log('‚úÖ Services created')

  // Create Service Bookings
  console.log('üìã Creating service bookings...')
  await prismaAny.serviceBooking.createMany({
    data: [
      {
        serviceId: services[0].id,
        bookingId: booking1.id,
        guestId: guest1.id,
        bookingDate: booking1.checkIn,
        timeSlot: '10:00 - 11:00',
        price: 500000,
        status: 'CONFIRMED',
        confirmedAt: booking1.createdAt,
      },
    ],
  })

  console.log('‚úÖ Service bookings created')

  // Create Posts and Comments
  console.log('üìù Creating posts & comments...')
  const post1 = await prismaAny.post.create({
    data: {
      authorId: guest1.id,
      content: 'V·ª´a tr·∫£i nghi·ªám m·ªôt k·ª≥ ngh·ªâ tuy·ªát v·ªùi t·∫°i villa Nha Trang! View bi·ªÉn ƒë·∫πp kh√¥ng t√¨ v·∫øt. Highly recommend! üåä‚ú®',
      media: [
        { type: 'image', url: listing1.images[0], caption: 'View t·ª´ ph√≤ng ng·ªß ch√≠nh' },
        { type: 'image', url: listing1.images[1], caption: 'H·ªì b∆°i ri√™ng' },
      ],
      listingId: listing1.id,
      location: 'Nha Trang',
      latitude: listing1.latitude,
      longitude: listing1.longitude,
      likes: [guest2.id, host1.id],
      likesCount: 2,
      commentsCount: 3,
      isPublic: true,
    },
  })

  await prismaAny.comment.createMany({
    data: [
      {
        postId: post1.id,
        authorId: guest2.id,
        content: 'Wow, view ƒë·∫πp qu√°! M√¨nh c≈©ng mu·ªën ƒë·∫øn ƒë√¢y üòç',
        likesCount: 1,
        likes: [guest1.id],
      },
      {
        postId: post1.id,
        authorId: host1.id,
        content: 'C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn villa c·ªßa ch√∫ng t√¥i! R·∫•t vui ƒë∆∞·ª£c ƒë√≥n ti·∫øp b·∫°n! üôè',
        likesCount: 2,
        likes: [guest1.id, guest2.id],
      },
      {
        postId: post1.id,
        authorId: guest1.id,
        parentId: undefined,
        content: 'M√¨nh s·∫Ω quay l·∫°i s·ªõm th√¥i! üèñÔ∏è',
        likesCount: 0,
        likes: [],
      },
    ],
  })

  // Update post comments count
  await prismaAny.post.update({
    where: { id: post1.id },
    data: { commentsCount: 3 },
  })

  console.log('‚úÖ Posts & comments created')

  // Create Experiences
  console.log('üéØ Creating experiences...')
  const experience1 = await prismaAny.experience.create({
    data: {
      hostId: host1.id,
      title: 'Tour ·∫®m Th·ª±c ƒê√† L·∫°t - N·∫•u ƒÇn C√πng Gia ƒê√¨nh',
      description: 'Tham gia l·ªõp n·∫•u ƒÉn ƒë·∫∑c bi·ªát, h·ªçc c√°ch l√†m c√°c m√≥n ƒÉn ƒë·ªãa ph∆∞∆°ng ƒê√† L·∫°t v√† th∆∞·ªüng th·ª©c c√πng gia ƒë√¨nh.',
      category: 'FOOD_DRINK',
      city: 'ƒê√† L·∫°t',
      location: 'Bi·ªát th·ª± ƒê√† L·∫°t',
      latitude: 11.9404,
      longitude: 108.4583,
      image: 'https://images.unsplash.com/photo-1556910103-1c02745aae4d?w=800',
      images: [
        'https://images.unsplash.com/photo-1556910103-1c02745aae4d?w=800',
        'https://images.unsplash.com/photo-1551782450-17144efb9c50?w=800',
      ],
      price: 500000,
      currency: 'VND',
      duration: '3 gi·ªù',
      groupSize: 'T·ªëi ƒëa 8 ng∆∞·ªùi',
      minGuests: 2,
      maxGuests: 8,
      includedItems: ['Nguy√™n li·ªáu', 'C√¥ng c·ª• n·∫•u ƒÉn', 'B·ªØa ƒÉn', 'N∆∞·ªõc u·ªëng'],
      notIncluded: ['V·∫≠n chuy·ªÉn'],
      requirements: ['Tr√™n 12 tu·ªïi'],
      languages: ['Ti·∫øng Vi·ªát', 'English'],
      tags: ['·∫®m th·ª±c', 'VƒÉn h√≥a', 'Gia ƒë√¨nh'],
      status: 'ACTIVE',
      isVerified: true,
      averageRating: 4.9,
      totalReviews: 45,
      totalBookings: 120,
    },
  })

  const experience2 = await prismaAny.experience.create({
    data: {
      hostId: host2.id,
      title: 'Snorkeling Tour Ph√∫ Qu·ªëc',
      description: 'Kh√°m ph√° th·∫ø gi·ªõi d∆∞·ªõi n∆∞·ªõc tuy·ªát ƒë·∫πp t·∫°i Ph√∫ Qu·ªëc v·ªõi tour snorkeling chuy√™n nghi·ªáp.',
      category: 'WATER_SPORTS',
      city: 'Ph√∫ Qu·ªëc',
      location: 'B√£i Sao',
      latitude: 10.1699,
      longitude: 103.9676,
      image: 'https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=800',
      images: [
        'https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=800',
        'https://images.unsplash.com/photo-1583212292454-1fe6229603b7?w=800',
      ],
      price: 800000,
      currency: 'VND',
      duration: 'C·∫£ ng√†y',
      groupSize: 'T·ªëi ƒëa 10 ng∆∞·ªùi',
      minGuests: 4,
      maxGuests: 10,
      includedItems: ['Thi·∫øt b·ªã l·∫∑n', 'Thuy·ªÅn', 'H∆∞·ªõng d·∫´n vi√™n', 'B·ªØa tr∆∞a'],
      notIncluded: ['B·∫£o hi·ªÉm'],
      requirements: ['Bi·∫øt b∆°i', 'Tr√™n 10 tu·ªïi'],
      languages: ['Ti·∫øng Vi·ªát', 'English'],
      tags: ['L·∫∑n bi·ªÉn', 'Tham quan', 'Th·ªÉ thao'],
      status: 'ACTIVE',
      isVerified: true,
      averageRating: 4.8,
      totalReviews: 78,
      totalBookings: 156,
    },
  })

  console.log('‚úÖ Experiences created')

  // Create Experience Bookings and Reviews
  console.log('üìÖ Creating experience bookings...')
  const expBooking1 = await prismaAny.experienceBooking.create({
    data: {
      experienceId: experience1.id,
      guestId: guest1.id,
      date: new Date('2025-03-11'),
      timeSlot: '14:00 - 17:00',
      numberOfGuests: 4,
      pricePerPerson: 500000,
      totalPrice: 2000000,
      status: 'COMPLETED',
      paid: true,
    },
  })

  await prismaAny.experienceReview.create({
    data: {
      experienceId: experience1.id,
      bookingId: expBooking1.id,
      authorId: guest1.id,
      rating: 5,
      content: 'Tr·∫£i nghi·ªám tuy·ªát v·ªùi! Ch√∫ng t√¥i ƒë√£ h·ªçc ƒë∆∞·ª£c nhi·ªÅu m√≥n ƒÉn ngon v√† c√≥ th·ªùi gian vui v·∫ª c√πng gia ƒë√¨nh.',
      images: ['https://images.unsplash.com/photo-1556910103-1c02745aae4d?w=400'],
    },
  })

  console.log('‚úÖ Experience bookings & reviews created')

  // Create Concierge Plans
  console.log('üé© Creating concierge plans...')
  await prismaAny.conciergePlan.createMany({
    data: [
      {
        bookingId: booking4.id,
        listingId: listing3.id,
        guestId: guest2.id,
        hostId: host2.id,
        status: 'CONFIRMED',
        planDetails: {
          services: ['Airport pickup', 'Daily breakfast', 'Spa session'],
          specialRequests: 'Tr·∫ª em c·∫ßn gi∆∞·ªùng ph·ª•',
        },
        loyaltyOffer: 'Gold member discount applied',
        hostNotes: 'Kh√°ch VIP, ∆∞u ti√™n chƒÉm s√≥c',
      },
    ],
  })

  console.log('‚úÖ Concierge plans created')

  // Create Neighborhood Guides
  console.log('üó∫Ô∏è Creating neighborhood guides...')
  const neighborhoodGuideData = [
    {
      listingId: listing1.id,
      overview: 'Khu v·ª±c n√†y n·∫±m ngay trung t√¢m Nha Trang, g·∫ßn b√£i bi·ªÉn v√† c√°c ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng.',
      gettingAround: 'D·ªÖ d√†ng ƒëi b·ªô ƒë·∫øn b√£i bi·ªÉn, c√≥ th·ªÉ thu√™ xe m√°y ho·∫∑c taxi.',
      restaurants: [
        { name: 'Nh√† H√†ng N∆∞·ªõng BBQ', description: 'Nh√† h√†ng BBQ n·ªïi ti·∫øng', distance: 0.5, placeId: 'ChIJ123' },
        { name: 'Lac Canh Restaurant', description: 'H·∫£i s·∫£n t∆∞∆°i s·ªëng', distance: 1.2 },
      ],
      cafes: [
        { name: 'Rainbow Coffee', description: 'Coffee view bi·ªÉn', distance: 0.8 },
      ],
      attractions: [
        { name: 'Vinpearl Land', description: 'C√¥ng vi√™n gi·∫£i tr√≠', distance: 5.0 },
        { name: 'Ch√πa Long S∆°n', description: 'Di t√≠ch l·ªãch s·ª≠', distance: 2.5 },
      ],
      shopping: [
        { name: 'Big C Nha Trang', description: 'Si√™u th·ªã l·ªõn', distance: 1.5 },
      ],
    },
    {
      listingId: listing2.id,
      overview: 'Khu v·ª±c y√™n tƒ©nh, g·∫ßn trung t√¢m ƒê√† L·∫°t, view ƒë·ªìi th√¥ng ƒë·∫πp m·∫Øt.',
      gettingAround: 'C√≥ th·ªÉ ƒëi b·ªô ƒë·∫øn ch·ª£ ƒê√† L·∫°t, thu√™ xe m√°y ƒë·ªÉ tham quan.',
      restaurants: [
        { name: 'Nh√† H√†ng ƒê·ªìng Qu√™', description: '·∫®m th·ª±c ƒë·ªãa ph∆∞∆°ng', distance: 1.0 },
      ],
      cafes: [
        { name: 'Cafe An', description: 'Cafe view ƒë·∫πp', distance: 0.5 },
      ],
      attractions: [
        { name: 'H·ªì Xu√¢n H∆∞∆°ng', description: 'H·ªì ƒë·∫πp gi·ªØa th√†nh ph·ªë', distance: 2.0 },
        { name: 'Dinh B·∫£o ƒê·∫°i', description: 'Di t√≠ch l·ªãch s·ª≠', distance: 3.5 },
      ],
    },
  ]

  for (const guide of neighborhoodGuideData) {
    const { listingId, ...guideData } = guide
    await prismaAny.neighborhoodGuide.upsert({
      where: { listingId },
      update: guideData,
      create: { listingId, ...guideData },
    })
  }

  console.log('‚úÖ Neighborhood guides created')

  // Create User Quests
  console.log('üéÆ Creating user quests...')
  const quest1 = await prisma.quest.findFirst({ where: { title: 'ƒê·∫∑t ph√≤ng ƒë·∫ßu ti√™n' } })
  const quest2 = await prisma.quest.findFirst({ where: { title: 'Vi·∫øt 3 ƒë√°nh gi√° ch√¢n th√†nh' } })
  
  if (quest1) {
    await prismaAny.userQuest.upsert({
      where: {
        userId_questId: {
          userId: guest1.id,
          questId: quest1.id,
        },
      },
      update: {
        currentCount: 1,
        isCompleted: true,
        completedAt: booking1.createdAt,
      },
      create: {
        userId: guest1.id,
        questId: quest1.id,
        currentCount: 1,
        isCompleted: true,
        completedAt: booking1.createdAt,
      },
    })
  }

  if (quest2) {
    await prismaAny.userQuest.upsert({
      where: {
        userId_questId: {
          userId: guest1.id,
          questId: quest2.id,
        },
      },
      update: {
        currentCount: 2,
        isCompleted: false,
      },
      create: {
        userId: guest1.id,
        questId: quest2.id,
        currentCount: 2,
        isCompleted: false,
      },
    })
  }

  console.log('‚úÖ User quests created')

  // Create System Settings
  console.log('‚öôÔ∏è Creating system settings...')
  const systemSettings = [
    {
      key: 'platform_commission_rate',
      value: { rate: 0.15, description: 'Ph√≠ hoa h·ªìng n·ªÅn t·∫£ng 15%' },
      updatedBy: admin.id,
    },
    {
      key: 'min_booking_amount',
      value: { amount: 500000, currency: 'VND' },
      updatedBy: admin.id,
    },
    {
      key: 'max_booking_advance_days',
      value: { days: 365 },
      updatedBy: admin.id,
    },
    {
      key: 'auto_confirm_instant_book',
      value: { enabled: true },
      updatedBy: admin.id,
    },
  ]

  for (const setting of systemSettings) {
    const { key, ...settingData } = setting
    await prismaAny.systemSetting.upsert({
      where: { key },
      update: settingData,
      create: { key, ...settingData },
    })
  }

  console.log('‚úÖ System settings created')

  // Create Payment Gateway Configs
  console.log('üí≥ Creating payment gateway configs...')
  const gatewayConfigs = [
    {
      gateway: 'VNPAY',
      config: {
        merchantId: 'demo_merchant',
        secretKey: 'demo_secret',
        apiUrl: 'https://sandbox.vnpayment.vn',
      },
      isEnabled: true,
      updatedBy: admin.id,
    },
    {
      gateway: 'MOMO',
      config: {
        partnerCode: 'demo_partner',
        accessKey: 'demo_access',
        secretKey: 'demo_secret',
      },
      isEnabled: true,
      updatedBy: admin.id,
    },
  ]

  for (const config of gatewayConfigs) {
    const { gateway, ...configData } = config
    await prismaAny.paymentGatewayConfig.upsert({
      where: { gateway },
      update: configData,
      create: { gateway, ...configData },
    })
  }

  console.log('‚úÖ Payment gateway configs created')

  // Create CMS Blocks
  console.log('üìÑ Creating CMS blocks...')
  const cmsBlocks = [
    {
      key: 'homepage_hero',
      label: 'Homepage Hero Section',
      data: {
        title: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi LuxeStay',
        subtitle: 'Kh√°m ph√° nh·ªØng homestay ƒë·ªôc ƒë√°o t·∫°i Vi·ªát Nam',
        ctaText: 'B·∫Øt ƒë·∫ßu t√¨m ki·∫øm',
        backgroundImage: 'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=1920',
      },
      updatedBy: admin.id,
    },
    {
      key: 'about_us',
      label: 'About Us Content',
      data: {
        content: 'LuxeStay l√† n·ªÅn t·∫£ng ƒë·∫∑t homestay h√†ng ƒë·∫ßu t·∫°i Vi·ªát Nam...',
      },
      updatedBy: admin.id,
    },
  ]

  for (const block of cmsBlocks) {
    const { key, ...blockData } = block
    await prismaAny.cmsBlock.upsert({
      where: { key },
      update: blockData,
      create: { key, ...blockData },
    })
  }

  console.log('‚úÖ CMS blocks created')

  console.log('üéüÔ∏è Creating vouchers & coupons...')

  const seedNow = new Date()
  const addDays = (days: number) => {
    const date = new Date(seedNow)
    date.setDate(date.getDate() + days)
    return date
  }

  const adminVoucherConfig = {
    code: 'LUXE10',
    name: '∆Øu ƒë√£i th√†nh vi√™n to√†n h·ªá th·ªëng',
    description: 'Gi·∫£m 10% cho ƒë∆°n t·ª´ 2 ƒë√™m, t·ªëi ƒëa 2.000.000‚Ç´.',
    type: PromotionType.GENERAL,
    discountType: DiscountType.PERCENTAGE,
    discountValue: 10,
    maxDiscount: 2_000_000,
    minBookingValue: 4_000_000,
    maxUses: 500,
    maxUsesPerUser: 3,
    pointCost: 0,
    source: PromotionSource.ADMIN,
    hostId: null,
    stackWithMembership: true,
    stackWithPromotions: false,
    allowedMembershipTiers: [
      LoyaltyTier.SILVER,
      LoyaltyTier.GOLD,
      LoyaltyTier.PLATINUM,
      LoyaltyTier.DIAMOND,
    ],
    listingIds: [] as string[],
    propertyTypes: [] as PropertyType[],
    metadata: {
      highlight: 'Gi·∫£m 10% to√†n b·ªô h·ªá th·ªëng',
    } as Prisma.JsonObject,
    validFrom: seedNow,
    validUntil: addDays(120),
    isActive: true,
  } satisfies Prisma.PromotionUncheckedCreateInput

  const loyaltyVoucherConfig = {
    code: 'POINTS15',
    name: 'ƒê·ªïi ƒëi·ªÉm nh·∫≠n voucher 15%',
    description: 'Voucher gi·∫£m 15% t·ªëi ƒëa 1.500.000‚Ç´ d√†nh cho th√†nh vi√™n ƒë·ªïi ƒëi·ªÉm.',
    type: PromotionType.GENERAL,
    discountType: DiscountType.PERCENTAGE,
    discountValue: 15,
    maxDiscount: 1_500_000,
    minBookingValue: 3_000_000,
    maxUses: 300,
    maxUsesPerUser: 2,
    pointCost: 2_500,
    source: PromotionSource.LOYALTY_EXCHANGE,
    hostId: null,
    stackWithMembership: true,
    stackWithPromotions: false,
    allowedMembershipTiers: [] as LoyaltyTier[],
    listingIds: [] as string[],
    propertyTypes: [] as PropertyType[],
    metadata: {
      highlight: 'ƒê·ªïi 2.500 ƒëi·ªÉm ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i 15%',
    } as Prisma.JsonObject,
    validFrom: seedNow,
    validUntil: addDays(90),
    isActive: true,
  } satisfies Prisma.PromotionUncheckedCreateInput

  const hostVoucherConfig = {
    code: 'VILLA20',
    name: '∆Øu ƒë√£i ri√™ng villa Nha Trang',
    description: 'Gi·∫£m 20% cho k·ª≥ ngh·ªâ t·ªëi thi·ªÉu 3 ƒë√™m t·∫°i villa Nha Trang.',
    type: PromotionType.GENERAL,
    discountType: DiscountType.PERCENTAGE,
    discountValue: 20,
    maxDiscount: 3_000_000,
    minBookingValue: 6_000_000,
    maxUses: 120,
    maxUsesPerUser: 1,
    pointCost: 0,
    source: PromotionSource.HOST,
    hostId: host1.id,
    stackWithMembership: true,
    stackWithPromotions: false,
    allowedMembershipTiers: [] as LoyaltyTier[],
    listingIds: [listing1.id],
    propertyTypes: [listing1.propertyType],
    metadata: {
      feature: 'Host-specific coupon',
    } as Prisma.JsonObject,
    validFrom: seedNow,
    validUntil: addDays(60),
    isActive: true,
  } satisfies Prisma.PromotionUncheckedCreateInput

  const { code: adminVoucherCode, ...adminVoucherData } = adminVoucherConfig
  const { code: loyaltyVoucherCode, ...loyaltyVoucherData } = loyaltyVoucherConfig
  const { code: hostVoucherCode, ...hostVoucherData } = hostVoucherConfig

  const [adminVoucher, loyaltyVoucher, hostVoucher] = await Promise.all([
    prisma.promotion.upsert({
      where: { code: adminVoucherCode },
      update: adminVoucherData,
      create: adminVoucherConfig,
    }),
    prisma.promotion.upsert({
      where: { code: loyaltyVoucherCode },
      update: loyaltyVoucherData,
      create: loyaltyVoucherConfig,
    }),
    prisma.promotion.upsert({
      where: { code: hostVoucherCode },
      update: hostVoucherData,
      create: hostVoucherConfig,
    }),
  ])

  const spaReward = await prisma.rewardCatalogItem.findUnique({
    where: { slug: 'spa-credit' },
  })

  if (spaReward && spaReward.promotionId !== loyaltyVoucher.id) {
    const existingMetadata = ensureJsonObject(spaReward.metadata)

    await prisma.rewardCatalogItem.update({
      where: { id: spaReward.id },
      data: {
        promotionId: loyaltyVoucher.id,
        pointsCost: loyaltyVoucher.pointCost ?? spaReward.pointsCost,
        metadata: {
          ...existingMetadata,
          promotionCode: loyaltyVoucher.code,
        } as Prisma.JsonObject,
      },
    })
  }

  const existingRedemption = await prisma.promotionRedemption.findFirst({
    where: {
      promotionId: loyaltyVoucher.id,
      userId: guest2.id,
    },
  })

  if (!existingRedemption && spaReward) {
    const currentGuest2 = await prisma.user.findUnique({
      where: { id: guest2.id },
      select: { loyaltyPoints: true },
    })

    const redemptionCost = loyaltyVoucher.pointCost ?? spaReward.pointsCost ?? 0
    const balanceAfter = Math.max((currentGuest2?.loyaltyPoints ?? 0) - redemptionCost, 0)

    const rewardRedemption = await prisma.rewardRedemption.create({
      data: {
        userId: guest2.id,
        rewardId: spaReward.id,
        status: 'FULFILLED',
        pointsSpent: redemptionCost,
        fulfilledAt: seedNow,
        metadata: {
          promotionId: loyaltyVoucher.id,
          catalogItemSlug: spaReward.slug,
        },
      },
    })

    const promotionRedemption = await prisma.promotionRedemption.create({
      data: {
        promotionId: loyaltyVoucher.id,
        userId: guest2.id,
        status: 'ACTIVE',
        pointsSpent: redemptionCost,
        redeemedAt: seedNow,
        expiresAt: loyaltyVoucher.validUntil,
        metadata: {
          rewardRedemptionId: rewardRedemption.id,
          catalogItemSlug: spaReward.slug,
        },
      },
    })

    await prisma.rewardTransaction.create({
      data: {
        userId: guest2.id,
        transactionType: 'DEBIT',
        source: 'REDEMPTION',
        points: -redemptionCost,
        balanceAfter,
        description: `ƒê·ªïi voucher ${loyaltyVoucher.code}`,
        referenceId: promotionRedemption.id,
        metadata: {
          promotionId: loyaltyVoucher.id,
          catalogItemSlug: spaReward.slug,
        },
      },
    })

    await prisma.user.update({
      where: { id: guest2.id },
      data: { loyaltyPoints: balanceAfter },
    })

    await prisma.promotion.update({
      where: { id: loyaltyVoucher.id },
      data: {
        usedCount: { increment: 1 },
      },
    })
  }

  console.log('‚úÖ Vouchers seeded')
  // Create Reviews
  console.log('‚≠ê Creating reviews...')

  await prisma.review.createMany({
    data: [
      {
        listingId: listing1.id,
        reviewerId: guest1.id,
        revieweeId: host1.id,
        bookingId: booking1.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Villa tuy·ªát v·ªùi! View bi·ªÉn ƒë·∫πp kh√¥ng t√¨ v·∫øt. Ch·ªß nh√† nhi·ªát t√¨nh, check-in d·ªÖ d√†ng. Nh·∫•t ƒë·ªãnh s·∫Ω quay l·∫°i!',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 5,
        valueRating: 5,
      },
      {
        listingId: listing1.id,
        reviewerId: guest2.id,
        revieweeId: host1.id,
        bookingId: booking2.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Gia ƒë√¨nh m√¨nh ƒë√£ c√≥ 3 ng√†y tuy·ªát v·ªùi t·∫°i villa. H·ªì b∆°i s·∫°ch s·∫Ω, ph√≤ng r·ªông r√£i. R·∫•t ƒë√°ng ti·ªÅn!',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 5,
        valueRating: 4,
      },
      {
        listingId: listing2.id,
        reviewerId: guest1.id,
        revieweeId: host1.id,
        bookingId: booking3.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Bi·ªát th·ª± ƒë·∫πp nh∆∞ m∆°! Kh√¥ng kh√≠ ƒê√† L·∫°t m√°t m·∫ª, view ƒë·ªìi th√¥ng th∆° m·ªông. Ch·ªß nh√† r·∫•t chu ƒë√°o.',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 4,
        valueRating: 5,
      },
      {
        listingId: listing3.id,
        reviewerId: guest2.id,
        revieweeId: host2.id,
        bookingId: booking4.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Resort ƒë·∫≥ng c·∫•p 5 sao! Butler ph·ª•c v·ª• t·∫≠n t√¨nh 24/7. B√£i bi·ªÉn ri√™ng tuy·ªát ƒë·∫πp. ƒê√°ng t·ª´ng ƒë·ªìng!',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 5,
        valueRating: 5,
      },
      {
        listingId: listing5.id,
        reviewerId: guest1.id,
        revieweeId: host1.id,
        bookingId: booking5.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Nh√† c·ªï H·ªôi An r·∫•t ƒë·∫πp v√† authentic. G·∫ßn ph·ªë c·ªï nh∆∞ng v·∫´n y√™n tƒ©nh. Tr·∫£i nghi·ªám tuy·ªát v·ªùi!',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 5,
        valueRating: 5,
      },
    ]
  })

  console.log('‚úÖ Reviews created')

  // Create Disputes (sample)
  console.log('‚öñÔ∏è Creating disputes...')
  await prismaAny.dispute.create({
    data: {
      bookingId: booking2.id,
      reporterId: guest2.id,
      respondentId: host1.id,
      type: 'REFUND_REQUEST',
      status: 'RESOLVED',
      priority: 'MEDIUM',
      subject: 'Y√™u c·∫ßu ho√†n ti·ªÅn',
      description: 'Ph√≤ng kh√¥ng ƒë√∫ng nh∆∞ m√¥ t·∫£, y√™u c·∫ßu ho√†n ti·ªÅn m·ªôt ph·∫ßn.',
      evidence: [],
      resolution: 'ƒê√£ ho√†n ti·ªÅn 50% cho kh√°ch h√†ng',
      resolvedBy: admin.id,
      resolvedAt: new Date(),
      refundAmount: booking2.totalPrice * 0.5,
    },
  })

  console.log('‚úÖ Disputes created')

  // Create Audit Logs
  console.log('üìã Creating audit logs...')
  await prismaAny.auditLog.createMany({
    data: [
      {
        userId: admin.id,
        action: 'CREATE_USER',
        entityType: 'User',
        entityId: guest1.id,
        changes: { email: 'khach1@gmail.com', role: 'GUEST' },
        ipAddress: '127.0.0.1',
        userAgent: 'Seed Script',
      },
      {
        userId: admin.id,
        action: 'UPDATE_LISTING',
        entityType: 'Listing',
        entityId: listing1.id,
        changes: { status: 'ACTIVE', featured: true },
        ipAddress: '127.0.0.1',
        userAgent: 'Seed Script',
      },
    ],
  })

  console.log('‚úÖ Audit logs created')

  console.log('üéâ Database seeding completed!')
  console.log('\nüìä Summary:')
  console.log(`- Users: ${await prisma.user.count()}`)
  console.log(`- Listings: ${await prisma.listing.count()}`)
  console.log(`- Bookings: ${await prisma.booking.count()}`)
  console.log(`- Reviews: ${await prisma.review.count()}`)
  console.log(`- Amenities: ${await prismaAny.amenity.count()}`)
  console.log(`- Host Profiles: ${await prismaAny.hostProfile.count()}`)
  console.log(`- Payments: ${await prismaAny.payment.count()}`)
  console.log(`- Messages: ${await prismaAny.message.count()}`)
  console.log(`- Notifications: ${await prismaAny.notification.count()}`)
  console.log(`- Services: ${await prismaAny.service.count()}`)
  console.log(`- Posts: ${await prismaAny.post.count()}`)
  console.log(`- Experiences: ${await prismaAny.experience.count()}`)
  console.log(`- Concierge Plans: ${await prismaAny.conciergePlan.count()}`)
  console.log(`- User Quests: ${await prismaAny.userQuest.count()}`)
  console.log(`- System Settings: ${await prismaAny.systemSetting.count()}`)
  console.log(`- Reward Catalog Items: ${await prismaAny.rewardCatalogItem.count()}`)
  console.log(`- Promotions/Vouchers: ${await prisma.promotion.count()}`)
  console.log('\n‚ú® Featured Listings:')
  console.log('  ‚Ä¢ Villa Nha Trang (4.9‚≠ê)')
  console.log('  ‚Ä¢ Bi·ªát th·ª± ƒê√† L·∫°t (4.8‚≠ê)')
  console.log('  ‚Ä¢ Resort Ph√∫ Qu·ªëc (5.0‚≠ê)')
  console.log('  ‚Ä¢ Condo V≈©ng T√†u (4.8‚≠ê)')
  console.log('  ‚Ä¢ Cabin Sapa (4.9‚≠ê)')
  console.log('\n‚úÖ All done!')
}

main()
  .catch((e) => {
    console.error('‚ùå Error seeding database:', e)
    // @ts-ignore - process is available in Node.js runtime
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
