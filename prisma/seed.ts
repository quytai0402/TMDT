import {
  PrismaClient,
  QuestType,
  QuestCategory,
  PromotionType,
  PromotionSource,
  DiscountType,
  LoyaltyTier,
  PropertyType,
} from '@prisma/client'
import type { Prisma } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()
const prismaAny = prisma as any

const ensureJsonObject = (value: Prisma.JsonValue | null | undefined): Prisma.JsonObject => {
  if (value && typeof value === 'object' && !Array.isArray(value)) {
    return value as Prisma.JsonObject
  }

  return {}
}

async function main() {
  console.log('üå± Starting database seeding...')

  // Clean existing data (optional - uncomment if you want to reset)
  // await prisma.$transaction([
  //   prisma.booking.deleteMany(),
  //   prisma.review.deleteMany(),
  //   prisma.listing.deleteMany(),
  //   prisma.user.deleteMany(),
  // ])

  // Create Users
  console.log('üë• Creating users...')
  
  const hashedPassword = await bcrypt.hash('password123', 10)

  const admin = await prisma.user.upsert({
    where: { email: 'admin@luxestay.com' },
    update: {},
    create: {
      email: 'admin@luxestay.com',
      name: 'Admin LuxeStay',
      password: hashedPassword,
      role: 'ADMIN',
      isHost: true,
      emailVerified: new Date(),
      phone: '0901234567',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=admin',
      bio: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng LuxeStay',
      referralCode: 'ADMIN2024',
    }
  })

  const host1 = await prisma.user.upsert({
    where: { email: 'nguyen.minh.anh@gmail.com' },
    update: {},
    create: {
      email: 'nguyen.minh.anh@gmail.com',
      name: 'Nguy·ªÖn Minh Anh',
      password: hashedPassword,
      role: 'HOST',
      isHost: true,
      isSuperHost: true,
      emailVerified: new Date(),
      phone: '0912345678',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=host1',
      bio: 'Super Host v·ªõi h∆°n 5 nƒÉm kinh nghi·ªám cho thu√™ homestay t·∫°i ƒê√† L·∫°t v√† Nha Trang',
      languages: ['Ti·∫øng Vi·ªát', 'English', 'ÌïúÍµ≠Ïñ¥'],
      referralCode: 'HOST1ANH',
    }
  })

  const host2 = await prisma.user.upsert({
    where: { email: 'tran.van.binh@gmail.com' },
    update: {},
    create: {
      email: 'tran.van.binh@gmail.com',
      name: 'Tr·∫ßn VƒÉn B√¨nh',
      password: hashedPassword,
      role: 'HOST',
      isHost: true,
      emailVerified: new Date(),
      phone: '0923456789',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=host2',
      bio: 'Ch·ªß s·ªü h·ªØu c√°c villa cao c·∫•p t·∫°i Ph√∫ Qu·ªëc',
      languages: ['Ti·∫øng Vi·ªát', 'English'],
      referralCode: 'HOST2BINH',
    }
  })

  const guest1 = await prisma.user.upsert({
    where: { email: 'khach1@gmail.com' },
    update: {},
    create: {
      email: 'khach1@gmail.com',
      name: 'L√™ Th·ªã Thu',
      password: hashedPassword,
      role: 'GUEST',
      emailVerified: new Date(),
      phone: '0934567890',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=guest1',
      referralCode: 'GUESTTHU',
    }
  })

  const guest2 = await prisma.user.upsert({
    where: { email: 'khach2@gmail.com' },
    update: {},
    create: {
      email: 'khach2@gmail.com',
      name: 'Ph·∫°m ƒê·ª©c H·∫£i',
      password: hashedPassword,
      role: 'GUEST',
      emailVerified: new Date(),
      phone: '0945678901',
      image: 'https://api.dicebear.com/7.x/avataaars/svg?seed=guest2',
      referralCode: 'GUESTHAI',
    }
  })

  console.log('‚úÖ Users created')

  console.log('üéÅ Configuring rewards program...')

  const badgeConfigs: Array<{
    slug: string
    name: string
    description?: string
    tier?: string
    icon?: string
    color?: string
    pointsRequired?: number
    isLimited?: boolean
  }> = [
    {
      slug: 'bronze-explorer',
      name: 'Bronze Explorer',
      description: 'Kh·ªüi ƒë·ªông h√†nh tr√¨nh c√πng LuxeStay v·ªõi nh·ªØng ∆∞u ƒë√£i ƒë·∫ßu ti√™n.',
      tier: 'BRONZE',
      icon: 'üß≠',
      color: '#CD7F32',
    },
    {
      slug: 'silver-jetsetter',
      name: 'Silver Jetsetter',
      description: 'ƒê·∫°t m·ªëc ƒëi·ªÉm th∆∞·ªüng ƒë·ªÉ unlock ∆∞u ƒë√£i linh ho·∫°t h∆°n.',
      tier: 'SILVER',
      icon: '‚úàÔ∏è',
      color: '#C0C0C0',
    },
    {
      slug: 'gold-ambassador',
      name: 'Gold Ambassador',
      description: 'Th√†nh vi√™n trung th√†nh v·ªõi quy·ªÅn l·ª£i n√¢ng c·∫•p v√† d·ªãch v·ª• ∆∞u ti√™n.',
      tier: 'GOLD',
      icon: 'üëë',
      color: '#D4AF37',
    },
    {
      slug: 'loyalty-trailblazer',
      name: 'Loyalty Trailblazer',
      description: 'Ho√†n th√†nh c√°c nhi·ªám v·ª• trung th√†nh ƒë·∫∑c bi·ªát.',
      icon: 'üî•',
      pointsRequired: 3000,
      color: '#FF6B35',
      isLimited: true,
    },
  ] as const

  const badgeRecords = await Promise.all(
    badgeConfigs.map((badge) =>
      prismaAny.rewardBadge.upsert({
        where: { slug: badge.slug },
        update: {
          name: badge.name,
          description: badge.description,
          tier: badge.tier ?? null,
          pointsRequired: badge.pointsRequired ?? null,
          icon: badge.icon ?? null,
          color: badge.color ?? null,
          isLimited: badge.isLimited ?? false,
        },
        create: {
          slug: badge.slug,
          name: badge.name,
          description: badge.description,
          tier: badge.tier ?? null,
          pointsRequired: badge.pointsRequired ?? null,
          icon: badge.icon ?? null,
          color: badge.color ?? null,
          isLimited: badge.isLimited ?? false,
        },
      })
    )
  )

  const badgeMap = new Map<string, (typeof badgeRecords)[number]>()
  badgeRecords.forEach((badge: any) => {
    badgeMap.set(badge.slug, badge)
  })

  const tierConfigs: Array<{
    tier: string
    name: string
    description?: string
    minPoints: number
    maxPoints: number | null
    bonusMultiplier: number
    benefits: string[]
    displayOrder: number
    badgeSlug?: string
  }> = [
    {
      tier: 'BRONZE',
      name: 'Bronze Explorer',
      minPoints: 0,
      maxPoints: 999,
      bonusMultiplier: 1,
      benefits: [
        'Gi·∫£m gi√° 5% cho booking ƒë·∫ßu ti√™n',
        '∆Øu ti√™n h·ªó tr·ª£ qua chat',
      ],
      displayOrder: 1,
      badgeSlug: 'bronze-explorer',
    },
    {
      tier: 'SILVER',
      name: 'Silver Voyager',
      minPoints: 1000,
      maxPoints: 2999,
      bonusMultiplier: 1.05,
      benefits: [
        'T√≠ch lu·ªπ ƒëi·ªÉm nhanh h∆°n 5%',
        '∆Øu ƒë√£i check-in s·ªõm tu·ª≥ ch·ªçn',
        'T·∫∑ng qu√† sinh nh·∫≠t ƒë·∫∑c bi·ªát',
      ],
      displayOrder: 2,
      badgeSlug: 'silver-jetsetter',
    },
    {
      tier: 'GOLD',
      name: 'Gold Ambassador',
      minPoints: 3000,
      maxPoints: 6999,
      bonusMultiplier: 1.1,
      benefits: [
        'T√≠ch lu·ªπ ƒëi·ªÉm nhanh h∆°n 10%',
        '∆Øu ti√™n n√¢ng h·∫°ng ph√≤ng khi c√≤n ch·ªó',
        'ƒê∆∞·ªùng d√¢y h·ªó tr·ª£ ri√™ng',
      ],
      displayOrder: 3,
      badgeSlug: 'gold-ambassador',
    },
    {
      tier: 'PLATINUM',
      name: 'Platinum Elite',
      minPoints: 7000,
      maxPoints: 11999,
      bonusMultiplier: 1.2,
      benefits: [
        'T√≠ch lu·ªπ ƒëi·ªÉm nhanh h∆°n 20%',
        '∆Øu ƒë√£i check-out tr·ªÖ mi·ªÖn ph√≠',
        'T·∫∑ng ƒë√™m ngh·ªâ mi·ªÖn ph√≠ m·ªói nƒÉm',
      ],
      displayOrder: 4,
    },
    {
      tier: 'DIAMOND',
      name: 'Diamond Signature',
      minPoints: 12000,
      maxPoints: null,
      bonusMultiplier: 1.3,
      benefits: [
        'ChƒÉm s√≥c kh√°ch h√†ng 24/7 chuy√™n bi·ªát',
        'N√¢ng c·∫•p h·∫°ng ph√≤ng ƒë·∫£m b·∫£o',
        'Tr·∫£i nghi·ªám concierge c√° nh√¢n ho√°',
      ],
      displayOrder: 5,
    },
  ] as const

  await Promise.all(
    tierConfigs.map((tier) =>
  prismaAny.rewardTier.upsert({
        where: { tier: tier.tier },
        update: {
          name: tier.name,
          description: tier.description ?? null,
          minPoints: tier.minPoints,
          maxPoints: tier.maxPoints,
          bonusMultiplier: tier.bonusMultiplier,
          benefits: tier.benefits,
          displayOrder: tier.displayOrder,
          badgeId: tier.badgeSlug ? badgeMap.get(tier.badgeSlug)?.id ?? null : null,
        },
        create: {
          tier: tier.tier,
          name: tier.name,
          description: tier.description ?? null,
          minPoints: tier.minPoints,
          maxPoints: tier.maxPoints,
          bonusMultiplier: tier.bonusMultiplier,
          benefits: tier.benefits,
          displayOrder: tier.displayOrder,
          badgeId: tier.badgeSlug ? badgeMap.get(tier.badgeSlug)?.id ?? null : null,
        },
      })
    )
  )


  const membershipPlanConfigs = [
    {
      slug: 'luxe-silver',
      name: 'Luxe Silver',
      tagline: '∆Øu ƒë√£i linh ho·∫°t cho kh√°ch th√¢n thi·∫øt',
      description: 'Gi·∫£m gi√° c∆° b·∫£n v√† quy·ªÅn l·ª£i ∆∞u ti√™n khi ƒë·∫∑t homestay tr√™n LuxeStay.',
      icon: 'ü•à',
      color: '#B0BEC5',
      monthlyPrice: 299000,
      annualPrice: 2990000,
      savings: 10,
      isPopular: false,
      features: [
        'Gi·∫£m 5% cho m·ªçi booking',
        '∆Øu ti√™n h·ªó tr·ª£ qua chat',
        'Mi·ªÖn ph√≠ n√¢ng h·∫°ng cu·ªëi tu·∫ßn (tu·ª≥ t√¨nh tr·∫°ng ph√≤ng)',
      ],
      exclusiveFeatures: [
        'Mi·ªÖn ph√≠ check-in s·ªõm (tu·ª≥ t√¨nh tr·∫°ng ph√≤ng)',
      ],
      bookingDiscountRate: 5,
      applyDiscountToServices: false,
      displayOrder: 1,
    },
    {
      slug: 'luxe-gold',
      name: 'Luxe Gold',
      tagline: 'Tr·∫£i nghi·ªám n√¢ng h·∫°ng v√† d·ªãch v·ª• concierge',
      description: 'ƒê∆∞·ª£c thi·∫øt k·∫ø cho kh√°ch h√†ng trung th√†nh v·ªõi nhu c·∫ßu n√¢ng h·∫°ng ph√≤ng v√† d·ªãch v·ª• cao c·∫•p.',
      icon: 'ü•á',
      color: '#F1C40F',
      monthlyPrice: 499000,
      annualPrice: 4990000,
      savings: 15,
      isPopular: true,
      features: [
        'Gi·∫£m 10% cho m·ªçi booking',
        'Priority concierge 24/7',
        'Mi·ªÖn ph√≠ n√¢ng h·∫°ng ph√≤ng khi c√≤n tr·ªëng',
      ],
      exclusiveFeatures: [
        'T·∫∑ng 1 voucher spa m·ªói qu√Ω',
        'Gi·∫£m 10% cho d·ªãch v·ª• b·ªï sung',
      ],
      bookingDiscountRate: 10,
      applyDiscountToServices: true,
      displayOrder: 2,
    },
    {
      slug: 'luxe-platinum',
      name: 'Luxe Platinum',
      tagline: 'Quy·ªÅn l·ª£i ƒë·ªôc quy·ªÅn & concierge c√° nh√¢n ho√°',
      description: 'T·ªëi ∆∞u cho kh√°ch doanh nh√¢n v√† gia ƒë√¨nh cao c·∫•p c·∫ßn d·ªãch v·ª• ri√™ng bi·ªát.',
      icon: 'üíé',
      color: '#8E24AA',
      monthlyPrice: 899000,
      annualPrice: 8990000,
      savings: 20,
      isPopular: false,
      features: [
        'Gi·∫£m 12% cho m·ªçi booking',
        'Concierge c√° nh√¢n ho√°',
        '∆Øu ti√™n check-in/out linh ho·∫°t',
      ],
      exclusiveFeatures: [
        'T·∫∑ng 1 ƒë√™m mi·ªÖn ph√≠ m·ªói nƒÉm',
        'Gi·∫£m 15% cho d·ªãch v·ª• b·ªï sung',
        'Tr·∫£i nghi·ªám partner cao c·∫•p',
      ],
      bookingDiscountRate: 12,
      applyDiscountToServices: true,
      displayOrder: 3,
    },
  ]

  const membershipPlanRecords = await Promise.all(
    membershipPlanConfigs.map((plan) =>
      prisma.membershipPlan.upsert({
        where: { slug: plan.slug },
        update: {
          name: plan.name,
          tagline: plan.tagline ?? null,
          description: plan.description ?? null,
          icon: plan.icon ?? null,
          color: plan.color ?? null,
          monthlyPrice: plan.monthlyPrice,
          annualPrice: plan.annualPrice,
          savings: plan.savings ?? null,
          isPopular: plan.isPopular ?? false,
          features: plan.features,
          exclusiveFeatures: plan.exclusiveFeatures,
          bookingDiscountRate: plan.bookingDiscountRate,
          applyDiscountToServices: plan.applyDiscountToServices,
          displayOrder: plan.displayOrder,
        },
        create: {
          slug: plan.slug,
          name: plan.name,
          tagline: plan.tagline ?? null,
          description: plan.description ?? null,
          icon: plan.icon ?? null,
          color: plan.color ?? null,
          monthlyPrice: plan.monthlyPrice,
          annualPrice: plan.annualPrice,
          savings: plan.savings ?? null,
          isPopular: plan.isPopular ?? false,
          features: plan.features,
          exclusiveFeatures: plan.exclusiveFeatures,
          bookingDiscountRate: plan.bookingDiscountRate,
          applyDiscountToServices: plan.applyDiscountToServices,
          displayOrder: plan.displayOrder,
        },
      })
    )
  )

  const membershipPlanMap = new Map<string, (typeof membershipPlanRecords)[number]>()
  membershipPlanRecords.forEach((plan) => membershipPlanMap.set(plan.slug, plan))

  const goldPlan = membershipPlanMap.get('luxe-gold')
  if (goldPlan) {
    const nowTimestamp = new Date()
    const nextYear = new Date(nowTimestamp)
    nextYear.setFullYear(nextYear.getFullYear() + 1)

    await prisma.user.update({
      where: { id: guest1.id },
      data: {
        membershipPlanId: goldPlan.id,
        membershipStatus: 'ACTIVE',
        membershipStartedAt: nowTimestamp,
        membershipExpiresAt: nextYear,
        membershipBillingCycle: 'ANNUAL',
        membershipFeatures: [...goldPlan.features, ...goldPlan.exclusiveFeatures],
        loyaltyPoints: 4800,
        loyaltyTier: 'GOLD',
      },
    })
  }

  const actionConfigs: Array<{
    slug: string
    title: string
    description?: string
    type: string
    source: string
    points: number
    maxTimesPerDay?: number
    maxTimesPerWeek?: number
    cooldownHours?: number
    isRecurring?: boolean
    badgeSlug?: string
  }> = [
    {
      slug: 'booking-completed',
      title: 'Ho√†n t·∫•t ƒë·∫∑t ph√≤ng',
      description: 'Nh·∫≠n ƒëi·ªÉm th∆∞·ªüng khi ho√†n t·∫•t m·ªói ƒë∆°n ƒë·∫∑t ph√≤ng.',
      type: 'BOOKING_COMPLETED',
      source: 'BOOKING',
      points: 400,
      maxTimesPerDay: 5,
    },
    {
      slug: 'review-submitted',
      title: 'ƒê√°nh gi√° sau chuy·∫øn ƒëi',
      description: 'Chia s·∫ª tr·∫£i nghi·ªám ƒë·ªÉ nh·∫≠n ƒëi·ªÉm th∆∞·ªüng.',
      type: 'REVIEW_SUBMITTED',
      source: 'REVIEW',
      points: 150,
      maxTimesPerDay: 3,
    },
    {
      slug: 'daily-check-in',
      title: 'ƒêi·ªÉm danh m·ªói ng√†y',
      description: 'ƒêƒÉng nh·∫≠p ·ª©ng d·ª•ng m·ªói ng√†y ƒë·ªÉ nh·∫≠n ƒëi·ªÉm.',
      type: 'DAILY_CHECK_IN',
      source: 'DAILY',
      points: 25,
      maxTimesPerDay: 1,
      cooldownHours: 24,
      isRecurring: true,
    },
    {
      slug: 'quest-completion',
      title: 'Ho√†n th√†nh nhi·ªám v·ª•',
      description: 'Khi ho√†n th√†nh m·ªôt quest trong trung t√¢m nhi·ªám v·ª•.',
      type: 'QUEST_COMPLETED',
      source: 'QUEST',
      points: 300,
      badgeSlug: 'loyalty-trailblazer',
    },
  ] as const

  const actionRecords = await Promise.all(
    actionConfigs.map((action) =>
      prismaAny.rewardAction.upsert({
        where: { slug: action.slug },
        update: {
          title: action.title,
          description: action.description,
          type: action.type,
          source: action.source,
          points: action.points,
          maxTimesPerDay: action.maxTimesPerDay ?? null,
          maxTimesPerWeek: action.maxTimesPerWeek ?? null,
          cooldownHours: action.cooldownHours ?? null,
          isRecurring: action.isRecurring ?? true,
          isActive: true,
          badgeId: action.badgeSlug ? badgeMap.get(action.badgeSlug)?.id ?? null : null,
        },
        create: {
          slug: action.slug,
          title: action.title,
          description: action.description,
          type: action.type,
          source: action.source,
          points: action.points,
          maxTimesPerDay: action.maxTimesPerDay ?? null,
          maxTimesPerWeek: action.maxTimesPerWeek ?? null,
          cooldownHours: action.cooldownHours ?? null,
          isRecurring: action.isRecurring ?? true,
          isActive: true,
          badgeId: action.badgeSlug ? badgeMap.get(action.badgeSlug)?.id ?? null : null,
        },
      })
    )
  )

  const actionMap = new Map<string, (typeof actionRecords)[number]>()
  actionRecords.forEach((action: any) => {
    actionMap.set(action.slug, action)
  })

  const questConfigs: Array<{
    title: string
    description: string
    type: QuestType
    category: QuestCategory
    targetCount: number
    rewardPoints: number
    rewardBadgeSlug?: string
    isDaily?: boolean
    isWeekly?: boolean
    icon?: string
    color?: string
  }> = [
    {
      title: 'ƒê·∫∑t ph√≤ng ƒë·∫ßu ti√™n',
      description: 'Ho√†n t·∫•t ƒë∆°n ƒë·∫∑t ph√≤ng ƒë·∫ßu ti√™n c√πng LuxeStay.',
      type: QuestType.BOOKING,
      category: QuestCategory.ONBOARDING,
      targetCount: 1,
      rewardPoints: 400,
      rewardBadgeSlug: 'bronze-explorer',
      icon: 'üß≥',
      color: '#0EA5E9',
    },
    {
      title: 'Vi·∫øt 3 ƒë√°nh gi√° ch√¢n th√†nh',
      description: 'Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n sau m·ªói chuy·∫øn ƒëi.',
      type: QuestType.REVIEW,
      category: QuestCategory.ENGAGEMENT,
      targetCount: 3,
      rewardPoints: 450,
      rewardBadgeSlug: 'silver-jetsetter',
      icon: 'üìù',
      color: '#F97316',
    },
    {
      title: 'ƒêi·ªÉm danh 5 ng√†y li√™n ti·∫øp',
      description: 'ƒêƒÉng nh·∫≠p LuxeStay li√™n t·ª•c 5 ng√†y ƒë·ªÉ duy tr√¨ streak.',
      type: QuestType.DAILY_CHECK_IN,
      category: QuestCategory.LOYALTY,
      targetCount: 5,
      rewardPoints: 300,
      rewardBadgeSlug: 'silver-jetsetter',
      isDaily: true,
      icon: 'üìÖ',
      color: '#6366F1',
    },
    {
      title: 'Kh√°m ph√° 10 homestay ti·ªÅm nƒÉng',
      description: 'L∆∞u ho·∫∑c xem chi ti·∫øt 10 homestay th√¢n thi·ªán.',
      type: QuestType.EXPLORATION,
      category: QuestCategory.SOCIAL,
      targetCount: 10,
      rewardPoints: 350,
      icon: 'üó∫Ô∏è',
      color: '#22C55E',
    },
    {
      title: 'Chia s·∫ª 3 homestay v·ªõi b·∫°n b√®',
      description: 'Gi·ªõi thi·ªáu homestay y√™u th√≠ch c·ªßa b·∫°n t·ªõi c·ªông ƒë·ªìng.',
      type: QuestType.SOCIAL,
      category: QuestCategory.SOCIAL,
      targetCount: 3,
      rewardPoints: 280,
      icon: 'ü§ù',
      color: '#EC4899',
    },
  ]

  for (const quest of questConfigs) {
    const existingQuest = await prisma.quest.findFirst({
      where: { title: quest.title },
    })

    const questData = {
      title: quest.title,
      description: quest.description,
      type: quest.type,
      category: quest.category,
      targetCount: quest.targetCount,
      rewardPoints: quest.rewardPoints,
      rewardBadge: quest.rewardBadgeSlug ? badgeMap.get(quest.rewardBadgeSlug)?.name ?? null : null,
      rewardBadgeId: quest.rewardBadgeSlug ? badgeMap.get(quest.rewardBadgeSlug)?.id ?? null : null,
      isDaily: quest.isDaily ?? false,
      isWeekly: quest.isWeekly ?? false,
      isActive: true,
      icon: quest.icon ?? null,
      color: quest.color ?? null,
    }

    if (existingQuest) {
      await prisma.quest.update({
        where: { id: existingQuest.id },
        data: questData,
      })
    } else {
      await prisma.quest.create({
        data: questData,
      })
    }
  }

  const catalogConfigs: Array<{
    slug: string
    name: string
    description?: string
    category: string
    pointsCost: number
    image?: string
    terms?: string
  }> = [
    {
      slug: 'weekend-upgrade',
      name: 'N√¢ng h·∫°ng cu·ªëi tu·∫ßn',
      description: 'ƒê·ªïi 2.000 ƒëi·ªÉm ƒë·ªÉ ƒë∆∞·ª£c n√¢ng h·∫°ng ph√≤ng kh·∫£ d·ª•ng cu·ªëi tu·∫ßn.',
      category: 'UPGRADE',
      pointsCost: 2000,
      image: 'https://images.unsplash.com/photo-1505691723518-36a5ac3be353?w=1200',
      terms: '√Åp d·ª•ng cho booking t·ªëi thi·ªÉu 2 ƒë√™m, tu·ª≥ t√¨nh tr·∫°ng ph√≤ng.',
    },
    {
      slug: 'airport-pickup',
      name: 'ƒê∆∞a ƒë√≥n s√¢n bay mi·ªÖn ph√≠',
      description: 'ƒê·ªïi 3.500 ƒëi·ªÉm cho d·ªãch v·ª• ƒë∆∞a ƒë√≥n s√¢n bay m·ªôt chi·ªÅu.',
      category: 'EXPERIENCE',
      pointsCost: 3500,
      image: 'https://images.unsplash.com/photo-1502877338535-766e1452684a?w=1200',
      terms: 'C·∫ßn ƒë·∫∑t t·ªëi thi·ªÉu tr∆∞·ªõc 48 gi·ªù so v·ªõi l·ªãch bay.',
    },
    {
      slug: 'spa-credit',
      name: 'Phi·∫øu spa 60 ph√∫t',
      description: 'Th∆∞ gi√£n v·ªõi li·ªáu tr√¨nh spa t·∫°i ƒë·ªëi t√°c c·ªßa LuxeStay.',
      category: 'VOUCHER',
      pointsCost: 2500,
      image: 'https://images.unsplash.com/photo-1519823551278-64ac92734fb1?w=1200',
      terms: 'C√≥ hi·ªáu l·ª±c trong 60 ng√†y k·ªÉ t·ª´ khi ƒë·ªïi.',
    },
  ] as const

  await Promise.all(
    catalogConfigs.map((reward) =>
  prismaAny.rewardCatalogItem.upsert({
        where: { slug: reward.slug },
        update: {
          name: reward.name,
          description: reward.description,
          category: reward.category,
          pointsCost: reward.pointsCost,
          image: reward.image ?? null,
          terms: reward.terms ?? null,
          isActive: true,
        },
        create: {
          slug: reward.slug,
          name: reward.name,
          description: reward.description,
          category: reward.category,
          pointsCost: reward.pointsCost,
          image: reward.image ?? null,
          terms: reward.terms ?? null,
          isActive: true,
        },
      })
    )
  )

  console.log('ü™ô Creating sample reward histories...')

  const bookingAction = actionMap.get('booking-completed')
  const reviewAction = actionMap.get('review-submitted')

  if (bookingAction && reviewAction) {
  await prismaAny.rewardTransaction.deleteMany({
      where: {
        userId: { in: [guest1.id, guest2.id] },
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest1.id,
        actionId: bookingAction.id,
        transactionType: 'CREDIT',
        source: 'BOOKING',
        points: 1200,
        balanceAfter: 1200,
        description: 'ƒêi·ªÉm th∆∞·ªüng cho booking ƒë·∫ßu ti√™n.',
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest1.id,
        actionId: reviewAction.id,
        transactionType: 'CREDIT',
        source: 'REVIEW',
        points: 300,
        balanceAfter: 1500,
        description: 'ƒêi·ªÉm th∆∞·ªüng khi g·ª≠i ƒë√°nh gi√°.',
      },
    })

    await prisma.user.update({
      where: { id: guest1.id },
      data: {
        loyaltyPoints: 1500,
        loyaltyTier: 'SILVER',
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest2.id,
        actionId: bookingAction.id,
        transactionType: 'CREDIT',
        source: 'BOOKING',
        points: 1600,
        balanceAfter: 1600,
        description: 'ƒêi·ªÉm th∆∞·ªüng cho k·ª≥ ngh·ªâ d√†i ng√†y.',
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest2.id,
        actionId: bookingAction.id,
        transactionType: 'CREDIT',
        source: 'BOOKING',
        points: 1800,
        balanceAfter: 3400,
        description: 'ƒêi·ªÉm th∆∞·ªüng cho booking villa cao c·∫•p.',
      },
    })

  await prismaAny.rewardTransaction.create({
      data: {
        userId: guest2.id,
        actionId: reviewAction.id,
        transactionType: 'CREDIT',
        source: 'REVIEW',
        points: 400,
        balanceAfter: 3800,
        description: 'ƒêi·ªÉm th∆∞·ªüng cho b√†i review chi ti·∫øt.',
      },
    })

    await prisma.user.update({
      where: { id: guest2.id },
      data: {
        loyaltyPoints: 3800,
        loyaltyTier: 'GOLD',
      },
    })

    const silverBadge = badgeMap.get('silver-jetsetter')
    const goldBadge = badgeMap.get('gold-ambassador')

    if (silverBadge) {
  await prismaAny.userBadge.upsert({
        where: {
          userId_badgeId: {
            userId: guest1.id,
            badgeId: silverBadge.id,
          },
        },
        update: {},
        create: {
          userId: guest1.id,
          badgeId: silverBadge.id,
          source: 'QUEST',
        },
      })
    }

    if (goldBadge) {
  await prismaAny.userBadge.upsert({
        where: {
          userId_badgeId: {
            userId: guest2.id,
            badgeId: goldBadge.id,
          },
        },
        update: {},
        create: {
          userId: guest2.id,
          badgeId: goldBadge.id,
          source: 'BOOKING',
        },
      })
    }
  }

  console.log('‚úÖ Rewards program configured')

  // Create Listings
  console.log('üè† Creating listings...')

  const listing1 = await prisma.listing.upsert({
    where: { slug: 'villa-sang-trong-view-bien-nha-trang' },
    update: {},
    create: {
      hostId: host1.id,
      title: 'Villa Sang Tr·ªçng View Bi·ªÉn Nha Trang',
      slug: 'villa-sang-trong-view-bien-nha-trang',
      description: 'Villa 4 ph√≤ng ng·ªß tuy·ªát ƒë·∫πp v·ªõi view bi·ªÉn to√†n c·∫£nh Nha Trang. Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, ƒë·∫ßy ƒë·ªß ti·ªán nghi cao c·∫•p. H·ªì b∆°i ri√™ng, BBQ ngo√†i tr·ªùi. C√°ch b√£i bi·ªÉn ch·ªâ 2 ph√∫t ƒëi b·ªô.',
      propertyType: 'VILLA',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 10,
      bedrooms: 4,
      beds: 5,
      bathrooms: 3.5,
      country: 'Vi·ªát Nam',
      city: 'Nha Trang',
      state: 'Kh√°nh H√≤a',
      address: '123 Tr·∫ßn Ph√∫, L·ªôc Th·ªç',
      zipCode: '650000',
      latitude: 12.2388,
      longitude: 109.1967,
      neighborhood: 'B√£i bi·ªÉn Tr·∫ßn Ph√∫',
      basePrice: 3500000,
      cleaningFee: 500000,
      serviceFee: 350000,
      weeklyDiscount: 10,
      monthlyDiscount: 20,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1582268611958-ebfd161ef9cf?w=1200',
        'https://images.unsplash.com/photo-1613490493576-7fde63acd811?w=1200',
        'https://images.unsplash.com/photo-1615873968403-89e068629265?w=1200',
        'https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?w=1200',
        'https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 2,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: true,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'VillaNhaTrang_5G',
      wifiPassword: 'welcome2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.9,
      totalReviews: 127,
      totalBookings: 89,
      occupancyRate: 85,
      publishedAt: new Date(),
    }
  })

  const listing2 = await prisma.listing.create({
    data: {
      hostId: host1.id,
      title: 'Bi·ªát Th·ª± ƒê√† L·∫°t View ƒê·ªìi Th√¥ng',
      slug: 'biet-thu-da-lat-view-doi-thong',
      description: 'Bi·ªát th·ª± phong c√°ch ch√¢u √Çu gi·ªØa l√≤ng ƒê√† L·∫°t. 3 ph√≤ng ng·ªß r·ªông r√£i, l√≤ s∆∞·ªüi, b·∫øp ƒë·∫ßy ƒë·ªß. Khu v∆∞·ªùn hoa ƒë·∫πp, view ƒë·ªìi th√¥ng th∆° m·ªông. G·∫ßn ch·ª£ ƒê√† L·∫°t 5 ph√∫t l√°i xe.',
      propertyType: 'VILLA',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 8,
      bedrooms: 3,
      beds: 4,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'ƒê√† L·∫°t',
      state: 'L√¢m ƒê·ªìng',
      address: '45 ƒê∆∞·ªùng Tr·∫ßn H∆∞ng ƒê·∫°o',
      zipCode: '670000',
      latitude: 11.9404,
      longitude: 108.4583,
      neighborhood: 'Trung t√¢m ƒê√† L·∫°t',
      basePrice: 2800000,
      cleaningFee: 400000,
      serviceFee: 280000,
      weeklyDiscount: 15,
      monthlyDiscount: 25,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1600585154340-be6161a56a0c?w=1200',
        'https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?w=1200',
        'https://images.unsplash.com/photo-1600566753086-00f18fb6b3ea?w=1200',
        'https://images.unsplash.com/photo-1600573472550-8090b5e0745e?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 14,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: true,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'DaLatVilla',
      wifiPassword: 'dalat123',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.8,
      totalReviews: 95,
      totalBookings: 76,
      occupancyRate: 78,
      publishedAt: new Date(),
    }
  })

  const listing3 = await prisma.listing.create({
    data: {
      hostId: host2.id,
      title: 'Resort Ph√∫ Qu·ªëc B√£i Sao - Villa Bi·ªÉn',
      slug: 'resort-phu-quoc-bai-sao-villa-bien',
      description: 'Villa 5 sao ngay b√£i Sao Ph√∫ Qu·ªëc. 5 ph√≤ng ng·ªß sang tr·ªçng, h·ªì b∆°i v√¥ c·ª±c, b·∫øp hi·ªán ƒë·∫°i. D·ªãch v·ª• butler 24/7. T·∫ßm nh√¨n bi·ªÉn tuy·ªát ƒë·∫πp, ri√™ng t∆∞ tuy·ªát ƒë·ªëi.',
      propertyType: 'VILLA',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 12,
      bedrooms: 5,
      beds: 6,
      bathrooms: 4,
      country: 'Vi·ªát Nam',
      city: 'Ph√∫ Qu·ªëc',
      state: 'Ki√™n Giang',
      address: 'B√£i Sao, An Th·ªõi',
      zipCode: '920000',
      latitude: 10.1699,
      longitude: 103.9676,
      neighborhood: 'B√£i Sao',
      basePrice: 8500000,
      cleaningFee: 1000000,
      serviceFee: 850000,
      weeklyDiscount: 10,
      monthlyDiscount: 20,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1571003123894-1f0594d2b5d9?w=1200',
        'https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?w=1200',
        'https://images.unsplash.com/photo-1571896349842-33c89424de2d?w=1200',
        'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=1200',
        'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=1200',
      ],
      amenities: [],
      checkInTime: '15:00',
      checkOutTime: '12:00',
      minNights: 3,
      maxNights: 30,
      instantBookable: false,
      cancellationPolicy: 'STRICT',
      allowPets: false,
      allowSmoking: false,
      allowEvents: true,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'PhuQuocResort_VIP',
      wifiPassword: 'resort2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 5.0,
      totalReviews: 68,
      totalBookings: 45,
      occupancyRate: 92,
      publishedAt: new Date(),
    }
  })

  const listing4 = await prisma.listing.create({
    data: {
      hostId: host2.id,
      title: 'Penthouse Saigon Landmark 81',
      slug: 'penthouse-saigon-landmark-81',
      description: 'Penthouse cao c·∫•p t·∫ßng 68 Landmark 81. 3 ph√≤ng ng·ªß, thi·∫øt k·∫ø sang tr·ªçng. View to√†n c·∫£nh S√†i G√≤n 360 ƒë·ªô. H·ªì b∆°i ri√™ng, ph√≤ng gym, r·∫°p phim mini.',
      propertyType: 'APARTMENT',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 6,
      bedrooms: 3,
      beds: 3,
      bathrooms: 3,
      country: 'Vi·ªát Nam',
      city: 'H·ªì Ch√≠ Minh',
      state: 'H·ªì Ch√≠ Minh',
      address: 'Landmark 81, 720A ƒêi·ªán Bi√™n Ph·ªß, B√¨nh Th·∫°nh',
      zipCode: '700000',
      latitude: 10.7946,
      longitude: 106.7218,
      neighborhood: 'Vinhomes Central Park',
      basePrice: 5500000,
      cleaningFee: 600000,
      serviceFee: 550000,
      weeklyDiscount: 10,
      monthlyDiscount: 15,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=1200',
        'https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=1200',
        'https://images.unsplash.com/photo-1493809842364-78817add7ffb?w=1200',
        'https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 1,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'Landmark81_Premium',
      wifiPassword: 'saigon2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.7,
      totalReviews: 82,
      totalBookings: 134,
      occupancyRate: 88,
      publishedAt: new Date(),
    }
  })

  const listing5 = await prisma.listing.create({
    data: {
      hostId: host1.id,
      title: 'Homestay H·ªôi An Ph·ªë C·ªï - Nh√† C·ªï Truy·ªÅn',
      slug: 'homestay-hoi-an-pho-co-nha-co-truyen',
      description: 'Nh√† c·ªï truy·ªÅn th·ªëng H·ªôi An ƒë∆∞·ª£c tr√πng tu. 2 ph√≤ng ng·ªß, s√¢n v∆∞·ªùn nh·ªè, gi·∫øng tr·ªùi. C√°ch ph·ªë c·ªï 3 ph√∫t ƒëi b·ªô. Tr·∫£i nghi·ªám vƒÉn h√≥a Vi·ªát Nam ƒë√≠ch th·ª±c.',
      propertyType: 'HOUSE',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 4,
      bedrooms: 2,
      beds: 2,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'H·ªôi An',
      state: 'Qu·∫£ng Nam',
      address: '89 Tr·∫ßn Ph√∫, Minh An',
      zipCode: '560000',
      latitude: 15.8801,
      longitude: 108.3380,
      neighborhood: 'Ph·ªë c·ªï H·ªôi An',
      basePrice: 1200000,
      cleaningFee: 200000,
      serviceFee: 120000,
      weeklyDiscount: 15,
      monthlyDiscount: 25,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=1200',
        'https://images.unsplash.com/photo-1600585154526-990dced4db0d?w=1200',
        'https://images.unsplash.com/photo-1600566753190-17f0baa2a6c3?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 14,
      instantBookable: true,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'HoiAn_Homestay',
      wifiPassword: 'hoian123',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.9,
      totalReviews: 156,
      totalBookings: 201,
      occupancyRate: 90,
      publishedAt: new Date(),
    }
  })

  console.log('‚úÖ Listings created')

  // Add more listings for diverse locations
  const listing6 = await prisma.listing.create({
    data: {
      hostId: host1.id,
      title: 'CƒÉn H·ªô Studio View H·ªì T√¢y H√† N·ªôi',
      slug: 'can-ho-studio-view-ho-tay-ha-noi',
      description: 'Studio hi·ªán ƒë·∫°i view H·ªì T√¢y tuy·ªát ƒë·∫πp. ƒê·∫ßy ƒë·ªß ti·ªán nghi, g·∫ßn Ph·ªë C·ªï. Th√≠ch h·ª£p cho c·∫∑p ƒë√¥i ho·∫∑c 1-2 ng∆∞·ªùi. Ban c√¥ng ri√™ng ng·∫Øm ho√†ng h√¥n.',
      propertyType: 'APARTMENT',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 2,
      bedrooms: 1,
      beds: 1,
      bathrooms: 1,
      country: 'Vi·ªát Nam',
      city: 'H√† N·ªôi',
      state: 'H√† N·ªôi',
      address: '98 Y√™n Ph·ª•, T√¢y H·ªì',
      zipCode: '100000',
      latitude: 21.0545,
      longitude: 105.8212,
      neighborhood: 'H·ªì T√¢y',
      basePrice: 800000,
      cleaningFee: 150000,
      serviceFee: 80000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1522708323590-d24dbb6b0267?w=1200',
        'https://images.unsplash.com/photo-1536376072261-38c75010e6c9?w=1200',
        'https://images.unsplash.com/photo-1484101403633-562f891dc89a?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 1,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'HanoiStudio_5G',
      wifiPassword: 'hanoi2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.6,
      totalReviews: 42,
      totalBookings: 67,
      occupancyRate: 75,
      publishedAt: new Date(),
    }
  })

  const listing7 = await prisma.listing.create({
    data: {
      hostId: host2.id,
      title: 'Bungalow M≈©i N√© View Bi·ªÉn Tr·ª±c Di·ªán',
      slug: 'bungalow-mui-ne-view-bien-truc-dien',
      description: 'Bungalow g·ªó tr√™n b√£i bi·ªÉn M≈©i N√©. B∆∞·ªõc ch√¢n ra l√† bi·ªÉn, view b√¨nh minh tuy·ªát ƒë·∫πp. BBQ ri√™ng, kayak mi·ªÖn ph√≠. Tr·∫£i nghi·ªám resort gi√° h·ª£p l√Ω.',
      propertyType: 'BUNGALOW',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 4,
      bedrooms: 2,
      beds: 2,
      bathrooms: 1,
      country: 'Vi·ªát Nam',
      city: 'Phan Thi·∫øt',
      state: 'B√¨nh Thu·∫≠n',
      address: 'Nguy·ªÖn ƒê√¨nh Chi·ªÉu, M≈©i N√©',
      zipCode: '800000',
      latitude: 10.9333,
      longitude: 108.2833,
      neighborhood: 'B√£i bi·ªÉn M≈©i N√©',
      basePrice: 1500000,
      cleaningFee: 250000,
      serviceFee: 150000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1571896349842-33c89424de2d?w=1200',
        'https://images.unsplash.com/photo-1571003123894-1f0594d2b5d9?w=1200',
        'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 2,
      maxNights: 14,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'MuiNe_Beach',
      wifiPassword: 'muine123',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.7,
      totalReviews: 58,
      totalBookings: 89,
      occupancyRate: 82,
      publishedAt: new Date(),
    }
  })

  const listing8 = await prisma.listing.create({
    data: {
      hostId: host1.id,
      title: 'Nh√† V∆∞·ªùn C·∫ßn Th∆° - Tr·∫£i Nghi·ªám Mi·ªÅn T√¢y',
      slug: 'nha-vuon-can-tho-trai-nghiem-mien-tay',
      description: 'Nh√† v∆∞·ªùn r·ªông 500m2 ven s√¥ng H·∫≠u. V∆∞·ªùn tr√°i c√¢y, ao c√°, b·∫øp ngo√†i tr·ªùi. Tr·∫£i nghi·ªám vƒÉn h√≥a mi·ªÅn T√¢y ƒë√≠ch th·ª±c. Ch·ªß nh√† nhi·ªát t√¨nh h∆∞·ªõng d·∫´n n·∫•u ƒÉn.',
      propertyType: 'FARM_STAY',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 6,
      bedrooms: 3,
      beds: 3,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'C·∫ßn Th∆°',
      state: 'C·∫ßn Th∆°',
      address: 'ƒê∆∞·ªùng Tr·∫ßn VƒÉn Kh√©o, C√°i RƒÉng',
      zipCode: '900000',
      latitude: 10.0341,
      longitude: 105.7722,
      neighborhood: 'Ven s√¥ng H·∫≠u',
      basePrice: 1800000,
      cleaningFee: 300000,
      serviceFee: 180000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1568605114967-8130f3a36994?w=1200',
        'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=1200',
        'https://images.unsplash.com/photo-1600585154340-be6161a56a0c?w=1200',
      ],
      amenities: [],
      checkInTime: '13:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 7,
      instantBookable: false,
      cancellationPolicy: 'FLEXIBLE',
      allowPets: true,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'CanTho_Garden',
      wifiPassword: 'cantho2024',
      isVerified: true,
      status: 'ACTIVE',
      featured: false,
      averageRating: 4.9,
      totalReviews: 73,
      totalBookings: 95,
      occupancyRate: 88,
      publishedAt: new Date(),
    }
  })

  const listing9 = await prisma.listing.create({
    data: {
      hostId: host2.id,
      title: 'Condo V≈©ng T√†u Front Beach - T·∫ßng Cao',
      slug: 'condo-vung-tau-front-beach-tang-cao',
      description: 'Condo 2 ph√≤ng ng·ªß t·∫ßng 25 view bi·ªÉn panorama. H·ªì b∆°i rooftop, gym, sauna. G·∫ßn b√£i sau 2 ph√∫t ƒëi b·ªô. ƒê·∫ßy ƒë·ªß ti·ªán nghi nh∆∞ kh√°ch s·∫°n 5 sao.',
      propertyType: 'CONDO',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 5,
      bedrooms: 2,
      beds: 3,
      bathrooms: 2,
      country: 'Vi·ªát Nam',
      city: 'V≈©ng T√†u',
      state: 'B√† R·ªãa - V≈©ng T√†u',
      address: 'Thi S√°ch, Th·∫Øng Tam',
      zipCode: '790000',
      latitude: 10.3458,
      longitude: 107.0843,
      neighborhood: 'B√£i sau',
      basePrice: 2200000,
      cleaningFee: 350000,
      serviceFee: 220000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?w=1200',
        'https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=1200',
        'https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '12:00',
      minNights: 2,
      maxNights: 30,
      instantBookable: true,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: true,
      wifiName: 'VungTau_Condo',
      wifiPassword: 'vungtau24',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.8,
      totalReviews: 91,
      totalBookings: 145,
      occupancyRate: 87,
      publishedAt: new Date(),
    }
  })

  const listing10 = await prisma.listing.create({
    data: {
      hostId: host1.id,
      title: 'Cabin Sapa View Ru·ªông B·∫≠c Thang',
      slug: 'cabin-sapa-view-ruong-bac-thang',
      description: 'Cabin g·ªó ·∫•m √°p gi·ªØa n√∫i r·ª´ng Sapa. View ru·ªông b·∫≠c thang tuy·ªát ƒë·∫πp. L√≤ s∆∞·ªüi, b·∫øp ƒë·∫ßy ƒë·ªß. Tr·∫£i nghi·ªám s·ªëng ch·∫≠m gi·ªØa thi√™n nhi√™n. Trekking, visit b·∫£n l√†ng.',
      propertyType: 'CABIN',
      roomType: 'ENTIRE_PLACE',
      maxGuests: 4,
      bedrooms: 2,
      beds: 2,
      bathrooms: 1,
      country: 'Vi·ªát Nam',
      city: 'Sa Pa',
      state: 'L√†o Cai',
      address: 'Th√¥n T·∫£ Van, X√£ H·∫ßu Th√†o',
      zipCode: '330000',
      latitude: 22.3364,
      longitude: 103.8438,
      neighborhood: 'V√πng cao Sapa',
      basePrice: 1000000,
      cleaningFee: 200000,
      serviceFee: 100000,
      currency: 'VND',
      images: [
        'https://images.unsplash.com/photo-1587061949409-02df41d5e562?w=1200',
        'https://images.unsplash.com/photo-1542718610-a1d656d1884c?w=1200',
        'https://images.unsplash.com/photo-1499696010180-025ef6e1a8f9?w=1200',
      ],
      amenities: [],
      checkInTime: '14:00',
      checkOutTime: '11:00',
      minNights: 2,
      maxNights: 7,
      instantBookable: false,
      cancellationPolicy: 'MODERATE',
      allowPets: false,
      allowSmoking: false,
      allowEvents: false,
      allowChildren: true,
      hasSmartLock: false,
      wifiName: 'Sapa_Cabin',
      wifiPassword: 'sapa1234',
      isVerified: true,
      status: 'ACTIVE',
      featured: true,
      averageRating: 4.9,
      totalReviews: 112,
      totalBookings: 156,
      occupancyRate: 91,
      publishedAt: new Date(),
    }
  })

  console.log('‚úÖ Extended listings created')

  console.log('üéüÔ∏è Creating vouchers & coupons...')

  const seedNow = new Date()
  const addDays = (days: number) => {
    const date = new Date(seedNow)
    date.setDate(date.getDate() + days)
    return date
  }

  const adminVoucherConfig = {
    code: 'LUXE10',
    name: '∆Øu ƒë√£i th√†nh vi√™n to√†n h·ªá th·ªëng',
    description: 'Gi·∫£m 10% cho ƒë∆°n t·ª´ 2 ƒë√™m, t·ªëi ƒëa 2.000.000‚Ç´.',
    type: PromotionType.GENERAL,
    discountType: DiscountType.PERCENTAGE,
    discountValue: 10,
    maxDiscount: 2_000_000,
    minBookingValue: 4_000_000,
    maxUses: 500,
    maxUsesPerUser: 3,
    pointCost: 0,
    source: PromotionSource.ADMIN,
    hostId: null,
    stackWithMembership: true,
    stackWithPromotions: false,
    allowedMembershipTiers: [
      LoyaltyTier.SILVER,
      LoyaltyTier.GOLD,
      LoyaltyTier.PLATINUM,
      LoyaltyTier.DIAMOND,
    ],
    listingIds: [] as string[],
    propertyTypes: [] as PropertyType[],
    metadata: {
      highlight: 'Gi·∫£m 10% to√†n b·ªô h·ªá th·ªëng',
    } as Prisma.JsonObject,
    validFrom: seedNow,
    validUntil: addDays(120),
    isActive: true,
  } satisfies Prisma.PromotionUncheckedCreateInput

  const loyaltyVoucherConfig = {
    code: 'POINTS15',
    name: 'ƒê·ªïi ƒëi·ªÉm nh·∫≠n voucher 15%',
    description: 'Voucher gi·∫£m 15% t·ªëi ƒëa 1.500.000‚Ç´ d√†nh cho th√†nh vi√™n ƒë·ªïi ƒëi·ªÉm.',
    type: PromotionType.GENERAL,
    discountType: DiscountType.PERCENTAGE,
    discountValue: 15,
    maxDiscount: 1_500_000,
    minBookingValue: 3_000_000,
    maxUses: 300,
    maxUsesPerUser: 2,
    pointCost: 2_500,
    source: PromotionSource.LOYALTY_EXCHANGE,
    hostId: null,
    stackWithMembership: true,
    stackWithPromotions: false,
    allowedMembershipTiers: [] as LoyaltyTier[],
    listingIds: [] as string[],
    propertyTypes: [] as PropertyType[],
    metadata: {
      highlight: 'ƒê·ªïi 2.500 ƒëi·ªÉm ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i 15%',
    } as Prisma.JsonObject,
    validFrom: seedNow,
    validUntil: addDays(90),
    isActive: true,
  } satisfies Prisma.PromotionUncheckedCreateInput

  const hostVoucherConfig = {
    code: 'VILLA20',
    name: '∆Øu ƒë√£i ri√™ng villa Nha Trang',
    description: 'Gi·∫£m 20% cho k·ª≥ ngh·ªâ t·ªëi thi·ªÉu 3 ƒë√™m t·∫°i villa Nha Trang.',
    type: PromotionType.GENERAL,
    discountType: DiscountType.PERCENTAGE,
    discountValue: 20,
    maxDiscount: 3_000_000,
    minBookingValue: 6_000_000,
    maxUses: 120,
    maxUsesPerUser: 1,
    pointCost: 0,
    source: PromotionSource.HOST,
    hostId: host1.id,
    stackWithMembership: true,
    stackWithPromotions: false,
    allowedMembershipTiers: [] as LoyaltyTier[],
    listingIds: [listing1.id],
    propertyTypes: [listing1.propertyType],
    metadata: {
      feature: 'Host-specific coupon',
    } as Prisma.JsonObject,
    validFrom: seedNow,
    validUntil: addDays(60),
    isActive: true,
  } satisfies Prisma.PromotionUncheckedCreateInput

  const { code: adminVoucherCode, ...adminVoucherData } = adminVoucherConfig
  const { code: loyaltyVoucherCode, ...loyaltyVoucherData } = loyaltyVoucherConfig
  const { code: hostVoucherCode, ...hostVoucherData } = hostVoucherConfig

  const [adminVoucher, loyaltyVoucher, hostVoucher] = await Promise.all([
    prisma.promotion.upsert({
      where: { code: adminVoucherCode },
      update: adminVoucherData,
      create: adminVoucherConfig,
    }),
    prisma.promotion.upsert({
      where: { code: loyaltyVoucherCode },
      update: loyaltyVoucherData,
      create: loyaltyVoucherConfig,
    }),
    prisma.promotion.upsert({
      where: { code: hostVoucherCode },
      update: hostVoucherData,
      create: hostVoucherConfig,
    }),
  ])

  const spaReward = await prisma.rewardCatalogItem.findUnique({
    where: { slug: 'spa-credit' },
  })

  if (spaReward && spaReward.promotionId !== loyaltyVoucher.id) {
    const existingMetadata = ensureJsonObject(spaReward.metadata)

    await prisma.rewardCatalogItem.update({
      where: { id: spaReward.id },
      data: {
        promotionId: loyaltyVoucher.id,
        pointsCost: loyaltyVoucher.pointCost ?? spaReward.pointsCost,
        metadata: {
          ...existingMetadata,
          promotionCode: loyaltyVoucher.code,
        } as Prisma.JsonObject,
      },
    })
  }

  const existingRedemption = await prisma.promotionRedemption.findFirst({
    where: {
      promotionId: loyaltyVoucher.id,
      userId: guest2.id,
    },
  })

  if (!existingRedemption && spaReward) {
    const currentGuest2 = await prisma.user.findUnique({
      where: { id: guest2.id },
      select: { loyaltyPoints: true },
    })

    const redemptionCost = loyaltyVoucher.pointCost ?? spaReward.pointsCost ?? 0
    const balanceAfter = Math.max((currentGuest2?.loyaltyPoints ?? 0) - redemptionCost, 0)

    const rewardRedemption = await prisma.rewardRedemption.create({
      data: {
        userId: guest2.id,
        rewardId: spaReward.id,
        status: 'FULFILLED',
        pointsSpent: redemptionCost,
        fulfilledAt: seedNow,
        metadata: {
          promotionId: loyaltyVoucher.id,
          catalogItemSlug: spaReward.slug,
        },
      },
    })

    const promotionRedemption = await prisma.promotionRedemption.create({
      data: {
        promotionId: loyaltyVoucher.id,
        userId: guest2.id,
        status: 'ACTIVE',
        pointsSpent: redemptionCost,
        redeemedAt: seedNow,
        expiresAt: loyaltyVoucher.validUntil,
        metadata: {
          rewardRedemptionId: rewardRedemption.id,
          catalogItemSlug: spaReward.slug,
        },
      },
    })

    await prisma.rewardTransaction.create({
      data: {
        userId: guest2.id,
        transactionType: 'DEBIT',
        source: 'REDEMPTION',
        points: -redemptionCost,
        balanceAfter,
        description: `ƒê·ªïi voucher ${loyaltyVoucher.code}`,
        referenceId: promotionRedemption.id,
        metadata: {
          promotionId: loyaltyVoucher.id,
          catalogItemSlug: spaReward.slug,
        },
      },
    })

    await prisma.user.update({
      where: { id: guest2.id },
      data: { loyaltyPoints: balanceAfter },
    })

    await prisma.promotion.update({
      where: { id: loyaltyVoucher.id },
      data: {
        usedCount: { increment: 1 },
      },
    })
  }

  console.log('‚úÖ Vouchers seeded')

  // Create Bookings
  console.log('üìÖ Creating bookings...')
  
  const booking1 = await prisma.booking.create({
    data: {
      guestId: guest1.id,
      hostId: host1.id,
      listingId: listing1.id,
      checkIn: new Date('2025-01-15'),
      checkOut: new Date('2025-01-18'),
      nights: 3,
      adults: 4,
      basePrice: 3500000,
      cleaningFee: 500000,
      serviceFee: 350000,
      totalPrice: 10500000,
      status: 'COMPLETED',
      completedAt: new Date('2025-01-18'),
    }
  })

  const booking2 = await prisma.booking.create({
    data: {
      guestId: guest2.id,
      hostId: host1.id,
      listingId: listing1.id,
      checkIn: new Date('2025-02-20'),
      checkOut: new Date('2025-02-23'),
      nights: 3,
      adults: 4,
      children: 2,
      basePrice: 3500000,
      cleaningFee: 500000,
      serviceFee: 350000,
      totalPrice: 10500000,
      status: 'COMPLETED',
      completedAt: new Date('2025-02-23'),
    }
  })

  const booking3 = await prisma.booking.create({
    data: {
      guestId: guest1.id,
      hostId: host1.id,
      listingId: listing2.id,
      checkIn: new Date('2025-03-10'),
      checkOut: new Date('2025-03-13'),
      nights: 3,
      adults: 4,
      basePrice: 2800000,
      cleaningFee: 400000,
      serviceFee: 280000,
      totalPrice: 8400000,
      status: 'COMPLETED',
      completedAt: new Date('2025-03-13'),
    }
  })

  const booking4 = await prisma.booking.create({
    data: {
      guestId: guest2.id,
      hostId: host2.id,
      listingId: listing3.id,
      checkIn: new Date('2025-04-05'),
      checkOut: new Date('2025-04-10'),
      nights: 5,
      adults: 6,
      children: 2,
      basePrice: 8500000,
      cleaningFee: 1000000,
      serviceFee: 850000,
      totalPrice: 42500000,
      status: 'COMPLETED',
      completedAt: new Date('2025-04-10'),
    }
  })

  const booking5 = await prisma.booking.create({
    data: {
      guestId: guest1.id,
      hostId: host1.id,
      listingId: listing5.id,
      checkIn: new Date('2025-05-01'),
      checkOut: new Date('2025-05-04'),
      nights: 3,
      adults: 2,
      basePrice: 1200000,
      cleaningFee: 200000,
      serviceFee: 120000,
      totalPrice: 3600000,
      status: 'COMPLETED',
      completedAt: new Date('2025-05-04'),
    }
  })

  console.log('‚úÖ Bookings created')

  // Create Reviews
  console.log('‚≠ê Creating reviews...')

  await prisma.review.createMany({
    data: [
      {
        listingId: listing1.id,
        reviewerId: guest1.id,
        revieweeId: host1.id,
        bookingId: booking1.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Villa tuy·ªát v·ªùi! View bi·ªÉn ƒë·∫πp kh√¥ng t√¨ v·∫øt. Ch·ªß nh√† nhi·ªát t√¨nh, check-in d·ªÖ d√†ng. Nh·∫•t ƒë·ªãnh s·∫Ω quay l·∫°i!',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 5,
        valueRating: 5,
      },
      {
        listingId: listing1.id,
        reviewerId: guest2.id,
        revieweeId: host1.id,
        bookingId: booking2.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Gia ƒë√¨nh m√¨nh ƒë√£ c√≥ 3 ng√†y tuy·ªát v·ªùi t·∫°i villa. H·ªì b∆°i s·∫°ch s·∫Ω, ph√≤ng r·ªông r√£i. R·∫•t ƒë√°ng ti·ªÅn!',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 5,
        valueRating: 4,
      },
      {
        listingId: listing2.id,
        reviewerId: guest1.id,
        revieweeId: host1.id,
        bookingId: booking3.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Bi·ªát th·ª± ƒë·∫πp nh∆∞ m∆°! Kh√¥ng kh√≠ ƒê√† L·∫°t m√°t m·∫ª, view ƒë·ªìi th√¥ng th∆° m·ªông. Ch·ªß nh√† r·∫•t chu ƒë√°o.',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 4,
        valueRating: 5,
      },
      {
        listingId: listing3.id,
        reviewerId: guest2.id,
        revieweeId: host2.id,
        bookingId: booking4.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Resort ƒë·∫≥ng c·∫•p 5 sao! Butler ph·ª•c v·ª• t·∫≠n t√¨nh 24/7. B√£i bi·ªÉn ri√™ng tuy·ªát ƒë·∫πp. ƒê√°ng t·ª´ng ƒë·ªìng!',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 5,
        valueRating: 5,
      },
      {
        listingId: listing5.id,
        reviewerId: guest1.id,
        revieweeId: host1.id,
        bookingId: booking5.id,
        type: 'GUEST_TO_HOST',
        overallRating: 5,
        comment: 'Nh√† c·ªï H·ªôi An r·∫•t ƒë·∫πp v√† authentic. G·∫ßn ph·ªë c·ªï nh∆∞ng v·∫´n y√™n tƒ©nh. Tr·∫£i nghi·ªám tuy·ªát v·ªùi!',
        cleanlinessRating: 5,
        accuracyRating: 5,
        checkInRating: 5,
        communicationRating: 5,
        locationRating: 5,
        valueRating: 5,
      },
    ]
  })

  console.log('‚úÖ Reviews created')

  console.log('üéâ Database seeding completed!')
  console.log('\nüìä Summary:')
  console.log(`- Users: ${await prisma.user.count()}`)
  console.log(`- Listings: ${await prisma.listing.count()}`)
  console.log(`- Bookings: ${await prisma.booking.count()}`)
  console.log(`- Reviews: ${await prisma.review.count()}`)
  console.log('\n‚ú® Featured Listings:')
  console.log('  ‚Ä¢ Villa Nha Trang (4.9‚≠ê)')
  console.log('  ‚Ä¢ Bi·ªát th·ª± ƒê√† L·∫°t (4.8‚≠ê)')
  console.log('  ‚Ä¢ Resort Ph√∫ Qu·ªëc (5.0‚≠ê)')
  console.log('  ‚Ä¢ Condo V≈©ng T√†u (4.8‚≠ê)')
  console.log('  ‚Ä¢ Cabin Sapa (4.9‚≠ê)')
  console.log('\n‚úÖ All done!')
}

main()
  .catch((e) => {
    console.error('‚ùå Error seeding database:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
